//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v24.23.0.0
//   At: 2024-06-14T12:00:38.6886094+02:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AlarmControlPanelEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<DatetimeEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<NotifyEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SirenEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WaterHeaterEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AdguardServices>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<DatetimeServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<MypyllantServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<RingServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AlarmControlPanelEntities AlarmControlPanel { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    ConversationEntities Conversation { get; }

    DatetimeEntities Datetime { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    InputBooleanEntities InputBoolean { get; }

    NotifyEntities Notify { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SirenEntities Siren { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    UpdateEntities Update { get; }

    WaterHeaterEntities WaterHeater { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AlarmControlPanelEntities AlarmControlPanel => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public DatetimeEntities Datetime => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public NotifyEntities Notify => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SirenEntities Siren => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WaterHeaterEntities WaterHeater => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all light entities currently registered (at runtime) in Home Assistant as LightEntity</summary>
    public IEnumerable<LightEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("light.")).Select(e => new LightEntity(e));
    ///<summary>Lamp-Kantoor</summary>
    public LightEntity LampKantoor => new(_haContext, "light.lamp_kantoor");
    ///<summary>Lamp-tafel-L</summary>
    public LightEntity LampTafelL => new(_haContext, "light.lamp_tafel_l");
    ///<summary>Lamp-tafel-R</summary>
    public LightEntity LampTafelR => new(_haContext, "light.lamp_tafel_r");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all media_player entities currently registered (at runtime) in Home Assistant as MediaPlayerEntity</summary>
    public IEnumerable<MediaPlayerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("media_player.")).Select(e => new MediaPlayerEntity(e));
    ///<summary>Chromecast Slaapkamer</summary>
    public MediaPlayerEntity Chromecast => new(_haContext, "media_player.chromecast");
    ///<summary>Chromecast Huiskamer </summary>
    public MediaPlayerEntity ChromecastHuiskamer => new(_haContext, "media_player.chromecast_huiskamer");
    public MediaPlayerEntity Chromecast0669 => new(_haContext, "media_player.chromecast0669");
    ///<summary>Chromecast Huiskamer </summary>
    public MediaPlayerEntity Huiskamer => new(_haContext, "media_player.huiskamer");
}

public partial class AlarmControlPanelEntities
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all alarm_control_panel entities currently registered (at runtime) in Home Assistant as AlarmControlPanelEntity</summary>
    public IEnumerable<AlarmControlPanelEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("alarm_control_panel.")).Select(e => new AlarmControlPanelEntity(e));
    ///<summary>Emmeloord Alarm </summary>
    public AlarmControlPanelEntity EmmeloordAlarm => new(_haContext, "alarm_control_panel.emmeloord_alarm");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all automation entities currently registered (at runtime) in Home Assistant as AutomationEntity</summary>
    public IEnumerable<AutomationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("automation.")).Select(e => new AutomationEntity(e));
    ///<summary>Apparatuur aan bij thuiskomst</summary>
    public AutomationEntity ApparatuurAanBijThuiskomst => new(_haContext, "automation.apparatuur_aan_bij_thuiskomst");
    ///<summary>Apparatuur uit bij alarm aan</summary>
    public AutomationEntity ApparatuurUitBijAlarmAan => new(_haContext, "automation.apparatuur_uit_bij_alarm_aan");
    ///<summary>Alarm uit als we thuis zijn</summary>
    public AutomationEntity Automation3 => new(_haContext, "automation.automation_3");
    ///<summary>Kantoor aan</summary>
    public AutomationEntity KantoorAan => new(_haContext, "automation.kantoor_aan");
    ///<summary>Lampen aan in de avond</summary>
    public AutomationEntity LampenAan => new(_haContext, "automation.lampen_aan");
    ///<summary>Lampen aan in de morgen</summary>
    public AutomationEntity LampenAanInDeMorgen => new(_haContext, "automation.lampen_aan_in_de_morgen");
    ///<summary>Lampen uit na zonsopkomst </summary>
    public AutomationEntity LampenUitNaZonsopkomst => new(_haContext, "automation.lampen_uit_na_zonsopkomst");
    ///<summary>Reboot</summary>
    public AutomationEntity Reboot2 => new(_haContext, "automation.reboot_2");
    ///<summary>Restart AdGuard</summary>
    public AutomationEntity RestartAdguard => new(_haContext, "automation.restart_adguard");
    ///<summary>Warm water uitzetten</summary>
    public AutomationEntity WarmWaterUitzetten => new(_haContext, "automation.warm_water_uitzetten");
    ///<summary>Warm water verwarmen</summary>
    public AutomationEntity WarmWaterVerwarmen => new(_haContext, "automation.warm_water_verwarmen");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all binary_sensor entities currently registered (at runtime) in Home Assistant as BinarySensorEntity</summary>
    public IEnumerable<BinarySensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("binary_sensor.")).Select(e => new BinarySensorEntity(e));
    ///<summary>Achterdeur Contact Sensor </summary>
    public BinarySensorEntity AchterdeurContactSensor => new(_haContext, "binary_sensor.achterdeur_contact_sensor");
    ///<summary>Achterdeur Contact Sensor Tamper</summary>
    public BinarySensorEntity AchterdeurContactSensorTamper => new(_haContext, "binary_sensor.achterdeur_contact_sensor_tamper");
    ///<summary>Backups Stale</summary>
    public BinarySensorEntity BackupsStale => new(_haContext, "binary_sensor.backups_stale");
    ///<summary>Computer Overheat</summary>
    public BinarySensorEntity ComputerOverheat => new(_haContext, "binary_sensor.computer_overheat");
    ///<summary>Deurbel Ding</summary>
    public BinarySensorEntity DeurbelDing2 => new(_haContext, "binary_sensor.deurbel_ding_2");
    ///<summary>Deurbel Motion</summary>
    public BinarySensorEntity DeurbelMotion => new(_haContext, "binary_sensor.deurbel_motion");
    ///<summary>Emmeloord Alarm Tamper</summary>
    public BinarySensorEntity EmmeloordAlarmTamper => new(_haContext, "binary_sensor.emmeloord_alarm_tamper");
    ///<summary>Emmeloord Base Station Tamper</summary>
    public BinarySensorEntity EmmeloordBaseStationTamper => new(_haContext, "binary_sensor.emmeloord_base_station_tamper");
    ///<summary>Emmeloord Range Extender Tamper</summary>
    public BinarySensorEntity EmmeloordRangeExtenderTamper => new(_haContext, "binary_sensor.emmeloord_range_extender_tamper");
    ///<summary>EX5601-T1 WAN status</summary>
    public BinarySensorEntity Ex5601T1WanStatus => new(_haContext, "binary_sensor.ex5601_t1_wan_status");
    ///<summary>Garage Overheat</summary>
    public BinarySensorEntity GarageOverheat => new(_haContext, "binary_sensor.garage_overheat");
    ///<summary>Kantoor Overheat</summary>
    public BinarySensorEntity KantoorOverheat => new(_haContext, "binary_sensor.kantoor_overheat");
    ///<summary>Keuken Motion Sensor </summary>
    public BinarySensorEntity KeukenMotionSensor => new(_haContext, "binary_sensor.keuken_motion_sensor");
    ///<summary>Keuken Motion Sensor Tamper</summary>
    public BinarySensorEntity KeukenMotionSensorTamper => new(_haContext, "binary_sensor.keuken_motion_sensor_tamper");
    ///<summary>Lamp-Kantoor Overheat</summary>
    public BinarySensorEntity LampKantoorOverheat => new(_haContext, "binary_sensor.lamp_kantoor_overheat");
    ///<summary>Lamp keuken Overheat</summary>
    public BinarySensorEntity LampKeukenOverheat => new(_haContext, "binary_sensor.lamp_keuken_overheat");
    ///<summary>Lamp-tafel-L Overheat</summary>
    public BinarySensorEntity LampTafelLOverheat => new(_haContext, "binary_sensor.lamp_tafel_l_overheat");
    ///<summary>Lamp-tafel-R Overheat</summary>
    public BinarySensorEntity LampTafelROverheat => new(_haContext, "binary_sensor.lamp_tafel_r_overheat");
    ///<summary>Our home Circuit 0 Cooling Allowed</summary>
    public BinarySensorEntity OurHomeCircuit0CoolingAllowed => new(_haContext, "binary_sensor.our_home_circuit_0_cooling_allowed");
    ///<summary>Our home Firmware Update Enabled</summary>
    public BinarySensorEntity OurHomeFirmwareUpdateEnabled => new(_haContext, "binary_sensor.our_home_firmware_update_enabled");
    ///<summary>Our home Firmware Update Required</summary>
    public BinarySensorEntity OurHomeFirmwareUpdateRequired => new(_haContext, "binary_sensor.our_home_firmware_update_required");
    ///<summary>Our home Online Status</summary>
    public BinarySensorEntity OurHomeOnlineStatus => new(_haContext, "binary_sensor.our_home_online_status");
    ///<summary>Our home Trouble Codes</summary>
    public BinarySensorEntity OurHomeTroubleCodes => new(_haContext, "binary_sensor.our_home_trouble_codes");
    ///<summary>Toetsenpaneel ingang Motion</summary>
    public BinarySensorEntity ToetsenpaneelIngangMotion => new(_haContext, "binary_sensor.toetsenpaneel_ingang_motion");
    ///<summary>Toetsenpaneel ingang Tamper</summary>
    public BinarySensorEntity ToetsenpaneelIngangTamper => new(_haContext, "binary_sensor.toetsenpaneel_ingang_tamper");
    ///<summary>Tuin Beweging</summary>
    public BinarySensorEntity TuinBeweging => new(_haContext, "binary_sensor.tuin_beweging");
    ///<summary>Tuin Camera Motion</summary>
    public BinarySensorEntity TuinCameraMotion => new(_haContext, "binary_sensor.tuin_camera_motion");
    ///<summary>Tuinhuis verlichting  Overheat</summary>
    public BinarySensorEntity TuinhuisVerlichtingOverheat => new(_haContext, "binary_sensor.tuinhuis_verlichting_overheat");
    ///<summary>TV Overheat</summary>
    public BinarySensorEntity TvOverheat => new(_haContext, "binary_sensor.tv_overheat");
    ///<summary>Voordeur Beweging</summary>
    public BinarySensorEntity VoordeurBeweging => new(_haContext, "binary_sensor.voordeur_beweging");
    ///<summary>Voordeur Contact Sensor </summary>
    public BinarySensorEntity VoordeurContactSensor => new(_haContext, "binary_sensor.voordeur_contact_sensor");
    ///<summary>Voordeur Contact Sensor Tamper</summary>
    public BinarySensorEntity VoordeurContactSensorTamper => new(_haContext, "binary_sensor.voordeur_contact_sensor_tamper");
    ///<summary>Voordeur Ding</summary>
    public BinarySensorEntity VoordeurDing => new(_haContext, "binary_sensor.voordeur_ding");
    ///<summary>Voordeur Motion Sensor </summary>
    public BinarySensorEntity VoordeurMotionSensor2 => new(_haContext, "binary_sensor.voordeur_motion_sensor_2");
    ///<summary>Voordeur Motion Sensor Tamper</summary>
    public BinarySensorEntity VoordeurMotionSensorTamper2 => new(_haContext, "binary_sensor.voordeur_motion_sensor_tamper_2");
    ///<summary>Woonkamer Beweging</summary>
    public BinarySensorEntity WoonkamerBeweging => new(_haContext, "binary_sensor.woonkamer_beweging");
    ///<summary>Woonkamer Camera Motion</summary>
    public BinarySensorEntity WoonkamerCameraMotion => new(_haContext, "binary_sensor.woonkamer_camera_motion");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all button entities currently registered (at runtime) in Home Assistant as ButtonEntity</summary>
    public IEnumerable<ButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("button.")).Select(e => new ButtonEntity(e));
    ///<summary>Deurbel Take Snapshot</summary>
    public ButtonEntity DeurbelTakeSnapshot => new(_haContext, "button.deurbel_take_snapshot");
    ///<summary>Tuin Camera Take Snapshot</summary>
    public ButtonEntity TuinCameraTakeSnapshot => new(_haContext, "button.tuin_camera_take_snapshot");
    ///<summary>Woonkamer Camera Take Snapshot</summary>
    public ButtonEntity WoonkamerCameraTakeSnapshot => new(_haContext, "button.woonkamer_camera_take_snapshot");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all calendar entities currently registered (at runtime) in Home Assistant as CalendarEntity</summary>
    public IEnumerable<CalendarEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("calendar.")).Select(e => new CalendarEntity(e));
    ///<summary>Our home Domestic Hot Water 0 Circulation Schedule</summary>
    public CalendarEntity OurHomeDomesticHotWater0CirculationSchedule => new(_haContext, "calendar.our_home_domestic_hot_water_0_circulation_schedule");
    ///<summary>Our home Domestic Hot Water 0 Schedule</summary>
    public CalendarEntity OurHomeDomesticHotWater0Schedule => new(_haContext, "calendar.our_home_domestic_hot_water_0_schedule");
    ///<summary>Our home Zone Thuis (Circuit 0) Heating Schedule</summary>
    public CalendarEntity OurHomeZoneThuisCircuit0HeatingSchedule => new(_haContext, "calendar.our_home_zone_thuis_circuit_0_heating_schedule");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all camera entities currently registered (at runtime) in Home Assistant as CameraEntity</summary>
    public IEnumerable<CameraEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("camera.")).Select(e => new CameraEntity(e));
    ///<summary>Buienradar</summary>
    public CameraEntity Buienradar => new(_haContext, "camera.buienradar");
    ///<summary>Deurbel Snapshot</summary>
    public CameraEntity DeurbelSnapshot => new(_haContext, "camera.deurbel_snapshot");
    ///<summary>Tuin</summary>
    public CameraEntity Tuin => new(_haContext, "camera.tuin");
    ///<summary>Tuin</summary>
    public CameraEntity TuinCameraSnapshot => new(_haContext, "camera.tuin_camera_snapshot");
    ///<summary>Voordeur</summary>
    public CameraEntity Voordeur => new(_haContext, "camera.voordeur");
    ///<summary>Woonkamer</summary>
    public CameraEntity Woonkamer => new(_haContext, "camera.woonkamer");
    ///<summary>Woonkamer Camera Snapshot</summary>
    public CameraEntity WoonkamerCameraSnapshot => new(_haContext, "camera.woonkamer_camera_snapshot");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all climate entities currently registered (at runtime) in Home Assistant as ClimateEntity</summary>
    public IEnumerable<ClimateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("climate.")).Select(e => new ClimateEntity(e));
    ///<summary>Our home Zone Thuis (Circuit 0) Climate</summary>
    public ClimateEntity OurHomeZoneThuisCircuit0Climate => new(_haContext, "climate.our_home_zone_thuis_circuit_0_climate");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all conversation entities currently registered (at runtime) in Home Assistant as ConversationEntity</summary>
    public IEnumerable<ConversationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("conversation.")).Select(e => new ConversationEntity(e));
    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class DatetimeEntities
{
    private readonly IHaContext _haContext;
    public DatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all datetime entities currently registered (at runtime) in Home Assistant as DatetimeEntity</summary>
    public IEnumerable<DatetimeEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("datetime.")).Select(e => new DatetimeEntity(e));
    ///<summary>Our home Away Mode End Date</summary>
    public DatetimeEntity OurHomeAwayModeEndDate => new(_haContext, "datetime.our_home_away_mode_end_date");
    ///<summary>Our home Away Mode Start Date</summary>
    public DatetimeEntity OurHomeAwayModeStartDate => new(_haContext, "datetime.our_home_away_mode_start_date");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all device_tracker entities currently registered (at runtime) in Home Assistant as DeviceTrackerEntity</summary>
    public IEnumerable<DeviceTrackerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("device_tracker.")).Select(e => new DeviceTrackerEntity(e));
    ///<summary>iPhone Mark 2</summary>
    public DeviceTrackerEntity IphoneMark2 => new(_haContext, "device_tracker.iphone_mark_2");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_boolean entities currently registered (at runtime) in Home Assistant as InputBooleanEntity</summary>
    public IEnumerable<InputBooleanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_boolean.")).Select(e => new InputBooleanEntity(e));
    ///<summary>dev_netdaemon_net_daemon_apps_apps_adjust_power_schedule_adjust_energy_schedule</summary>
    public InputBooleanEntity DevNetdaemonNetDaemonAppsAppsAdjustPowerScheduleAdjustEnergySchedule => new(_haContext, "input_boolean.dev_netdaemon_net_daemon_apps_apps_adjust_power_schedule_adjust_energy_schedule");
    ///<summary>dev_netdaemon_net_daemon_apps_apps_adjust_power_schedule_adjust_heating_schedule</summary>
    public InputBooleanEntity DevNetdaemonNetDaemonAppsAppsAdjustPowerScheduleAdjustHeatingSchedule => new(_haContext, "input_boolean.dev_netdaemon_net_daemon_apps_apps_adjust_power_schedule_adjust_heating_schedule");
    ///<summary>netdaemon_extensions_scheduling_scheduling_app</summary>
    public InputBooleanEntity NetdaemonExtensionsSchedulingSchedulingApp => new(_haContext, "input_boolean.netdaemon_extensions_scheduling_scheduling_app");
    ///<summary>netdaemon_hass_model_hello_world_app</summary>
    public InputBooleanEntity NetdaemonHassModelHelloWorldApp => new(_haContext, "input_boolean.netdaemon_hass_model_hello_world_app");
    ///<summary>netdaemon_hass_model_light_on_movement</summary>
    public InputBooleanEntity NetdaemonHassModelLightOnMovement => new(_haContext, "input_boolean.netdaemon_hass_model_light_on_movement");
}

public partial class NotifyEntities
{
    private readonly IHaContext _haContext;
    public NotifyEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all notify entities currently registered (at runtime) in Home Assistant as NotifyEntity</summary>
    public IEnumerable<NotifyEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("notify.")).Select(e => new NotifyEntity(e));
    ///<summary>tibber</summary>
    public NotifyEntity Tibber => new(_haContext, "notify.tibber");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all number entities currently registered (at runtime) in Home Assistant as NumberEntity</summary>
    public IEnumerable<NumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("number.")).Select(e => new NumberEntity(e));
    ///<summary>Deurbel Ding Duration</summary>
    public NumberEntity DeurbelDingDuration => new(_haContext, "number.deurbel_ding_duration");
    ///<summary>Deurbel Motion Duration</summary>
    public NumberEntity DeurbelMotionDuration => new(_haContext, "number.deurbel_motion_duration");
    ///<summary>Deurbel Snapshot Interval</summary>
    public NumberEntity DeurbelSnapshotInterval => new(_haContext, "number.deurbel_snapshot_interval");
    ///<summary>Emmeloord Base Station Volume</summary>
    public NumberEntity EmmeloordBaseStationVolume => new(_haContext, "number.emmeloord_base_station_volume");
    ///<summary>Keuken Chime Snooze Minutes</summary>
    public NumberEntity KeukenChimeSnoozeMinutes => new(_haContext, "number.keuken_chime_snooze_minutes");
    ///<summary>Keuken Chime Volume</summary>
    public NumberEntity KeukenChimeVolume => new(_haContext, "number.keuken_chime_volume");
    ///<summary>Our home Holiday Duration Remaining</summary>
    public NumberEntity OurHomeHolidayDurationRemaining => new(_haContext, "number.our_home_holiday_duration_remaining");
    ///<summary>Our home Zone Thuis (Circuit 0) Quick Veto Duration</summary>
    public NumberEntity OurHomeZoneThuisCircuit0QuickVetoDuration => new(_haContext, "number.our_home_zone_thuis_circuit_0_quick_veto_duration");
    ///<summary>Toetsenpaneel ingang Volume</summary>
    public NumberEntity ToetsenpaneelIngangVolume => new(_haContext, "number.toetsenpaneel_ingang_volume");
    ///<summary>Tuin Camera Motion Duration</summary>
    public NumberEntity TuinCameraMotionDuration => new(_haContext, "number.tuin_camera_motion_duration");
    ///<summary>Tuin Camera Snapshot Interval</summary>
    public NumberEntity TuinCameraSnapshotInterval => new(_haContext, "number.tuin_camera_snapshot_interval");
    ///<summary>Woonkamer Camera Motion Duration</summary>
    public NumberEntity WoonkamerCameraMotionDuration => new(_haContext, "number.woonkamer_camera_motion_duration");
    ///<summary>Woonkamer Camera Snapshot Interval</summary>
    public NumberEntity WoonkamerCameraSnapshotInterval => new(_haContext, "number.woonkamer_camera_snapshot_interval");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all person entities currently registered (at runtime) in Home Assistant as PersonEntity</summary>
    public IEnumerable<PersonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("person.")).Select(e => new PersonEntity(e));
    ///<summary>Mark Bovee</summary>
    public PersonEntity MarkBovee => new(_haContext, "person.mark_bovee");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all remote entities currently registered (at runtime) in Home Assistant as RemoteEntity</summary>
    public IEnumerable<RemoteEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("remote.")).Select(e => new RemoteEntity(e));
    ///<summary>Chromecast Huiskamer </summary>
    public RemoteEntity ChromecastHuiskamer => new(_haContext, "remote.chromecast_huiskamer");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all scene entities currently registered (at runtime) in Home Assistant as SceneEntity</summary>
    public IEnumerable<SceneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("scene.")).Select(e => new SceneEntity(e));
    ///<summary>Apparatuur</summary>
    public SceneEntity Apparatuur => new(_haContext, "scene.apparatuur");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all select entities currently registered (at runtime) in Home Assistant as SelectEntity</summary>
    public IEnumerable<SelectEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("select.")).Select(e => new SelectEntity(e));
    ///<summary>Achterdeur Contact Sensor Bypass Mode</summary>
    public SelectEntity AchterdeurContactSensorBypassMode => new(_haContext, "select.achterdeur_contact_sensor_bypass_mode");
    ///<summary>Achterdeur Contact Sensor Chirp Tone</summary>
    public SelectEntity AchterdeurContactSensorChirpTone => new(_haContext, "select.achterdeur_contact_sensor_chirp_tone");
    ///<summary>Deurbel Event Select</summary>
    public SelectEntity DeurbelEventSelect => new(_haContext, "select.deurbel_event_select");
    ///<summary>Deurbel Snapshot Mode</summary>
    public SelectEntity DeurbelSnapshotMode => new(_haContext, "select.deurbel_snapshot_mode");
    ///<summary>Keuken Motion Sensor Bypass Mode</summary>
    public SelectEntity KeukenMotionSensorBypassMode => new(_haContext, "select.keuken_motion_sensor_bypass_mode");
    ///<summary>Keuken Motion Sensor Chirp Tone</summary>
    public SelectEntity KeukenMotionSensorChirpTone => new(_haContext, "select.keuken_motion_sensor_chirp_tone");
    ///<summary>Tuin Camera Event Select</summary>
    public SelectEntity TuinCameraEventSelect => new(_haContext, "select.tuin_camera_event_select");
    ///<summary>Tuin Camera Snapshot Mode</summary>
    public SelectEntity TuinCameraSnapshotMode => new(_haContext, "select.tuin_camera_snapshot_mode");
    ///<summary>Voordeur Contact Sensor Bypass Mode</summary>
    public SelectEntity VoordeurContactSensorBypassMode => new(_haContext, "select.voordeur_contact_sensor_bypass_mode");
    ///<summary>Voordeur Contact Sensor Chirp Tone</summary>
    public SelectEntity VoordeurContactSensorChirpTone => new(_haContext, "select.voordeur_contact_sensor_chirp_tone");
    ///<summary>Voordeur Motion Sensor Bypass Mode</summary>
    public SelectEntity VoordeurMotionSensorBypassMode2 => new(_haContext, "select.voordeur_motion_sensor_bypass_mode_2");
    ///<summary>Voordeur Motion Sensor Chirp Tone</summary>
    public SelectEntity VoordeurMotionSensorChirpTone2 => new(_haContext, "select.voordeur_motion_sensor_chirp_tone_2");
    ///<summary>Woonkamer Camera Event Select</summary>
    public SelectEntity WoonkamerCameraEventSelect => new(_haContext, "select.woonkamer_camera_event_select");
    ///<summary>Woonkamer Camera Snapshot Mode</summary>
    public SelectEntity WoonkamerCameraSnapshotMode => new(_haContext, "select.woonkamer_camera_snapshot_mode");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.")).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all non-numeric sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAllNonNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && !(e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all numeric sensor entities currently registered (at runtime) in Home Assistant as NumericSensorEntity</summary>
    public IEnumerable<NumericSensorEntity> EnumerateAllNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && (e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new NumericSensorEntity(e));
    ///<summary>Achterdeur Contact Sensor Info</summary>
    public SensorEntity AchterdeurContactSensorInfo => new(_haContext, "sensor.achterdeur_contact_sensor_info");
    ///<summary>Backup State</summary>
    public SensorEntity BackupState => new(_haContext, "sensor.backup_state");
    ///<summary>buienalarm Next rain forecast</summary>
    public SensorEntity BuienalarmNextRainForecast => new(_haContext, "sensor.buienalarm_next_rain_forecast");
    ///<summary>Deurbel Info</summary>
    public SensorEntity DeurbelInfo3 => new(_haContext, "sensor.deurbel_info_3");
    ///<summary>Electricity Meter Actief tarief</summary>
    public SensorEntity ElectricityMeterActiveTariff => new(_haContext, "sensor.electricity_meter_active_tariff");
    ///<summary>Emmeloord Alarm Info</summary>
    public SensorEntity EmmeloordAlarmInfo => new(_haContext, "sensor.emmeloord_alarm_info");
    ///<summary>Emmeloord Base Station Info</summary>
    public SensorEntity EmmeloordBaseStationInfo => new(_haContext, "sensor.emmeloord_base_station_info");
    ///<summary>Emmeloord Range Extender Info</summary>
    public SensorEntity EmmeloordRangeExtenderInfo => new(_haContext, "sensor.emmeloord_range_extender_info");
    ///<summary>Time of highest price today (Energy Prices)</summary>
    public SensorEntity EnergyPricesTimeOfHighestPriceToday => new(_haContext, "sensor.energy_prices_time_of_highest_price_today");
    ///<summary>Time of lowest price today (Energy Prices)</summary>
    public SensorEntity EnergyPricesTimeOfLowestPriceToday => new(_haContext, "sensor.energy_prices_time_of_lowest_price_today");
    ///<summary>EX5601-T1 Extern IP</summary>
    public SensorEntity Ex5601T1ExternIp => new(_haContext, "sensor.ex5601_t1_extern_ip");
    ///<summary>Gasverbruik</summary>
    public SensorEntity GasMeterGasConsumption => new(_haContext, "sensor.gas_meter_gas_consumption");
    ///<summary>iPhone Mark 2 Battery State</summary>
    public SensorEntity IphoneMark2BatteryState => new(_haContext, "sensor.iphone_mark_2_battery_state");
    ///<summary>iPhone Mark 2 BSSID</summary>
    public SensorEntity IphoneMark2Bssid => new(_haContext, "sensor.iphone_mark_2_bssid");
    ///<summary>iPhone Mark 2 Connection Type</summary>
    public SensorEntity IphoneMark2ConnectionType => new(_haContext, "sensor.iphone_mark_2_connection_type");
    ///<summary>iPhone Mark 2 Geocoded Location</summary>
    public SensorEntity IphoneMark2GeocodedLocation => new(_haContext, "sensor.iphone_mark_2_geocoded_location");
    ///<summary>iPhone Mark 2 Last Update Trigger</summary>
    public SensorEntity IphoneMark2LastUpdateTrigger => new(_haContext, "sensor.iphone_mark_2_last_update_trigger");
    ///<summary>iPhone Mark 2 SIM 1</summary>
    public SensorEntity IphoneMark2Sim1 => new(_haContext, "sensor.iphone_mark_2_sim_1");
    ///<summary>iPhone Mark 2 SIM 2</summary>
    public SensorEntity IphoneMark2Sim2 => new(_haContext, "sensor.iphone_mark_2_sim_2");
    ///<summary>iPhone Mark 2 SSID</summary>
    public SensorEntity IphoneMark2Ssid => new(_haContext, "sensor.iphone_mark_2_ssid");
    ///<summary>Keuken Chime Info</summary>
    public SensorEntity KeukenChimeInfo2 => new(_haContext, "sensor.keuken_chime_info_2");
    ///<summary>Keuken Motion Sensor Info</summary>
    public SensorEntity KeukenMotionSensorInfo => new(_haContext, "sensor.keuken_motion_sensor_info");
    ///<summary>Beneden Volume</summary>
    public SensorEntity KeukenVolume => new(_haContext, "sensor.keuken_volume");
    ///<summary>Our home Circuit 0 Heating Curve</summary>
    public SensorEntity OurHomeCircuit0HeatingCurve => new(_haContext, "sensor.our_home_circuit_0_heating_curve");
    ///<summary>Our home Circuit 0 State</summary>
    public SensorEntity OurHomeCircuit0State => new(_haContext, "sensor.our_home_circuit_0_state");
    ///<summary>Our home Device 0 aroTHERM Heating Energy Efficiency</summary>
    public SensorEntity OurHomeDevice0ArothermHeatingEnergyEfficiency => new(_haContext, "sensor.our_home_device_0_arotherm_heating_energy_efficiency");
    ///<summary>Our home Device 1 Hydraulic Station Heating Energy Efficiency</summary>
    public SensorEntity OurHomeDevice1HydraulicStationHeatingEnergyEfficiency => new(_haContext, "sensor.our_home_device_1_hydraulic_station_heating_energy_efficiency");
    ///<summary>Our home Domestic Hot Water 0 Current Special Function</summary>
    public SensorEntity OurHomeDomesticHotWater0CurrentSpecialFunction => new(_haContext, "sensor.our_home_domestic_hot_water_0_current_special_function");
    ///<summary>Our home Domestic Hot Water 0 Operation Mode</summary>
    public SensorEntity OurHomeDomesticHotWater0OperationMode => new(_haContext, "sensor.our_home_domestic_hot_water_0_operation_mode");
    ///<summary>Our home Firmware Version</summary>
    public SensorEntity OurHomeFirmwareVersion => new(_haContext, "sensor.our_home_firmware_version");
    ///<summary>Our home Heating Energy Efficiency</summary>
    public SensorEntity OurHomeHeatingEnergyEfficiency => new(_haContext, "sensor.our_home_heating_energy_efficiency");
    ///<summary>Our home Zone Thuis (Circuit 0) Current Special Function</summary>
    public SensorEntity OurHomeZoneThuisCircuit0CurrentSpecialFunction => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_current_special_function");
    ///<summary>Our home Zone Thuis (Circuit 0) Heating Operating Mode</summary>
    public SensorEntity OurHomeZoneThuisCircuit0HeatingOperatingMode => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_heating_operating_mode");
    ///<summary>Our home Zone Thuis (Circuit 0) Heating State</summary>
    public SensorEntity OurHomeZoneThuisCircuit0HeatingState => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_heating_state");
    ///<summary>Sun Volgende dageraad</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Volgende schemering</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Volgende middernacht</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Volgende middag</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Volgende opkomst</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Volgende ondergang</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Toetsenpaneel ingang Info</summary>
    public SensorEntity ToetsenpaneelIngangInfo => new(_haContext, "sensor.toetsenpaneel_ingang_info");
    ///<summary>Tuin Camera Info</summary>
    public SensorEntity TuinCameraInfo => new(_haContext, "sensor.tuin_camera_info");
    ///<summary>Tuin Last activity</summary>
    public SensorEntity TuinLastActivity => new(_haContext, "sensor.tuin_last_activity");
    ///<summary>Tuin Last ding</summary>
    public SensorEntity TuinLastDing => new(_haContext, "sensor.tuin_last_ding");
    ///<summary>Tuin Last motion</summary>
    public SensorEntity TuinLastMotion => new(_haContext, "sensor.tuin_last_motion");
    ///<summary>Tuin Volume</summary>
    public SensorEntity TuinVolume => new(_haContext, "sensor.tuin_volume");
    ///<summary>Voordeur Contact Sensor Info</summary>
    public SensorEntity VoordeurContactSensorInfo => new(_haContext, "sensor.voordeur_contact_sensor_info");
    ///<summary>Voordeur Last activity</summary>
    public SensorEntity VoordeurLastActivity => new(_haContext, "sensor.voordeur_last_activity");
    ///<summary>Voordeur Last ding</summary>
    public SensorEntity VoordeurLastDing => new(_haContext, "sensor.voordeur_last_ding");
    ///<summary>Voordeur Last motion</summary>
    public SensorEntity VoordeurLastMotion => new(_haContext, "sensor.voordeur_last_motion");
    ///<summary>Voordeur Motion Sensor Info</summary>
    public SensorEntity VoordeurMotionSensorInfo2 => new(_haContext, "sensor.voordeur_motion_sensor_info_2");
    ///<summary>Voordeur Volume</summary>
    public SensorEntity VoordeurVolume => new(_haContext, "sensor.voordeur_volume");
    ///<summary>Woonkamer Camera Info</summary>
    public SensorEntity WoonkamerCameraInfo => new(_haContext, "sensor.woonkamer_camera_info");
    ///<summary>Woonkamer Last activity</summary>
    public SensorEntity WoonkamerLastActivity => new(_haContext, "sensor.woonkamer_last_activity");
    ///<summary>Woonkamer Last ding</summary>
    public SensorEntity WoonkamerLastDing => new(_haContext, "sensor.woonkamer_last_ding");
    ///<summary>Woonkamer Last motion</summary>
    public SensorEntity WoonkamerLastMotion => new(_haContext, "sensor.woonkamer_last_motion");
    ///<summary>Woonkamer Volume</summary>
    public SensorEntity WoonkamerVolume => new(_haContext, "sensor.woonkamer_volume");
    ///<summary>Achterdeur Contact Sensor Battery</summary>
    public NumericSensorEntity AchterdeurContactSensorBattery => new(_haContext, "sensor.achterdeur_contact_sensor_battery");
    ///<summary>AdGuard Home Gemiddelde verwerkingssnelheid</summary>
    public NumericSensorEntity AdguardHomeAverageProcessingSpeed => new(_haContext, "sensor.adguard_home_average_processing_speed");
    ///<summary>AdGuard Home DNS query&apos;s</summary>
    public NumericSensorEntity AdguardHomeDnsQueries => new(_haContext, "sensor.adguard_home_dns_queries");
    ///<summary>AdGuard Home Aantal DNS query&apos;s geblokkeerd</summary>
    public NumericSensorEntity AdguardHomeDnsQueriesBlocked => new(_haContext, "sensor.adguard_home_dns_queries_blocked");
    ///<summary>AdGuard Home DNS query&apos;s geblokkeerd ratio</summary>
    public NumericSensorEntity AdguardHomeDnsQueriesBlockedRatio => new(_haContext, "sensor.adguard_home_dns_queries_blocked_ratio");
    ///<summary>AdGuard Home Ouderlijk toezicht geblokkeerd</summary>
    public NumericSensorEntity AdguardHomeParentalControlBlocked => new(_haContext, "sensor.adguard_home_parental_control_blocked");
    ///<summary>AdGuard Home Veilig zoeken geblokkeerd</summary>
    public NumericSensorEntity AdguardHomeSafeBrowsingBlocked => new(_haContext, "sensor.adguard_home_safe_browsing_blocked");
    ///<summary>AdGuard Home Veilig zoeken afgedwongen</summary>
    public NumericSensorEntity AdguardHomeSafeSearchesEnforced => new(_haContext, "sensor.adguard_home_safe_searches_enforced");
    ///<summary>buienalarm Precipitation</summary>
    public NumericSensorEntity BuienalarmPrecipitation => new(_haContext, "sensor.buienalarm_precipitation");
    ///<summary>buienalarm Precipitation forecast average</summary>
    public NumericSensorEntity BuienalarmPrecipitationForecastAverage => new(_haContext, "sensor.buienalarm_precipitation_forecast_average");
    ///<summary>buienalarm Precipitation forecast total</summary>
    public NumericSensorEntity BuienalarmPrecipitationForecastTotal => new(_haContext, "sensor.buienalarm_precipitation_forecast_total");
    ///<summary>buienalarm Temperature</summary>
    public NumericSensorEntity BuienalarmTemperature => new(_haContext, "sensor.buienalarm_temperature");
    ///<summary>Computer Current Power</summary>
    public NumericSensorEntity ComputerCurrentPower => new(_haContext, "sensor.computer_current_power");
    ///<summary>Computer Month Energy</summary>
    public NumericSensorEntity ComputerMonthEnergy => new(_haContext, "sensor.computer_month_energy");
    ///<summary>Computer Month Runtime</summary>
    public NumericSensorEntity ComputerMonthRuntime => new(_haContext, "sensor.computer_month_runtime");
    ///<summary>Computer Signal Level</summary>
    public NumericSensorEntity ComputerSignalLevel => new(_haContext, "sensor.computer_signal_level");
    ///<summary>Computer Today Energy</summary>
    public NumericSensorEntity ComputerTodayEnergy => new(_haContext, "sensor.computer_today_energy");
    ///<summary>Computer Today Runtime</summary>
    public NumericSensorEntity ComputerTodayRuntime => new(_haContext, "sensor.computer_today_runtime");
    ///<summary>Deurbel Wireless</summary>
    public NumericSensorEntity DeurbelWireless => new(_haContext, "sensor.deurbel_wireless");
    ///<summary>Electricity Meter Energieverbruik (tarief 1)</summary>
    public NumericSensorEntity ElectricityMeterEnergyConsumptionTarif1 => new(_haContext, "sensor.electricity_meter_energy_consumption_tarif_1");
    ///<summary>Electricity Meter Energieverbruik (tarief 2)</summary>
    public NumericSensorEntity ElectricityMeterEnergyConsumptionTarif2 => new(_haContext, "sensor.electricity_meter_energy_consumption_tarif_2");
    ///<summary>Electricity Meter Energieproductie (tarief 1)</summary>
    public NumericSensorEntity ElectricityMeterEnergyProductionTarif1 => new(_haContext, "sensor.electricity_meter_energy_production_tarif_1");
    ///<summary>Electricity Meter Energieproductie (tarief 2)</summary>
    public NumericSensorEntity ElectricityMeterEnergyProductionTarif2 => new(_haContext, "sensor.electricity_meter_energy_production_tarif_2");
    ///<summary>Electricity Meter Energieverbruik</summary>
    public NumericSensorEntity ElectricityMeterPowerConsumption => new(_haContext, "sensor.electricity_meter_power_consumption");
    ///<summary>Electricity Meter Energieproductie</summary>
    public NumericSensorEntity ElectricityMeterPowerProduction => new(_haContext, "sensor.electricity_meter_power_production");
    ///<summary>Electricity Meter Spanning fase L1</summary>
    public NumericSensorEntity ElectricityMeterVoltagePhaseL1 => new(_haContext, "sensor.electricity_meter_voltage_phase_l1");
    ///<summary>Electricity Meter Spanning fase L2</summary>
    public NumericSensorEntity ElectricityMeterVoltagePhaseL2 => new(_haContext, "sensor.electricity_meter_voltage_phase_l2");
    ///<summary>Electricity Meter Spanning fase L3</summary>
    public NumericSensorEntity ElectricityMeterVoltagePhaseL3 => new(_haContext, "sensor.electricity_meter_voltage_phase_l3");
    ///<summary>Wireless</summary>
    public NumericSensorEntity EmmeloordBaseStationWireless => new(_haContext, "sensor.emmeloord_base_station_wireless");
    ///<summary>Emmeloord Range Extender Battery</summary>
    public NumericSensorEntity EmmeloordRangeExtenderBattery => new(_haContext, "sensor.emmeloord_range_extender_battery");
    ///<summary>Average electricity price today (Energy Prices)</summary>
    public NumericSensorEntity EnergyPricesAverageElectricityPriceToday => new(_haContext, "sensor.energy_prices_average_electricity_price_today");
    ///<summary>Current electricity market price (Energy Prices)</summary>
    public NumericSensorEntity EnergyPricesCurrentElectricityMarketPrice => new(_haContext, "sensor.energy_prices_current_electricity_market_price");
    ///<summary>Current percentage of highest electricity price today (Energy Prices)</summary>
    public NumericSensorEntity EnergyPricesCurrentPercentageOfHighestElectricityPriceToday => new(_haContext, "sensor.energy_prices_current_percentage_of_highest_electricity_price_today");
    ///<summary>Highest energy price today (Energy Prices)</summary>
    public NumericSensorEntity EnergyPricesHighestEnergyPriceToday => new(_haContext, "sensor.energy_prices_highest_energy_price_today");
    ///<summary>Lowest energy price today (Energy Prices)</summary>
    public NumericSensorEntity EnergyPricesLowestEnergyPriceToday => new(_haContext, "sensor.energy_prices_lowest_energy_price_today");
    ///<summary>Next hour electricity market price (Energy Prices)</summary>
    public NumericSensorEntity EnergyPricesNextHourElectricityMarketPrice => new(_haContext, "sensor.energy_prices_next_hour_electricity_market_price");
    ///<summary>EX5601-T1 Data ontvangen</summary>
    public NumericSensorEntity Ex5601T1DataOntvangen => new(_haContext, "sensor.ex5601_t1_data_ontvangen");
    ///<summary>EX5601-T1 Data verzonden</summary>
    public NumericSensorEntity Ex5601T1DataVerzonden => new(_haContext, "sensor.ex5601_t1_data_verzonden");
    ///<summary>EX5601-T1 Downloadsnelheid</summary>
    public NumericSensorEntity Ex5601T1Downloadsnelheid => new(_haContext, "sensor.ex5601_t1_downloadsnelheid");
    ///<summary>EX5601-T1 Uploadsnelheid</summary>
    public NumericSensorEntity Ex5601T1Uploadsnelheid => new(_haContext, "sensor.ex5601_t1_uploadsnelheid");
    ///<summary>Garage Current Power</summary>
    public NumericSensorEntity GarageCurrentPower => new(_haContext, "sensor.garage_current_power");
    ///<summary>Garage Month Energy</summary>
    public NumericSensorEntity GarageMonthEnergy => new(_haContext, "sensor.garage_month_energy");
    ///<summary>Garage Month Runtime</summary>
    public NumericSensorEntity GarageMonthRuntime => new(_haContext, "sensor.garage_month_runtime");
    ///<summary>Garage Signal Level</summary>
    public NumericSensorEntity GarageSignalLevel => new(_haContext, "sensor.garage_signal_level");
    ///<summary>Garage Today Energy</summary>
    public NumericSensorEntity GarageTodayEnergy => new(_haContext, "sensor.garage_today_energy");
    ///<summary>Garage Today Runtime</summary>
    public NumericSensorEntity GarageTodayRuntime => new(_haContext, "sensor.garage_today_runtime");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>iPhone Mark 2 Battery Level</summary>
    public NumericSensorEntity IphoneMark2BatteryLevel => new(_haContext, "sensor.iphone_mark_2_battery_level");
    ///<summary>iPhone Mark 2 Storage</summary>
    public NumericSensorEntity IphoneMark2Storage => new(_haContext, "sensor.iphone_mark_2_storage");
    ///<summary>Kantoor Current Power</summary>
    public NumericSensorEntity KantoorCurrentPower => new(_haContext, "sensor.kantoor_current_power");
    ///<summary>Kantoor Month Energy</summary>
    public NumericSensorEntity KantoorMonthEnergy => new(_haContext, "sensor.kantoor_month_energy");
    ///<summary>Kantoor Month Runtime</summary>
    public NumericSensorEntity KantoorMonthRuntime => new(_haContext, "sensor.kantoor_month_runtime");
    ///<summary>Kantoor Signal Level</summary>
    public NumericSensorEntity KantoorSignalLevel => new(_haContext, "sensor.kantoor_signal_level");
    ///<summary>Kantoor Today Energy</summary>
    public NumericSensorEntity KantoorTodayEnergy => new(_haContext, "sensor.kantoor_today_energy");
    ///<summary>Kantoor Today Runtime</summary>
    public NumericSensorEntity KantoorTodayRuntime => new(_haContext, "sensor.kantoor_today_runtime");
    ///<summary>Keuken Chime Wireless</summary>
    public NumericSensorEntity KeukenChimeWireless => new(_haContext, "sensor.keuken_chime_wireless");
    ///<summary>Keuken Motion Sensor Battery</summary>
    public NumericSensorEntity KeukenMotionSensorBattery => new(_haContext, "sensor.keuken_motion_sensor_battery");
    ///<summary>Lamp-Kantoor Signal Level</summary>
    public NumericSensorEntity LampKantoorSignalLevel => new(_haContext, "sensor.lamp_kantoor_signal_level");
    ///<summary>Lamp keuken Current Power</summary>
    public NumericSensorEntity LampKeukenCurrentPower => new(_haContext, "sensor.lamp_keuken_current_power");
    ///<summary>Lamp keuken Month Energy</summary>
    public NumericSensorEntity LampKeukenMonthEnergy => new(_haContext, "sensor.lamp_keuken_month_energy");
    ///<summary>Lamp keuken Month Runtime</summary>
    public NumericSensorEntity LampKeukenMonthRuntime => new(_haContext, "sensor.lamp_keuken_month_runtime");
    ///<summary>Lamp keuken Signal Level</summary>
    public NumericSensorEntity LampKeukenSignalLevel => new(_haContext, "sensor.lamp_keuken_signal_level");
    ///<summary>Lamp keuken Today Energy</summary>
    public NumericSensorEntity LampKeukenTodayEnergy => new(_haContext, "sensor.lamp_keuken_today_energy");
    ///<summary>Lamp keuken Today Runtime</summary>
    public NumericSensorEntity LampKeukenTodayRuntime => new(_haContext, "sensor.lamp_keuken_today_runtime");
    ///<summary>Lamp-tafel-L Signal Level</summary>
    public NumericSensorEntity LampTafelLSignalLevel => new(_haContext, "sensor.lamp_tafel_l_signal_level");
    ///<summary>Lamp-tafel-R Signal Level</summary>
    public NumericSensorEntity LampTafelRSignalLevel => new(_haContext, "sensor.lamp_tafel_r_signal_level");
    ///<summary>Our home Circuit 0 Current Flow Temperature</summary>
    public NumericSensorEntity OurHomeCircuit0CurrentFlowTemperature => new(_haContext, "sensor.our_home_circuit_0_current_flow_temperature");
    ///<summary>Our home Device 0 aroTHERM Consumed Electrical Energy Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice0ArothermConsumedElectricalEnergyDomesticHotWater => new(_haContext, "sensor.our_home_device_0_arotherm_consumed_electrical_energy_domestic_hot_water");
    ///<summary>Our home Device 0 aroTHERM Consumed Electrical Energy Heating</summary>
    public NumericSensorEntity OurHomeDevice0ArothermConsumedElectricalEnergyHeating => new(_haContext, "sensor.our_home_device_0_arotherm_consumed_electrical_energy_heating");
    ///<summary>Our home Device 0 aroTHERM Earned Environment Energy Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice0ArothermEarnedEnvironmentEnergyDomesticHotWater => new(_haContext, "sensor.our_home_device_0_arotherm_earned_environment_energy_domestic_hot_water");
    ///<summary>Our home Device 0 aroTHERM Earned Environment Energy Heating</summary>
    public NumericSensorEntity OurHomeDevice0ArothermEarnedEnvironmentEnergyHeating => new(_haContext, "sensor.our_home_device_0_arotherm_earned_environment_energy_heating");
    ///<summary>Our home Device 0 aroTHERM Heat Generated Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice0ArothermHeatGeneratedDomesticHotWater => new(_haContext, "sensor.our_home_device_0_arotherm_heat_generated_domestic_hot_water");
    ///<summary>Our home Device 0 aroTHERM Heat Generated Heating</summary>
    public NumericSensorEntity OurHomeDevice0ArothermHeatGeneratedHeating => new(_haContext, "sensor.our_home_device_0_arotherm_heat_generated_heating");
    ///<summary>Our home Device 1 Hydraulic Station Consumed Electrical Energy Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice1HydraulicStationConsumedElectricalEnergyDomesticHotWater => new(_haContext, "sensor.our_home_device_1_hydraulic_station_consumed_electrical_energy_domestic_hot_water");
    ///<summary>Our home Device 1 Hydraulic Station Consumed Electrical Energy Heating</summary>
    public NumericSensorEntity OurHomeDevice1HydraulicStationConsumedElectricalEnergyHeating => new(_haContext, "sensor.our_home_device_1_hydraulic_station_consumed_electrical_energy_heating");
    ///<summary>Our home Domestic Hot Water 0 Setpoint</summary>
    public NumericSensorEntity OurHomeDomesticHotWater0Setpoint => new(_haContext, "sensor.our_home_domestic_hot_water_0_setpoint");
    ///<summary>Our home Domestic Hot Water 0 Tank Temperature</summary>
    public NumericSensorEntity OurHomeDomesticHotWater0TankTemperature => new(_haContext, "sensor.our_home_domestic_hot_water_0_tank_temperature");
    ///<summary>Our home Outdoor Temperature</summary>
    public NumericSensorEntity OurHomeOutdoorTemperature => new(_haContext, "sensor.our_home_outdoor_temperature");
    ///<summary>Our home System Water Pressure</summary>
    public NumericSensorEntity OurHomeSystemWaterPressure => new(_haContext, "sensor.our_home_system_water_pressure");
    ///<summary>Our home Zone Thuis (Circuit 0) Current Temperature</summary>
    public NumericSensorEntity OurHomeZoneThuisCircuit0CurrentTemperature => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_current_temperature");
    ///<summary>Our home Zone Thuis (Circuit 0) Desired Temperature</summary>
    public NumericSensorEntity OurHomeZoneThuisCircuit0DesiredTemperature => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_desired_temperature");
    ///<summary>Our home Zone Thuis (Circuit 0) Humidity</summary>
    public NumericSensorEntity OurHomeZoneThuisCircuit0Humidity => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_humidity");
    ///<summary>Toetsenpaneel ingang Battery</summary>
    public NumericSensorEntity ToetsenpaneelIngangBattery => new(_haContext, "sensor.toetsenpaneel_ingang_battery");
    ///<summary>Tuin Batterij</summary>
    public NumericSensorEntity TuinBatterij => new(_haContext, "sensor.tuin_batterij");
    ///<summary>Tuin Camera Wireless</summary>
    public NumericSensorEntity TuinCameraWireless => new(_haContext, "sensor.tuin_camera_wireless");
    ///<summary>Tuinhuis verlichting  Current Power</summary>
    public NumericSensorEntity TuinhuisVerlichtingCurrentPower => new(_haContext, "sensor.tuinhuis_verlichting_current_power");
    ///<summary>Tuinhuis verlichting  Month Energy</summary>
    public NumericSensorEntity TuinhuisVerlichtingMonthEnergy => new(_haContext, "sensor.tuinhuis_verlichting_month_energy");
    ///<summary>Tuinhuis verlichting  Month Runtime</summary>
    public NumericSensorEntity TuinhuisVerlichtingMonthRuntime => new(_haContext, "sensor.tuinhuis_verlichting_month_runtime");
    ///<summary>Tuinhuis verlichting  Signal Level</summary>
    public NumericSensorEntity TuinhuisVerlichtingSignalLevel => new(_haContext, "sensor.tuinhuis_verlichting_signal_level");
    ///<summary>Tuinhuis verlichting  Today Energy</summary>
    public NumericSensorEntity TuinhuisVerlichtingTodayEnergy => new(_haContext, "sensor.tuinhuis_verlichting_today_energy");
    ///<summary>Tuinhuis verlichting  Today Runtime</summary>
    public NumericSensorEntity TuinhuisVerlichtingTodayRuntime => new(_haContext, "sensor.tuinhuis_verlichting_today_runtime");
    ///<summary>TV Current Power</summary>
    public NumericSensorEntity TvCurrentPower => new(_haContext, "sensor.tv_current_power");
    ///<summary>TV Month Energy</summary>
    public NumericSensorEntity TvMonthEnergy => new(_haContext, "sensor.tv_month_energy");
    ///<summary>TV Month Runtime</summary>
    public NumericSensorEntity TvMonthRuntime => new(_haContext, "sensor.tv_month_runtime");
    ///<summary>TV Signal Level</summary>
    public NumericSensorEntity TvSignalLevel => new(_haContext, "sensor.tv_signal_level");
    ///<summary>TV Today Energy</summary>
    public NumericSensorEntity TvTodayEnergy => new(_haContext, "sensor.tv_today_energy");
    ///<summary>TV Today Runtime</summary>
    public NumericSensorEntity TvTodayRuntime => new(_haContext, "sensor.tv_today_runtime");
    ///<summary>Voordeur Batterij</summary>
    public NumericSensorEntity VoordeurBatterij => new(_haContext, "sensor.voordeur_batterij");
    ///<summary>Voordeur Contact Sensor Battery</summary>
    public NumericSensorEntity VoordeurContactSensorBattery => new(_haContext, "sensor.voordeur_contact_sensor_battery");
    ///<summary>Voordeur Motion Sensor Battery</summary>
    public NumericSensorEntity VoordeurMotionSensorBattery2 => new(_haContext, "sensor.voordeur_motion_sensor_battery_2");
    ///<summary>Woonkamer Batterij</summary>
    public NumericSensorEntity WoonkamerBatterij => new(_haContext, "sensor.woonkamer_batterij");
    ///<summary>Woonkamer Camera Wireless</summary>
    public NumericSensorEntity WoonkamerCameraWireless => new(_haContext, "sensor.woonkamer_camera_wireless");
}

public partial class SirenEntities
{
    private readonly IHaContext _haContext;
    public SirenEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all siren entities currently registered (at runtime) in Home Assistant as SirenEntity</summary>
    public IEnumerable<SirenEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("siren.")).Select(e => new SirenEntity(e));
    ///<summary>Beneden Sirene</summary>
    public SirenEntity KeukenSirene => new(_haContext, "siren.keuken_sirene");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sun entities currently registered (at runtime) in Home Assistant as SunEntity</summary>
    public IEnumerable<SunEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sun.")).Select(e => new SunEntity(e));
    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all switch entities currently registered (at runtime) in Home Assistant as SwitchEntity</summary>
    public IEnumerable<SwitchEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("switch.")).Select(e => new SwitchEntity(e));
    ///<summary>AdGuard Home Filteren</summary>
    public SwitchEntity AdguardHomeFiltering => new(_haContext, "switch.adguard_home_filtering");
    ///<summary>AdGuard Home Ouderlijk toezicht</summary>
    public SwitchEntity AdguardHomeParentalControl => new(_haContext, "switch.adguard_home_parental_control");
    ///<summary>AdGuard Home Bescherming</summary>
    public SwitchEntity AdguardHomeProtection => new(_haContext, "switch.adguard_home_protection");
    ///<summary>AdGuard Home Query logboek</summary>
    public SwitchEntity AdguardHomeQueryLog => new(_haContext, "switch.adguard_home_query_log");
    ///<summary>AdGuard Home Veilig browsen</summary>
    public SwitchEntity AdguardHomeSafeBrowsing => new(_haContext, "switch.adguard_home_safe_browsing");
    ///<summary>AdGuard Home Veilig zoeken</summary>
    public SwitchEntity AdguardHomeSafeSearch => new(_haContext, "switch.adguard_home_safe_search");
    ///<summary>Computer</summary>
    public SwitchEntity Computer => new(_haContext, "switch.computer");
    ///<summary>Deurbel Event Stream</summary>
    public SwitchEntity DeurbelEventStream => new(_haContext, "switch.deurbel_event_stream");
    ///<summary>Deurbel Live Stream</summary>
    public SwitchEntity DeurbelLiveStream => new(_haContext, "switch.deurbel_live_stream");
    ///<summary>Deurbel Motion Detection</summary>
    public SwitchEntity DeurbelMotionDetection => new(_haContext, "switch.deurbel_motion_detection");
    ///<summary>Emmeloord Alarm Siren</summary>
    public SwitchEntity EmmeloordAlarmSiren => new(_haContext, "switch.emmeloord_alarm_siren");
    ///<summary>Garage</summary>
    public SwitchEntity Garage => new(_haContext, "switch.garage");
    ///<summary>Kantoor</summary>
    public SwitchEntity Kantoor => new(_haContext, "switch.kantoor");
    ///<summary>Keuken Chime Play Ding Sound</summary>
    public SwitchEntity KeukenChimePlayDingSound => new(_haContext, "switch.keuken_chime_play_ding_sound");
    ///<summary>Keuken Chime Play Motion Sound</summary>
    public SwitchEntity KeukenChimePlayMotionSound => new(_haContext, "switch.keuken_chime_play_motion_sound");
    ///<summary>Keuken Chime Snooze</summary>
    public SwitchEntity KeukenChimeSnooze => new(_haContext, "switch.keuken_chime_snooze");
    ///<summary>Lamp keuken</summary>
    public SwitchEntity LampKeuken => new(_haContext, "switch.lamp_keuken");
    ///<summary>Our home Away Mode</summary>
    public SwitchEntity OurHomeAwayMode => new(_haContext, "switch.our_home_away_mode");
    ///<summary>Our home Domestic Hot Water 0 Boost</summary>
    public SwitchEntity OurHomeDomesticHotWater0Boost => new(_haContext, "switch.our_home_domestic_hot_water_0_boost");
    ///<summary>Toetsenpaneel ingang Chirps</summary>
    public SwitchEntity ToetsenpaneelIngangChirps => new(_haContext, "switch.toetsenpaneel_ingang_chirps");
    ///<summary>Tuin Camera Event Stream</summary>
    public SwitchEntity TuinCameraEventStream => new(_haContext, "switch.tuin_camera_event_stream");
    ///<summary>Tuin Camera Live Stream</summary>
    public SwitchEntity TuinCameraLiveStream => new(_haContext, "switch.tuin_camera_live_stream");
    ///<summary>Tuin Camera Motion Detection</summary>
    public SwitchEntity TuinCameraMotionDetection => new(_haContext, "switch.tuin_camera_motion_detection");
    ///<summary>Tuin Camera Motion Warning</summary>
    public SwitchEntity TuinCameraMotionWarning => new(_haContext, "switch.tuin_camera_motion_warning");
    ///<summary>Tuin Camera Siren</summary>
    public SwitchEntity TuinCameraSiren => new(_haContext, "switch.tuin_camera_siren");
    ///<summary>Tuin Sirene</summary>
    public SwitchEntity TuinSirene => new(_haContext, "switch.tuin_sirene");
    ///<summary>Tuinhuis</summary>
    public SwitchEntity TuinhuisVerlichting => new(_haContext, "switch.tuinhuis_verlichting");
    ///<summary>TV</summary>
    public SwitchEntity Tv => new(_haContext, "switch.tv");
    ///<summary>Woonkamer Camera Event Stream</summary>
    public SwitchEntity WoonkamerCameraEventStream => new(_haContext, "switch.woonkamer_camera_event_stream");
    ///<summary>Woonkamer Camera Live Stream</summary>
    public SwitchEntity WoonkamerCameraLiveStream => new(_haContext, "switch.woonkamer_camera_live_stream");
    ///<summary>Woonkamer Camera Motion Detection</summary>
    public SwitchEntity WoonkamerCameraMotionDetection => new(_haContext, "switch.woonkamer_camera_motion_detection");
    ///<summary>Woonkamer Camera Motion Warning</summary>
    public SwitchEntity WoonkamerCameraMotionWarning => new(_haContext, "switch.woonkamer_camera_motion_warning");
    ///<summary>Woonkamer Camera Siren</summary>
    public SwitchEntity WoonkamerCameraSiren => new(_haContext, "switch.woonkamer_camera_siren");
    ///<summary>Woonkamer Sirene</summary>
    public SwitchEntity WoonkamerSirene => new(_haContext, "switch.woonkamer_sirene");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all update entities currently registered (at runtime) in Home Assistant as UpdateEntity</summary>
    public IEnumerable<UpdateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("update.")).Select(e => new UpdateEntity(e));
    ///<summary>AdGuard Home Update</summary>
    public UpdateEntity AdguardHomeUpdate => new(_haContext, "update.adguard_home_update");
    ///<summary>Computer Firmware</summary>
    public UpdateEntity ComputerFirmware => new(_haContext, "update.computer_firmware");
    ///<summary>Duck DNS Update</summary>
    public UpdateEntity DuckDnsUpdate => new(_haContext, "update.duck_dns_update");
    ///<summary>File editor Update</summary>
    public UpdateEntity FileEditorUpdate => new(_haContext, "update.file_editor_update");
    ///<summary>Garage Firmware</summary>
    public UpdateEntity GarageFirmware => new(_haContext, "update.garage_firmware");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Google Drive Backup Update</summary>
    public UpdateEntity HomeAssistantGoogleDriveBackupUpdate => new(_haContext, "update.home_assistant_google_drive_backup_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>Kantoor Firmware</summary>
    public UpdateEntity KantoorFirmware => new(_haContext, "update.kantoor_firmware");
    ///<summary>Lamp-Kantoor Firmware</summary>
    public UpdateEntity LampKantoorFirmware => new(_haContext, "update.lamp_kantoor_firmware");
    ///<summary>Lamp keuken Firmware</summary>
    public UpdateEntity LampKeukenFirmware => new(_haContext, "update.lamp_keuken_firmware");
    ///<summary>Lamp-tafel-L Firmware</summary>
    public UpdateEntity LampTafelLFirmware => new(_haContext, "update.lamp_tafel_l_firmware");
    ///<summary>Lamp-tafel-R Firmware</summary>
    public UpdateEntity LampTafelRFirmware => new(_haContext, "update.lamp_tafel_r_firmware");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>NetDaemon V4 (.NET 8) Update</summary>
    public UpdateEntity NetdaemonV4Net8Update => new(_haContext, "update.netdaemon_v4_net_8_update");
    ///<summary>NGINX Home Assistant SSL proxy Update</summary>
    public UpdateEntity NginxHomeAssistantSslProxyUpdate => new(_haContext, "update.nginx_home_assistant_ssl_proxy_update");
    ///<summary>Ring-MQTT with Video Streaming Update</summary>
    public UpdateEntity RingMqttWithVideoStreamingUpdate => new(_haContext, "update.ring_mqtt_with_video_streaming_update");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Advanced SSH &amp; Web Terminal Update</summary>
    public UpdateEntity SshWebTerminalUpdate => new(_haContext, "update.ssh_web_terminal_update");
    ///<summary>Tuinhuis verlichting  Firmware</summary>
    public UpdateEntity TuinhuisVerlichtingFirmware => new(_haContext, "update.tuinhuis_verlichting_firmware");
    ///<summary>TV Firmware</summary>
    public UpdateEntity TvFirmware => new(_haContext, "update.tv_firmware");
}

public partial class WaterHeaterEntities
{
    private readonly IHaContext _haContext;
    public WaterHeaterEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all water_heater entities currently registered (at runtime) in Home Assistant as WaterHeaterEntity</summary>
    public IEnumerable<WaterHeaterEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("water_heater.")).Select(e => new WaterHeaterEntity(e));
    ///<summary>Our home Domestic Hot Water 0</summary>
    public WaterHeaterEntity OurHomeDomesticHotWater0 => new(_haContext, "water_heater.our_home_domestic_hot_water_0");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all weather entities currently registered (at runtime) in Home Assistant as WeatherEntity</summary>
    public IEnumerable<WeatherEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("weather.")).Select(e => new WeatherEntity(e));
    ///<summary>Buienradar</summary>
    public WeatherEntity Buienradar => new(_haContext, "weather.buienradar");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all zone entities currently registered (at runtime) in Home Assistant as ZoneEntity</summary>
    public IEnumerable<ZoneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("zone.")).Select(e => new ZoneEntity(e));
    ///<summary>Thuis</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record AlarmControlPanelEntity : Entity<AlarmControlPanelEntity, EntityState<AlarmControlPanelAttributes>, AlarmControlPanelAttributes>
{
    public AlarmControlPanelEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AlarmControlPanelEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AlarmControlPanelAttributes
{
    [JsonPropertyName("code_format")]
    public object? CodeFormat { get; init; }

    [JsonPropertyName("changed_by")]
    public object? ChangedBy { get; init; }

    [JsonPropertyName("code_arm_required")]
    public bool? CodeArmRequired { get; init; }

    [JsonPropertyName("alarmClearedBy")]
    public string? AlarmClearedBy { get; init; }

    [JsonPropertyName("alarmClearedTime")]
    public string? AlarmClearedTime { get; init; }

    [JsonPropertyName("entrySecondsLeft")]
    public double? EntrySecondsLeft { get; init; }

    [JsonPropertyName("exitSecondsLeft")]
    public double? ExitSecondsLeft { get; init; }

    [JsonPropertyName("lastArmedBy")]
    public string? LastArmedBy { get; init; }

    [JsonPropertyName("lastArmedTime")]
    public string? LastArmedTime { get; init; }

    [JsonPropertyName("lastDisarmedBy")]
    public string? LastDisarmedBy { get; init; }

    [JsonPropertyName("lastDisarmedTime")]
    public string? LastDisarmedTime { get; init; }

    [JsonPropertyName("targetState")]
    public string? TargetState { get; init; }

    [JsonPropertyName("DisarmedBy")]
    public string? DisarmedBy { get; init; }

    [JsonPropertyName("DisarmedTime")]
    public string? DisarmedTime { get; init; }

    [JsonPropertyName("ArmedBy")]
    public string? ArmedBy { get; init; }

    [JsonPropertyName("ArmedTime")]
    public string? ArmedTime { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("state")]
    public string? State { get; init; }

    [JsonPropertyName("expires_at")]
    public string? ExpiresAt { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("diagnostic_trouble_codes")]
    public IReadOnlyList<object>? DiagnosticTroubleCodes { get; init; }

    [JsonPropertyName("lastDing")]
    public double? LastDing { get; init; }

    [JsonPropertyName("lastDingTime")]
    public string? LastDingTime { get; init; }

    [JsonPropertyName("lastMotion")]
    public double? LastMotion { get; init; }

    [JsonPropertyName("lastMotionTime")]
    public string? LastMotionTime { get; init; }

    [JsonPropertyName("personDetected")]
    public bool? PersonDetected { get; init; }

    [JsonPropertyName("motionDetectionEnabled")]
    public bool? MotionDetectionEnabled { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>, ICalendarEntityCore
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("all_day")]
    public bool? AllDay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("motion_detection")]
    public bool? MotionDetection { get; init; }

    [JsonPropertyName("video_url")]
    public string? VideoUrl { get; init; }

    [JsonPropertyName("last_video_id")]
    public double? LastVideoId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("current_humidity")]
    public double? CurrentHumidity { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("time_program_heating")]
    public object? TimeProgramHeating { get; init; }

    [JsonPropertyName("quick_veto_start_date_time")]
    public object? QuickVetoStartDateTime { get; init; }

    [JsonPropertyName("quick_veto_end_date_time")]
    public object? QuickVetoEndDateTime { get; init; }

    [JsonPropertyName("holiday_start_date_time")]
    public string? HolidayStartDateTime { get; init; }

    [JsonPropertyName("holiday_end_date_time")]
    public string? HolidayEndDateTime { get; init; }

    [JsonPropertyName("is_manual_cooling_active")]
    public bool? IsManualCoolingActive { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record DatetimeEntity : Entity<DatetimeEntity, EntityState<DatetimeAttributes>, DatetimeAttributes>
{
    public DatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DatetimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DatetimeAttributes
{
    [JsonPropertyName("holiday_ongoing")]
    public bool? HolidayOngoing { get; init; }

    [JsonPropertyName("holiday_remaining_seconds")]
    public object? HolidayRemainingSeconds { get; init; }

    [JsonPropertyName("holiday_start_date_time")]
    public object? HolidayStartDateTime { get; init; }

    [JsonPropertyName("holiday_end_date_time")]
    public object? HolidayEndDateTime { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record NotifyEntity : Entity<NotifyEntity, EntityState<NotifyAttributes>, NotifyAttributes>
{
    public NotifyEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NotifyEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NotifyAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("holiday_ongoing")]
    public bool? HolidayOngoing { get; init; }

    [JsonPropertyName("holiday_remaining_seconds")]
    public object? HolidayRemainingSeconds { get; init; }

    [JsonPropertyName("holiday_start_date_time")]
    public object? HolidayStartDateTime { get; init; }

    [JsonPropertyName("holiday_end_date_time")]
    public object? HolidayEndDateTime { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("activity_list")]
    public object? ActivityList { get; init; }

    [JsonPropertyName("current_activity")]
    public string? CurrentActivity { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("recordingUrl")]
    public string? RecordingUrl { get; init; }

    [JsonPropertyName("eventId")]
    public string? EventId { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("timeframe")]
    public string? Timeframe { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("created_at")]
    public string? CreatedAt { get; init; }

    [JsonPropertyName("answered")]
    public bool? Answered { get; init; }

    [JsonPropertyName("recording_status")]
    public string? RecordingStatus { get; init; }

    [JsonPropertyName("category")]
    public string? Category { get; init; }

    [JsonPropertyName("migration_finished_at")]
    public string? MigrationFinishedAt { get; init; }

    [JsonPropertyName("online_state")]
    public string? OnlineState { get; init; }

    [JsonPropertyName("cooling_start_temperature")]
    public double? CoolingStartTemperature { get; init; }

    [JsonPropertyName("continuous_heating_start_setpoint")]
    public double? ContinuousHeatingStartSetpoint { get; init; }

    [JsonPropertyName("alternative_point")]
    public double? AlternativePoint { get; init; }

    [JsonPropertyName("heating_circuit_bivalence_point")]
    public double? HeatingCircuitBivalencePoint { get; init; }

    [JsonPropertyName("dhw_bivalence_point")]
    public double? DhwBivalencePoint { get; init; }

    [JsonPropertyName("automatic_cooling_on_off")]
    public bool? AutomaticCoolingOnOff { get; init; }

    [JsonPropertyName("adaptive_heating_curve")]
    public bool? AdaptiveHeatingCurve { get; init; }

    [JsonPropertyName("dhw_maximum_loading_time")]
    public double? DhwMaximumLoadingTime { get; init; }

    [JsonPropertyName("dhw_hysteresis")]
    public double? DhwHysteresis { get; init; }

    [JsonPropertyName("dhw_flow_setpoint_offset")]
    public double? DhwFlowSetpointOffset { get; init; }

    [JsonPropertyName("continuous_heating_room_setpoint")]
    public double? ContinuousHeatingRoomSetpoint { get; init; }

    [JsonPropertyName("hybrid_control_strategy")]
    public string? HybridControlStrategy { get; init; }

    [JsonPropertyName("max_flow_setpoint_hp_error")]
    public double? MaxFlowSetpointHpError { get; init; }

    [JsonPropertyName("dhw_maximum_temperature")]
    public double? DhwMaximumTemperature { get; init; }

    [JsonPropertyName("maximum_preheating_time")]
    public double? MaximumPreheatingTime { get; init; }

    [JsonPropertyName("paralell_tank_loading_allowed")]
    public bool? ParalellTankLoadingAllowed { get; init; }

    [JsonPropertyName("outdoor_temperature")]
    public double? OutdoorTemperature { get; init; }

    [JsonPropertyName("outdoor_temperature_average24h")]
    public double? OutdoorTemperatureAverage24h { get; init; }

    [JsonPropertyName("system_water_pressure")]
    public double? SystemWaterPressure { get; init; }

    [JsonPropertyName("energy_manager_state")]
    public string? EnergyManagerState { get; init; }

    [JsonPropertyName("system_off")]
    public bool? SystemOff { get; init; }

    [JsonPropertyName("controller_type")]
    public string? ControllerType { get; init; }

    [JsonPropertyName("system_scheme")]
    public double? SystemScheme { get; init; }

    [JsonPropertyName("backup_heater_type")]
    public string? BackupHeaterType { get; init; }

    [JsonPropertyName("backup_heater_allowed_for")]
    public string? BackupHeaterAllowedFor { get; init; }

    [JsonPropertyName("temporary_allow_backup_heater")]
    public string? TemporaryAllowBackupHeater { get; init; }

    [JsonPropertyName("module_configuration_v_r71")]
    public double? ModuleConfigurationVR71 { get; init; }

    [JsonPropertyName("energy_provide_power_cut_behavior")]
    public string? EnergyProvidePowerCutBehavior { get; init; }

    [JsonPropertyName("smart_photovoltaic_buffer_offset")]
    public double? SmartPhotovoltaicBufferOffset { get; init; }

    [JsonPropertyName("external_energy_management_activation")]
    public bool? ExternalEnergyManagementActivation { get; init; }

    [JsonPropertyName("minimum_outside_temperature_cooling")]
    public double? MinimumOutsideTemperatureCooling { get; init; }

    [JsonPropertyName("heating_circuit_type")]
    public string? HeatingCircuitType { get; init; }

    [JsonPropertyName("heating_circuit_flow_setpoint_excess_offset")]
    public double? HeatingCircuitFlowSetpointExcessOffset { get; init; }

    [JsonPropertyName("room_temperature_control_mode")]
    public string? RoomTemperatureControlMode { get; init; }

    [JsonPropertyName("heat_demand_limited_by_outside_temperature")]
    public double? HeatDemandLimitedByOutsideTemperature { get; init; }

    [JsonPropertyName("epsilon")]
    public double? Epsilon { get; init; }

    [JsonPropertyName("timezone")]
    public string? Timezone { get; init; }

    [JsonPropertyName("heating_circuit_flow_setpoint")]
    public double? HeatingCircuitFlowSetpoint { get; init; }

    [JsonPropertyName("cooling_flow_temperature_minimum_setpoint")]
    public double? CoolingFlowTemperatureMinimumSetpoint { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("acStatus")]
    public string? AcStatus { get; init; }

    [JsonPropertyName("batteryStatus")]
    public string? BatteryStatus { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("commStatus")]
    public string? CommStatus { get; init; }

    [JsonPropertyName("lastCommTime")]
    public string? LastCommTime { get; init; }

    [JsonPropertyName("lastUpdate")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("serialNumber")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("tamperStatus")]
    public string? TamperStatus { get; init; }

    [JsonPropertyName("volume")]
    public double? Volume { get; init; }

    [JsonPropertyName("alarmState")]
    public string? AlarmState { get; init; }

    [JsonPropertyName("batteryLevel")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("chirps")]
    public string? Chirps { get; init; }

    [JsonPropertyName("firmwareStatus")]
    public string? FirmwareStatus { get; init; }

    [JsonPropertyName("linkQuality")]
    public string? LinkQuality { get; init; }

    [JsonPropertyName("powerSave")]
    public string? PowerSave { get; init; }

    [JsonPropertyName("stream_Source")]
    public string? StreamSource { get; init; }

    [JsonPropertyName("still_Image_URL")]
    public string? StillImageURL { get; init; }

    [JsonPropertyName("wirelessNetwork")]
    public string? WirelessNetwork { get; init; }

    [JsonPropertyName("wirelessSignal")]
    public double? WirelessSignal { get; init; }

    [JsonPropertyName("last_backup")]
    public string? LastBackup { get; init; }

    [JsonPropertyName("next_backup")]
    public string? NextBackup { get; init; }

    [JsonPropertyName("last_uploaded")]
    public string? LastUploaded { get; init; }

    [JsonPropertyName("backups_in_google_drive")]
    public double? BackupsInGoogleDrive { get; init; }

    [JsonPropertyName("backups_in_home_assistant")]
    public double? BackupsInHomeAssistant { get; init; }

    [JsonPropertyName("size_in_google_drive")]
    public string? SizeInGoogleDrive { get; init; }

    [JsonPropertyName("size_in_home_assistant")]
    public string? SizeInHomeAssistant { get; init; }

    [JsonPropertyName("backups")]
    public IReadOnlyList<object>? Backups { get; init; }

    [JsonPropertyName("free_space_in_google_drive")]
    public string? FreeSpaceInGoogleDrive { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("timeframe")]
    public string? Timeframe { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("prices_today")]
    public IReadOnlyList<object>? PricesToday { get; init; }

    [JsonPropertyName("prices_tomorrow")]
    public IReadOnlyList<object>? PricesTomorrow { get; init; }

    [JsonPropertyName("prices")]
    public IReadOnlyList<object>? Prices { get; init; }

    [JsonPropertyName("batteryLevel")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("batteryStatus")]
    public string? BatteryStatus { get; init; }

    [JsonPropertyName("wirelessNetwork")]
    public string? WirelessNetwork { get; init; }

    [JsonPropertyName("wirelessSignal")]
    public double? WirelessSignal { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SirenEntity : Entity<SirenEntity, EntityState<SirenAttributes>, SirenAttributes>
{
    public SirenEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SirenEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SirenAttributes
{
    [JsonPropertyName("available_tones")]
    public IReadOnlyList<string>? AvailableTones { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("holiday_ongoing")]
    public bool? HolidayOngoing { get; init; }

    [JsonPropertyName("holiday_remaining_seconds")]
    public object? HolidayRemainingSeconds { get; init; }

    [JsonPropertyName("holiday_start_date_time")]
    public object? HolidayStartDateTime { get; init; }

    [JsonPropertyName("holiday_end_date_time")]
    public object? HolidayEndDateTime { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("minutes_remaining")]
    public double? MinutesRemaining { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public object? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public string? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record WaterHeaterEntity : Entity<WaterHeaterEntity, EntityState<WaterHeaterAttributes>, WaterHeaterAttributes>
{
    public WaterHeaterEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WaterHeaterEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WaterHeaterAttributes
{
    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("operation_list")]
    public IReadOnlyList<string>? OperationList { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("target_temp_high")]
    public object? TargetTempHigh { get; init; }

    [JsonPropertyName("target_temp_low")]
    public object? TargetTempLow { get; init; }

    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }

    [JsonPropertyName("time_program_dhw")]
    public object? TimeProgramDhw { get; init; }

    [JsonPropertyName("time_program_circulation_pump")]
    public object? TimeProgramCirculationPump { get; init; }

    [JsonPropertyName("holiday_end_date_time")]
    public string? HolidayEndDateTime { get; init; }

    [JsonPropertyName("holiday_start_date_time")]
    public string? HolidayStartDateTime { get; init; }

    [JsonPropertyName("timezone")]
    public string? Timezone { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility")]
    public double? Visibility { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<object>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AdguardServices Adguard { get; }

    AlarmControlPanelServices AlarmControlPanel { get; }

    AutomationServices Automation { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    DatetimeServices Datetime { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    HassioServices Hassio { get; }

    HomeassistantServices Homeassistant { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    MypyllantServices Mypyllant { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    RingServices Ring { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AdguardServices Adguard => new(_haContext);
    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public DatetimeServices Datetime => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public MypyllantServices Mypyllant => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public RingServices Ring => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AdguardServices
{
    private readonly IHaContext _haContext;
    public AdguardServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a new filter subscription to AdGuard Home.</summary>
    public void AddUrl(AdguardAddUrlParameters data)
    {
        _haContext.CallService("adguard", "add_url", null, data);
    }

    ///<summary>Add a new filter subscription to AdGuard Home.</summary>
    ///<param name="name">The name of the filter subscription. eg: Example</param>
    ///<param name="url">The filter URL to subscribe to, containing the filter rules. eg: https://www.example.com/filter/1.txt</param>
    public void AddUrl(string name, string url)
    {
        _haContext.CallService("adguard", "add_url", null, new AdguardAddUrlParameters { Name = name, Url = url });
    }

    ///<summary>Disables a filter subscription in AdGuard Home.</summary>
    public void DisableUrl(AdguardDisableUrlParameters data)
    {
        _haContext.CallService("adguard", "disable_url", null, data);
    }

    ///<summary>Disables a filter subscription in AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to disable. eg: https://www.example.com/filter/1.txt</param>
    public void DisableUrl(string url)
    {
        _haContext.CallService("adguard", "disable_url", null, new AdguardDisableUrlParameters { Url = url });
    }

    ///<summary>Enables a filter subscription in AdGuard Home.</summary>
    public void EnableUrl(AdguardEnableUrlParameters data)
    {
        _haContext.CallService("adguard", "enable_url", null, data);
    }

    ///<summary>Enables a filter subscription in AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to enable. eg: https://www.example.com/filter/1.txt</param>
    public void EnableUrl(string url)
    {
        _haContext.CallService("adguard", "enable_url", null, new AdguardEnableUrlParameters { Url = url });
    }

    ///<summary>Refresh all filter subscriptions in AdGuard Home.</summary>
    public void Refresh(AdguardRefreshParameters data)
    {
        _haContext.CallService("adguard", "refresh", null, data);
    }

    ///<summary>Refresh all filter subscriptions in AdGuard Home.</summary>
    ///<param name="force">Force update (bypasses AdGuard Home throttling). &quot;true&quot; to force, or &quot;false&quot; to omit for a regular refresh.</param>
    public void Refresh(bool? force = null)
    {
        _haContext.CallService("adguard", "refresh", null, new AdguardRefreshParameters { Force = force });
    }

    ///<summary>Removes a filter subscription from AdGuard Home.</summary>
    public void RemoveUrl(AdguardRemoveUrlParameters data)
    {
        _haContext.CallService("adguard", "remove_url", null, data);
    }

    ///<summary>Removes a filter subscription from AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to remove. eg: https://www.example.com/filter/1.txt</param>
    public void RemoveUrl(string url)
    {
        _haContext.CallService("adguard", "remove_url", null, new AdguardRemoveUrlParameters { Url = url });
    }
}

public partial record AdguardAddUrlParameters
{
    ///<summary>The name of the filter subscription. eg: Example</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>The filter URL to subscribe to, containing the filter rules. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardDisableUrlParameters
{
    ///<summary>The filter subscription URL to disable. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardEnableUrlParameters
{
    ///<summary>The filter subscription URL to enable. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardRefreshParameters
{
    ///<summary>Force update (bypasses AdGuard Home throttling). &quot;true&quot; to force, or &quot;false&quot; to omit for a regular refresh.</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }
}

public partial record AdguardRemoveUrlParameters
{
    ///<summary>The filter subscription URL to remove. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("automation", "reload", null, data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "toggle", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "turn_on", target, data);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("button", "press", target, data);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetEvents(ServiceTarget target, CalendarGetEventsParameters data)
    {
        _haContext.CallService("calendar", "get_events", target, data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public void GetEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetEventsAsync(ServiceTarget target, CalendarGetEventsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("calendar", "get_events", target, data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public Task<JsonElement?> GetEventsAsync(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        return _haContext.CallServiceWithResponseAsync("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void ListEvents(ServiceTarget target, CalendarListEventsParameters data)
    {
        _haContext.CallService("calendar", "list_events", target, data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public void ListEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "list_events", target, new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> ListEventsAsync(ServiceTarget target, CalendarListEventsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("calendar", "list_events", target, data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public Task<JsonElement?> ListEventsAsync(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        return _haContext.CallServiceWithResponseAsync("calendar", "list_events", target, new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarGetEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from start_date_time until the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial record CalendarListEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from start_date_time until the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "disable_motion_detection", target, data);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "enable_motion_detection", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_off", target, data);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_on", target, data);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    ///<param name="entityId">Media player entity to show the dashboard view on.</param>
    ///<param name="dashboardPath">The URL path of the dashboard to show. eg: lovelace-cast</param>
    ///<param name="viewPath">The path of the dashboard view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string dashboardPath, string? viewPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters { EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath });
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media player entity to show the dashboard view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the dashboard to show. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The path of the dashboard view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "toggle", target, data);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_off", target, data);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_on", target, data);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>Target temperature.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>High target temperature.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>Low target temperature.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.</summary>
    public void RemoteConnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_connect", null, data);
    }

    ///<summary>Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.</summary>
    public void RemoteDisconnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_disconnect", null, data);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public Task<JsonElement?> ProcessAsync(ConversationProcessParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public Task<JsonElement?> ProcessAsync(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "decrement", target, data);
    }

    ///<summary>Increments a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "increment", target, data);
    }

    ///<summary>Resets a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "reset", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class DatetimeServices
{
    private readonly IHaContext _haContext;
    public DatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the date/time for a datetime entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, DatetimeSetValueParameters data)
    {
        _haContext.CallService("datetime", "set_value", target, data);
    }

    ///<summary>Sets the date/time for a datetime entity.</summary>
    ///<param name="datetime">The date/time to set. The time zone of the Home Assistant instance is assumed. eg: 2023-10-07T21:35:22</param>
    public void SetValue(ServiceTarget target, object datetime)
    {
        _haContext.CallService("datetime", "set_value", target, new DatetimeSetValueParameters { Datetime = datetime });
    }
}

public partial record DatetimeSetValueParameters
{
    ///<summary>The date/time to set. The time zone of the Home Assistant instance is assumed. eg: 2023-10-07T21:35:22</summary>
    [JsonPropertyName("datetime")]
    public object? Datetime { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Records a seen tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Records a seen tracked device.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes(object? data = null)
    {
        _haContext.CallService("frontend", "reload_themes", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to add-on stdin.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to add-on stdin.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot(object? data = null)
    {
        _haContext.CallService("hassio", "host_reboot", null, data);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown(object? data = null)
    {
        _haContext.CallService("hassio", "host_shutdown", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "check_config", null, data);
    }

    ///<summary>Reload all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_all", null, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_core_config", null, data);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null, data);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart(object? data = null)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates(object? data = null)
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location. eg: 120</param>
    public void SetLocation(long latitude, long longitude, long? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop(object? data = null)
    {
        _haContext.CallService("homeassistant", "stop", null, data);
    }

    ///<summary>Generic service to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "toggle", target, data);
    }

    ///<summary>Generic service to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_off", target, data);
    }

    ///<summary>Generic service to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_on", target, data);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateEntity(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "update_entity", target, data);
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public long? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public long? Longitude { get; init; }

    ///<summary>Elevation of your location. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public long? Elevation { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_boolean", "reload", null, data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "toggle", target, data);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_off", target, data);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_on", target, data);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_button", "press", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_button", "reload", null, data);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_datetime", "reload", null, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Increments the value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_number", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_select", "reload", null, data);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_last", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_text", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by an amount.</summary>
    [JsonPropertyName("brightness_step")]
    public long? BrightnessStep { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel(object? data = null)
    {
        _haContext.CallService("logger", "set_level", null, data);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "clear_playlist", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_next_track", target, data);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_pause", target, data);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play", target, data);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play_pause", target, data);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_previous_track", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_stop", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "toggle", target, data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_off", target, data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_on", target, data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "unjoin", target, data);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_down", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_up", target, data);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("mqtt", "reload", null, data);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class MypyllantServices
{
    private readonly IHaContext _haContext;
    public MypyllantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancel holiday / away mode</summary>
    ///<param name="target">The target for this service call</param>
    public void CancelHoliday(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("mypyllant", "cancel_holiday", target, data);
    }

    ///<summary>Cancels quick veto temperature and returns to normal schedule / manual setpoint</summary>
    ///<param name="target">The target for this service call</param>
    public void CancelQuickVeto(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("mypyllant", "cancel_quick_veto", target, data);
    }

    ///<summary>Exports data from the mypyllant library</summary>
    public void Export(MypyllantExportParameters data)
    {
        _haContext.CallService("mypyllant", "export", null, data);
    }

    ///<summary>Exports data from the mypyllant library</summary>
    ///<param name="data">Whether to export device data (default off) eg: False</param>
    ///<param name="resolution">The time resolution of the data export (default DAY) eg: DAY</param>
    ///<param name="start">Start date od the data export eg: &quot;2023-01-01 14:00:00&quot;</param>
    ///<param name="end">End date of the data export eg: &quot;2023-01-02 0:00:00&quot;</param>
    public void Export(bool? data = null, object? resolution = null, object? start = null, object? end = null)
    {
        _haContext.CallService("mypyllant", "export", null, new MypyllantExportParameters { Data = data, Resolution = resolution, Start = start, End = end });
    }

    ///<summary>Exports data from the mypyllant library</summary>
    public Task<JsonElement?> ExportAsync(MypyllantExportParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("mypyllant", "export", null, data);
    }

    ///<summary>Exports data from the mypyllant library</summary>
    ///<param name="data">Whether to export device data (default off) eg: False</param>
    ///<param name="resolution">The time resolution of the data export (default DAY) eg: DAY</param>
    ///<param name="start">Start date od the data export eg: &quot;2023-01-01 14:00:00&quot;</param>
    ///<param name="end">End date of the data export eg: &quot;2023-01-02 0:00:00&quot;</param>
    public Task<JsonElement?> ExportAsync(bool? data = null, object? resolution = null, object? start = null, object? end = null)
    {
        return _haContext.CallServiceWithResponseAsync("mypyllant", "export", null, new MypyllantExportParameters { Data = data, Resolution = resolution, Start = start, End = end });
    }

    ///<summary>Generates test data for the mypyllant library and returns it as YAML</summary>
    public void GenerateTestData(object? data = null)
    {
        _haContext.CallService("mypyllant", "generate_test_data", null, data);
    }

    ///<summary>Generates test data for the mypyllant library and returns it as YAML</summary>
    public Task<JsonElement?> GenerateTestDataAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("mypyllant", "generate_test_data", null, data);
    }

    ///<summary>Exports energy reports in CSV format per year</summary>
    public void Report(MypyllantReportParameters data)
    {
        _haContext.CallService("mypyllant", "report", null, data);
    }

    ///<summary>Exports energy reports in CSV format per year</summary>
    ///<param name="year">The year of the energy report eg: 2023</param>
    public void Report(long year)
    {
        _haContext.CallService("mypyllant", "report", null, new MypyllantReportParameters { Year = year });
    }

    ///<summary>Exports energy reports in CSV format per year</summary>
    public Task<JsonElement?> ReportAsync(MypyllantReportParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("mypyllant", "report", null, data);
    }

    ///<summary>Exports energy reports in CSV format per year</summary>
    ///<param name="year">The year of the energy report eg: 2023</param>
    public Task<JsonElement?> ReportAsync(long year)
    {
        return _haContext.CallServiceWithResponseAsync("mypyllant", "report", null, new MypyllantReportParameters { Year = year });
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDhwCirculationTimeProgram(ServiceTarget target, MypyllantSetDhwCirculationTimeProgramParameters data)
    {
        _haContext.CallService("mypyllant", "set_dhw_circulation_time_program", target, data);
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public void SetDhwCirculationTimeProgram(ServiceTarget target, object? timeProgram = null)
    {
        _haContext.CallService("mypyllant", "set_dhw_circulation_time_program", target, new MypyllantSetDhwCirculationTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Updates the time program for a water heater</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDhwTimeProgram(ServiceTarget target, MypyllantSetDhwTimeProgramParameters data)
    {
        _haContext.CallService("mypyllant", "set_dhw_time_program", target, data);
    }

    ///<summary>Updates the time program for a water heater</summary>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public void SetDhwTimeProgram(ServiceTarget target, object? timeProgram = null)
    {
        _haContext.CallService("mypyllant", "set_dhw_time_program", target, new MypyllantSetDhwTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHoliday(ServiceTarget target, MypyllantSetHolidayParameters data)
    {
        _haContext.CallService("mypyllant", "set_holiday", target, data);
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    ///<param name="start">Optional start date of the holiday, defaults to now eg: &quot;2023-01-10 14:00:00&quot;</param>
    ///<param name="end">Optional end date of the holiday, defaults to one year in the future eg: &quot;2023-01-01 0:00:00&quot;</param>
    ///<param name="durationHours">Optional duration of the holiday in hours, defaults to one year eg: 72</param>
    ///<param name="setpoint">Setpoint temperature, required on VRC700 eg: 10</param>
    public void SetHoliday(ServiceTarget target, object? start = null, object? end = null, long? durationHours = null, long? setpoint = null)
    {
        _haContext.CallService("mypyllant", "set_holiday", target, new MypyllantSetHolidayParameters { Start = start, End = end, DurationHours = durationHours, Setpoint = setpoint });
    }

    ///<summary>Sets temperature for manual mode</summary>
    ///<param name="target">The target for this service call</param>
    public void SetManualModeSetpoint(ServiceTarget target, MypyllantSetManualModeSetpointParameters data)
    {
        _haContext.CallService("mypyllant", "set_manual_mode_setpoint", target, data);
    }

    ///<summary>Sets temperature for manual mode</summary>
    ///<param name="temperature">Manual Mode Setpoint Temperature eg: 21</param>
    ///<param name="setpointType">Manual Mode Type eg: heating</param>
    public void SetManualModeSetpoint(ServiceTarget target, double temperature, object? setpointType = null)
    {
        _haContext.CallService("mypyllant", "set_manual_mode_setpoint", target, new MypyllantSetManualModeSetpointParameters { Temperature = temperature, SetpointType = setpointType });
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    ///<param name="target">The target for this service call</param>
    public void SetQuickVeto(ServiceTarget target, MypyllantSetQuickVetoParameters data)
    {
        _haContext.CallService("mypyllant", "set_quick_veto", target, data);
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    ///<param name="temperature">Quick Veto Temperature eg: 21</param>
    ///<param name="durationHours">Optional duration in hours for the quick veto, default is 3 hours eg: 3</param>
    public void SetQuickVeto(ServiceTarget target, double temperature, double? durationHours = null)
    {
        _haContext.CallService("mypyllant", "set_quick_veto", target, new MypyllantSetQuickVetoParameters { Temperature = temperature, DurationHours = durationHours });
    }

    ///<summary>Updates the time program for a zone or room</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTimeProgram(ServiceTarget target, MypyllantSetTimeProgramParameters data)
    {
        _haContext.CallService("mypyllant", "set_time_program", target, data);
    }

    ///<summary>Updates the time program for a zone or room</summary>
    ///<param name="programType">Type of the time program (heating, cooling). Ambisense rooms ignore this field eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight). Ambisense rooms don&apos;t support end_time eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public void SetTimeProgram(ServiceTarget target, object? programType = null, object? timeProgram = null)
    {
        _haContext.CallService("mypyllant", "set_time_program", target, new MypyllantSetTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    ///<param name="target">The target for this service call</param>
    public void SetZoneOperatingMode(ServiceTarget target, MypyllantSetZoneOperatingModeParameters data)
    {
        _haContext.CallService("mypyllant", "set_zone_operating_mode", target, data);
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    ///<param name="mode">The operating mode of the zone, for example OFF or TIME_CONTROLLED eg: OFF</param>
    ///<param name="operatingType">Whether the set the mode for cooling or heating eg: heating</param>
    public void SetZoneOperatingMode(ServiceTarget target, object? mode = null, object? operatingType = null)
    {
        _haContext.CallService("mypyllant", "set_zone_operating_mode", target, new MypyllantSetZoneOperatingModeParameters { Mode = mode, OperatingType = operatingType });
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    ///<param name="target">The target for this service call</param>
    public void SetZoneTimeProgram(ServiceTarget target, MypyllantSetZoneTimeProgramParameters data)
    {
        _haContext.CallService("mypyllant", "set_zone_time_program", target, data);
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    ///<param name="programType">Type of the time program (heating, cooling) eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight) eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public void SetZoneTimeProgram(ServiceTarget target, object? programType = null, object? timeProgram = null)
    {
        _haContext.CallService("mypyllant", "set_zone_time_program", target, new MypyllantSetZoneTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }
}

public partial record MypyllantExportParameters
{
    ///<summary>Whether to export device data (default off) eg: False</summary>
    [JsonPropertyName("data")]
    public bool? Data { get; init; }

    ///<summary>The time resolution of the data export (default DAY) eg: DAY</summary>
    [JsonPropertyName("resolution")]
    public object? Resolution { get; init; }

    ///<summary>Start date od the data export eg: &quot;2023-01-01 14:00:00&quot;</summary>
    [JsonPropertyName("start")]
    public object? Start { get; init; }

    ///<summary>End date of the data export eg: &quot;2023-01-02 0:00:00&quot;</summary>
    [JsonPropertyName("end")]
    public object? End { get; init; }
}

public partial record MypyllantReportParameters
{
    ///<summary>The year of the energy report eg: 2023</summary>
    [JsonPropertyName("year")]
    public long? Year { get; init; }
}

public partial record MypyllantSetDhwCirculationTimeProgramParameters
{
    ///<summary>A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </summary>
    [JsonPropertyName("time_program")]
    public object? TimeProgram { get; init; }
}

public partial record MypyllantSetDhwTimeProgramParameters
{
    ///<summary>A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </summary>
    [JsonPropertyName("time_program")]
    public object? TimeProgram { get; init; }
}

public partial record MypyllantSetHolidayParameters
{
    ///<summary>Optional start date of the holiday, defaults to now eg: &quot;2023-01-10 14:00:00&quot;</summary>
    [JsonPropertyName("start")]
    public object? Start { get; init; }

    ///<summary>Optional end date of the holiday, defaults to one year in the future eg: &quot;2023-01-01 0:00:00&quot;</summary>
    [JsonPropertyName("end")]
    public object? End { get; init; }

    ///<summary>Optional duration of the holiday in hours, defaults to one year eg: 72</summary>
    [JsonPropertyName("duration_hours")]
    public long? DurationHours { get; init; }

    ///<summary>Setpoint temperature, required on VRC700 eg: 10</summary>
    [JsonPropertyName("setpoint")]
    public long? Setpoint { get; init; }
}

public partial record MypyllantSetManualModeSetpointParameters
{
    ///<summary>Manual Mode Setpoint Temperature eg: 21</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>Manual Mode Type eg: heating</summary>
    [JsonPropertyName("setpoint_type")]
    public object? SetpointType { get; init; }
}

public partial record MypyllantSetQuickVetoParameters
{
    ///<summary>Quick Veto Temperature eg: 21</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>Optional duration in hours for the quick veto, default is 3 hours eg: 3</summary>
    [JsonPropertyName("duration_hours")]
    public double? DurationHours { get; init; }
}

public partial record MypyllantSetTimeProgramParameters
{
    ///<summary>Type of the time program (heating, cooling). Ambisense rooms ignore this field eg: heating</summary>
    [JsonPropertyName("program_type")]
    public object? ProgramType { get; init; }

    ///<summary>A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight). Ambisense rooms don&apos;t support end_time eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </summary>
    [JsonPropertyName("time_program")]
    public object? TimeProgram { get; init; }
}

public partial record MypyllantSetZoneOperatingModeParameters
{
    ///<summary>The operating mode of the zone, for example OFF or TIME_CONTROLLED eg: OFF</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }

    ///<summary>Whether the set the mode for cooling or heating eg: heating</summary>
    [JsonPropertyName("operating_type")]
    public object? OperatingType { get; init; }
}

public partial record MypyllantSetZoneTimeProgramParameters
{
    ///<summary>Type of the time program (heating, cooling) eg: heating</summary>
    [JsonPropertyName("program_type")]
    public object? ProgramType { get; init; }

    ///<summary>A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight) eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </summary>
    [JsonPropertyName("time_program")]
    public object? TimeProgram { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the mobile_app_iphone_mark_2 integration.</summary>
    public void MobileAppIphoneMark2(NotifyMobileAppIphoneMark2Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_iphone_mark_2", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_iphone_mark_2 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppIphoneMark2(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_iphone_mark_2", null, new NotifyMobileAppIphoneMark2Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }

    ///<summary>Sends a notification message using the tibber service.</summary>
    public void Tibber(NotifyTibberParameters data)
    {
        _haContext.CallService("notify", "tibber", null, data);
    }

    ///<summary>Sends a notification message using the tibber service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Tibber(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "tibber", null, new NotifyTibberParameters { Message = message, Title = title, Target = target, Data = data });
    }
}

public partial record NotifyMobileAppIphoneMark2Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial record NotifyTibberParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    ///<param name="notificationId">ID of the notification to be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Removes all notifications from the **Notifications** panel.</summary>
    public void DismissAll(object? data = null)
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null, data);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("person", "reload", null, data);
    }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable(object? data = null)
    {
        _haContext.CallService("recorder", "disable", null, data);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable(object? data = null)
    {
        _haContext.CallService("recorder", "enable", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "toggle", target, data);
    }

    ///<summary>Turns the device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "turn_off", target, data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class RingServices
{
    private readonly IHaContext _haContext;
    public RingServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Updates the data we have for all your ring devices.</summary>
    public void Update(object? data = null)
    {
        _haContext.CallService("ring", "update", null, data);
    }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("scene", "delete", target, data);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("scene", "reload", null, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("schedule", "reload", null, data);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("script", "reload", null, data);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "toggle", target, data);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_off", target, data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_on", target, data);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "toggle", target, data);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "turn_off", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "toggle", target, data);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_off", target, data);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_on", target, data);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all log entries.</summary>
    public void Clear(object? data = null)
    {
        _haContext.CallService("system_log", "clear", null, data);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancels a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "cancel", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "finish", target, data);
    }

    ///<summary>Pauses a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "pause", target, data);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("timer", "reload", null, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache(object? data = null)
    {
        _haContext.CallService("tts", "clear_cache", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleTranslateSay(TtsGoogleTranslateSayParameters data)
    {
        _haContext.CallService("tts", "google_translate_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void GoogleTranslateSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_translate_say", null, new TtsGoogleTranslateSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleTranslateSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "clear_skipped", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "skip", target, data);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update .</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_off", target, data);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_on", target, data);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecast(ServiceTarget target, WeatherGetForecastParameters data)
    {
        _haContext.CallService("weather", "get_forecast", target, data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecast(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecast", target, new WeatherGetForecastParameters { Type = @type });
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetForecastAsync(ServiceTarget target, WeatherGetForecastParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecast", target, data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public Task<JsonElement?> GetForecastAsync(ServiceTarget target, object @type)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecast", target, new WeatherGetForecastParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecasts(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        _haContext.CallService("weather", "get_forecasts", target, data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecasts(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, object @type)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }
}

public partial record WeatherGetForecastParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial record WeatherGetForecastsParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("zone", "reload", null, data);
    }
}

public static class AlarmControlPanelEntityExtensionMethods
{
    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static Task<JsonElement?> GetEventsAsync(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static Task<JsonElement?> GetEventsAsync(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        return target.CallServiceWithResponseAsync("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void GetEvents(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static Task<JsonElement?> ListEventsAsync(this ICalendarEntityCore target, CalendarListEventsParameters data)
    {
        return target.CallServiceWithResponseAsync("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static Task<JsonElement?> ListEventsAsync(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        return target.CallServiceWithResponseAsync("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this ICalendarEntityCore target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this IEnumerable<ICalendarEntityCore> target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this IEnumerable<ICalendarEntityCore> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class DatetimeEntityExtensionMethods
{
    ///<summary>Sets the date/time for a datetime entity.</summary>
    public static void SetValue(this DatetimeEntity target, DatetimeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the date/time for a datetime entity.</summary>
    public static void SetValue(this IEnumerable<DatetimeEntity> target, DatetimeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the date/time for a datetime entity.</summary>
    ///<param name="target">The DatetimeEntity to call this service for</param>
    ///<param name="datetime">The date/time to set. The time zone of the Home Assistant instance is assumed. eg: 2023-10-07T21:35:22</param>
    public static void SetValue(this DatetimeEntity target, object datetime)
    {
        target.CallService("set_value", new DatetimeSetValueParameters { Datetime = datetime });
    }

    ///<summary>Sets the date/time for a datetime entity.</summary>
    ///<param name="target">The IEnumerable&lt;DatetimeEntity&gt; to call this service for</param>
    ///<param name="datetime">The date/time to set. The time zone of the Home Assistant instance is assumed. eg: 2023-10-07T21:35:22</param>
    public static void SetValue(this IEnumerable<DatetimeEntity> target, object datetime)
    {
        target.CallService("set_value", new DatetimeSetValueParameters { Datetime = datetime });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this ILightEntityCore target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_up", data);
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_up", data);
    }
}

public static class MypyllantEntityExtensionMethods
{
    ///<summary>Cancel holiday / away mode</summary>
    public static void CancelHoliday(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("cancel_holiday", data);
    }

    ///<summary>Cancel holiday / away mode</summary>
    public static void CancelHoliday(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("cancel_holiday", data);
    }

    ///<summary>Cancels quick veto temperature and returns to normal schedule / manual setpoint</summary>
    public static void CancelQuickVeto(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("cancel_quick_veto", data);
    }

    ///<summary>Cancels quick veto temperature and returns to normal schedule / manual setpoint</summary>
    public static void CancelQuickVeto(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("cancel_quick_veto", data);
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    public static void SetDhwCirculationTimeProgram(this WaterHeaterEntity target, MypyllantSetDhwCirculationTimeProgramParameters data)
    {
        target.CallService("set_dhw_circulation_time_program", data);
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    public static void SetDhwCirculationTimeProgram(this IEnumerable<WaterHeaterEntity> target, MypyllantSetDhwCirculationTimeProgramParameters data)
    {
        target.CallService("set_dhw_circulation_time_program", data);
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public static void SetDhwCirculationTimeProgram(this WaterHeaterEntity target, object? timeProgram = null)
    {
        target.CallService("set_dhw_circulation_time_program", new MypyllantSetDhwCirculationTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public static void SetDhwCirculationTimeProgram(this IEnumerable<WaterHeaterEntity> target, object? timeProgram = null)
    {
        target.CallService("set_dhw_circulation_time_program", new MypyllantSetDhwCirculationTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Updates the time program for a water heater</summary>
    public static void SetDhwTimeProgram(this WaterHeaterEntity target, MypyllantSetDhwTimeProgramParameters data)
    {
        target.CallService("set_dhw_time_program", data);
    }

    ///<summary>Updates the time program for a water heater</summary>
    public static void SetDhwTimeProgram(this IEnumerable<WaterHeaterEntity> target, MypyllantSetDhwTimeProgramParameters data)
    {
        target.CallService("set_dhw_time_program", data);
    }

    ///<summary>Updates the time program for a water heater</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public static void SetDhwTimeProgram(this WaterHeaterEntity target, object? timeProgram = null)
    {
        target.CallService("set_dhw_time_program", new MypyllantSetDhwTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Updates the time program for a water heater</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public static void SetDhwTimeProgram(this IEnumerable<WaterHeaterEntity> target, object? timeProgram = null)
    {
        target.CallService("set_dhw_time_program", new MypyllantSetDhwTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    public static void SetHoliday(this IClimateEntityCore target, MypyllantSetHolidayParameters data)
    {
        target.CallService("set_holiday", data);
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    public static void SetHoliday(this IEnumerable<IClimateEntityCore> target, MypyllantSetHolidayParameters data)
    {
        target.CallService("set_holiday", data);
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="start">Optional start date of the holiday, defaults to now eg: &quot;2023-01-10 14:00:00&quot;</param>
    ///<param name="end">Optional end date of the holiday, defaults to one year in the future eg: &quot;2023-01-01 0:00:00&quot;</param>
    ///<param name="durationHours">Optional duration of the holiday in hours, defaults to one year eg: 72</param>
    ///<param name="setpoint">Setpoint temperature, required on VRC700 eg: 10</param>
    public static void SetHoliday(this IClimateEntityCore target, object? start = null, object? end = null, long? durationHours = null, long? setpoint = null)
    {
        target.CallService("set_holiday", new MypyllantSetHolidayParameters { Start = start, End = end, DurationHours = durationHours, Setpoint = setpoint });
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="start">Optional start date of the holiday, defaults to now eg: &quot;2023-01-10 14:00:00&quot;</param>
    ///<param name="end">Optional end date of the holiday, defaults to one year in the future eg: &quot;2023-01-01 0:00:00&quot;</param>
    ///<param name="durationHours">Optional duration of the holiday in hours, defaults to one year eg: 72</param>
    ///<param name="setpoint">Setpoint temperature, required on VRC700 eg: 10</param>
    public static void SetHoliday(this IEnumerable<IClimateEntityCore> target, object? start = null, object? end = null, long? durationHours = null, long? setpoint = null)
    {
        target.CallService("set_holiday", new MypyllantSetHolidayParameters { Start = start, End = end, DurationHours = durationHours, Setpoint = setpoint });
    }

    ///<summary>Sets temperature for manual mode</summary>
    public static void SetManualModeSetpoint(this IClimateEntityCore target, MypyllantSetManualModeSetpointParameters data)
    {
        target.CallService("set_manual_mode_setpoint", data);
    }

    ///<summary>Sets temperature for manual mode</summary>
    public static void SetManualModeSetpoint(this IEnumerable<IClimateEntityCore> target, MypyllantSetManualModeSetpointParameters data)
    {
        target.CallService("set_manual_mode_setpoint", data);
    }

    ///<summary>Sets temperature for manual mode</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Manual Mode Setpoint Temperature eg: 21</param>
    ///<param name="setpointType">Manual Mode Type eg: heating</param>
    public static void SetManualModeSetpoint(this IClimateEntityCore target, double temperature, object? setpointType = null)
    {
        target.CallService("set_manual_mode_setpoint", new MypyllantSetManualModeSetpointParameters { Temperature = temperature, SetpointType = setpointType });
    }

    ///<summary>Sets temperature for manual mode</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Manual Mode Setpoint Temperature eg: 21</param>
    ///<param name="setpointType">Manual Mode Type eg: heating</param>
    public static void SetManualModeSetpoint(this IEnumerable<IClimateEntityCore> target, double temperature, object? setpointType = null)
    {
        target.CallService("set_manual_mode_setpoint", new MypyllantSetManualModeSetpointParameters { Temperature = temperature, SetpointType = setpointType });
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    public static void SetQuickVeto(this IClimateEntityCore target, MypyllantSetQuickVetoParameters data)
    {
        target.CallService("set_quick_veto", data);
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    public static void SetQuickVeto(this IEnumerable<IClimateEntityCore> target, MypyllantSetQuickVetoParameters data)
    {
        target.CallService("set_quick_veto", data);
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Quick Veto Temperature eg: 21</param>
    ///<param name="durationHours">Optional duration in hours for the quick veto, default is 3 hours eg: 3</param>
    public static void SetQuickVeto(this IClimateEntityCore target, double temperature, double? durationHours = null)
    {
        target.CallService("set_quick_veto", new MypyllantSetQuickVetoParameters { Temperature = temperature, DurationHours = durationHours });
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Quick Veto Temperature eg: 21</param>
    ///<param name="durationHours">Optional duration in hours for the quick veto, default is 3 hours eg: 3</param>
    public static void SetQuickVeto(this IEnumerable<IClimateEntityCore> target, double temperature, double? durationHours = null)
    {
        target.CallService("set_quick_veto", new MypyllantSetQuickVetoParameters { Temperature = temperature, DurationHours = durationHours });
    }

    ///<summary>Updates the time program for a zone or room</summary>
    public static void SetTimeProgram(this IClimateEntityCore target, MypyllantSetTimeProgramParameters data)
    {
        target.CallService("set_time_program", data);
    }

    ///<summary>Updates the time program for a zone or room</summary>
    public static void SetTimeProgram(this IEnumerable<IClimateEntityCore> target, MypyllantSetTimeProgramParameters data)
    {
        target.CallService("set_time_program", data);
    }

    ///<summary>Updates the time program for a zone or room</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="programType">Type of the time program (heating, cooling). Ambisense rooms ignore this field eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight). Ambisense rooms don&apos;t support end_time eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public static void SetTimeProgram(this IClimateEntityCore target, object? programType = null, object? timeProgram = null)
    {
        target.CallService("set_time_program", new MypyllantSetTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }

    ///<summary>Updates the time program for a zone or room</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="programType">Type of the time program (heating, cooling). Ambisense rooms ignore this field eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight). Ambisense rooms don&apos;t support end_time eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public static void SetTimeProgram(this IEnumerable<IClimateEntityCore> target, object? programType = null, object? timeProgram = null)
    {
        target.CallService("set_time_program", new MypyllantSetTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    public static void SetZoneOperatingMode(this IClimateEntityCore target, MypyllantSetZoneOperatingModeParameters data)
    {
        target.CallService("set_zone_operating_mode", data);
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    public static void SetZoneOperatingMode(this IEnumerable<IClimateEntityCore> target, MypyllantSetZoneOperatingModeParameters data)
    {
        target.CallService("set_zone_operating_mode", data);
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="mode">The operating mode of the zone, for example OFF or TIME_CONTROLLED eg: OFF</param>
    ///<param name="operatingType">Whether the set the mode for cooling or heating eg: heating</param>
    public static void SetZoneOperatingMode(this IClimateEntityCore target, object? mode = null, object? operatingType = null)
    {
        target.CallService("set_zone_operating_mode", new MypyllantSetZoneOperatingModeParameters { Mode = mode, OperatingType = operatingType });
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="mode">The operating mode of the zone, for example OFF or TIME_CONTROLLED eg: OFF</param>
    ///<param name="operatingType">Whether the set the mode for cooling or heating eg: heating</param>
    public static void SetZoneOperatingMode(this IEnumerable<IClimateEntityCore> target, object? mode = null, object? operatingType = null)
    {
        target.CallService("set_zone_operating_mode", new MypyllantSetZoneOperatingModeParameters { Mode = mode, OperatingType = operatingType });
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    public static void SetZoneTimeProgram(this IClimateEntityCore target, MypyllantSetZoneTimeProgramParameters data)
    {
        target.CallService("set_zone_time_program", data);
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    public static void SetZoneTimeProgram(this IEnumerable<IClimateEntityCore> target, MypyllantSetZoneTimeProgramParameters data)
    {
        target.CallService("set_zone_time_program", data);
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="programType">Type of the time program (heating, cooling) eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight) eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public static void SetZoneTimeProgram(this IClimateEntityCore target, object? programType = null, object? timeProgram = null)
    {
        target.CallService("set_zone_time_program", new MypyllantSetZoneTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="programType">Type of the time program (heating, cooling) eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight) eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public static void SetZoneTimeProgram(this IEnumerable<IClimateEntityCore> target, object? programType = null, object? timeProgram = null)
    {
        target.CallService("set_zone_time_program", new MypyllantSetZoneTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }
}

public static class NotifyEntityExtensionMethods
{
    ///<summary>Sends a notification message.</summary>
    public static void SendMessage(this NotifyEntity target, NotifySendMessageParameters data)
    {
        target.CallService("send_message", data);
    }

    ///<summary>Sends a notification message.</summary>
    public static void SendMessage(this IEnumerable<NotifyEntity> target, NotifySendMessageParameters data)
    {
        target.CallService("send_message", data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The NotifyEntity to call this service for</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public static void SendMessage(this NotifyEntity target, string message, string? title = null)
    {
        target.CallService("send_message", new NotifySendMessageParameters { Message = message, Title = title });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The IEnumerable&lt;NotifyEntity&gt; to call this service for</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public static void SendMessage(this IEnumerable<NotifyEntity> target, string message, string? title = null)
    {
        target.CallService("send_message", new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this ISceneEntityCore target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this IEnumerable<ISceneEntityCore> target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SirenEntityExtensionMethods
{
    ///<summary>Toggles the siren on/off.</summary>
    public static void Toggle(this SirenEntity target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the siren on/off.</summary>
    public static void Toggle(this IEnumerable<SirenEntity> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns the siren off.</summary>
    public static void TurnOff(this SirenEntity target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns the siren off.</summary>
    public static void TurnOff(this IEnumerable<SirenEntity> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns the siren on.</summary>
    public static void TurnOn(this SirenEntity target, SirenTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns the siren on.</summary>
    public static void TurnOn(this IEnumerable<SirenEntity> target, SirenTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The SirenEntity to call this service for</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public static void TurnOn(this SirenEntity target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        target.CallService("turn_on", new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The IEnumerable&lt;SirenEntity&gt; to call this service for</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public static void TurnOn(this IEnumerable<SirenEntity> target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        target.CallService("turn_on", new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("skip", data);
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("skip", data);
    }
}

public static class WaterHeaterEntityExtensionMethods
{
    ///<summary>Turns away mode on/off.</summary>
    public static void SetAwayMode(this WaterHeaterEntity target, WaterHeaterSetAwayModeParameters data)
    {
        target.CallService("set_away_mode", data);
    }

    ///<summary>Turns away mode on/off.</summary>
    public static void SetAwayMode(this IEnumerable<WaterHeaterEntity> target, WaterHeaterSetAwayModeParameters data)
    {
        target.CallService("set_away_mode", data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="awayMode">New value of away mode.</param>
    public static void SetAwayMode(this WaterHeaterEntity target, bool awayMode)
    {
        target.CallService("set_away_mode", new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="awayMode">New value of away mode.</param>
    public static void SetAwayMode(this IEnumerable<WaterHeaterEntity> target, bool awayMode)
    {
        target.CallService("set_away_mode", new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    public static void SetOperationMode(this WaterHeaterEntity target, WaterHeaterSetOperationModeParameters data)
    {
        target.CallService("set_operation_mode", data);
    }

    ///<summary>Sets the operation mode.</summary>
    public static void SetOperationMode(this IEnumerable<WaterHeaterEntity> target, WaterHeaterSetOperationModeParameters data)
    {
        target.CallService("set_operation_mode", data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetOperationMode(this WaterHeaterEntity target, string operationMode)
    {
        target.CallService("set_operation_mode", new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetOperationMode(this IEnumerable<WaterHeaterEntity> target, string operationMode)
    {
        target.CallService("set_operation_mode", new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    public static void SetTemperature(this WaterHeaterEntity target, WaterHeaterSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the target temperature.</summary>
    public static void SetTemperature(this IEnumerable<WaterHeaterEntity> target, WaterHeaterSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetTemperature(this WaterHeaterEntity target, double temperature, string? operationMode = null)
    {
        target.CallService("set_temperature", new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetTemperature(this IEnumerable<WaterHeaterEntity> target, double temperature, string? operationMode = null)
    {
        target.CallService("set_temperature", new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    public static void TurnOff(this WaterHeaterEntity target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns water heater off.</summary>
    public static void TurnOff(this IEnumerable<WaterHeaterEntity> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns water heater on.</summary>
    public static void TurnOn(this WaterHeaterEntity target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns water heater on.</summary>
    public static void TurnOn(this IEnumerable<WaterHeaterEntity> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Get weather forecast.</summary>
    public static Task<JsonElement?> GetForecastAsync(this IWeatherEntityCore target, WeatherGetForecastParameters data)
    {
        return target.CallServiceWithResponseAsync("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static Task<JsonElement?> GetForecastAsync(this IWeatherEntityCore target, object @type)
    {
        return target.CallServiceWithResponseAsync("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }

    ///<summary>Get weather forecast.</summary>
    public static void GetForecast(this IWeatherEntityCore target, WeatherGetForecastParameters data)
    {
        target.CallService("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    public static void GetForecast(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastParameters data)
    {
        target.CallService("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecast(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecast(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, object @type)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }
}