//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v24.23.0.0
//   At: 2025-08-21T14:31:36.1038542+02:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AlarmControlPanelEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<DatetimeEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<NotifyEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SirenEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WaterHeaterEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<ImageEntities>();
        serviceCollection.AddTransient<TimeEntities>();
        serviceCollection.AddTransient<VacuumEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<InputDatetimeEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AdguardServices>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AlexaMediaServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BackupServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DatetimeServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<ImageServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LinkplayServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<MypyllantServices>();
        serviceCollection.AddTransient<NordpoolServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<RoborockServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TibberServices>();
        serviceCollection.AddTransient<TimeServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<ValveServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<WebostvServices>();
        serviceCollection.AddTransient<ZhaServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AlarmControlPanelEntities AlarmControlPanel { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    ConversationEntities Conversation { get; }

    DatetimeEntities Datetime { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    InputBooleanEntities InputBoolean { get; }

    NotifyEntities Notify { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SirenEntities Siren { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    UpdateEntities Update { get; }

    WaterHeaterEntities WaterHeater { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }

    ScriptEntities Script { get; }

    EventEntities Event { get; }

    ImageEntities Image { get; }

    TimeEntities Time { get; }

    VacuumEntities Vacuum { get; }

    InputTextEntities InputText { get; }

    InputDatetimeEntities InputDatetime { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AlarmControlPanelEntities AlarmControlPanel => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public DatetimeEntities Datetime => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public NotifyEntities Notify => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SirenEntities Siren => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WaterHeaterEntities WaterHeater => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public EventEntities Event => new(_haContext);
    public ImageEntities Image => new(_haContext);
    public TimeEntities Time => new(_haContext);
    public VacuumEntities Vacuum => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public InputDatetimeEntities InputDatetime => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all light entities currently registered (at runtime) in Home Assistant as LightEntity</summary>
    public IEnumerable<LightEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("light.")).Select(e => new LightEntity(e));
    ///<summary>Badkamer</summary>
    public LightEntity Badkamer => new(_haContext, "light.badkamer");
    ///<summary>Badkamer 1</summary>
    public LightEntity Badkamer1 => new(_haContext, "light.badkamer_1");
    ///<summary>Badkamer 2</summary>
    public LightEntity Badkamer2 => new(_haContext, "light.badkamer_2");
    ///<summary>Badkamer 3</summary>
    public LightEntity Badkamer3 => new(_haContext, "light.badkamer_3");
    ///<summary>Badkamer 4</summary>
    public LightEntity Badkamer4 => new(_haContext, "light.badkamer_4");
    ///<summary>Badkamer 5</summary>
    public LightEntity Badkamer5 => new(_haContext, "light.badkamer_5");
    ///<summary>Badkamer 6</summary>
    public LightEntity Badkamer6 => new(_haContext, "light.badkamer_6");
    ///<summary>Badkamer Meubel</summary>
    public LightEntity BadkamerMeubelLicht => new(_haContext, "light.badkamer_meubel_licht");
    ///<summary>Dinnertable</summary>
    public LightEntity Dinnertable => new(_haContext, "light.dinnertable");
    ///<summary>Eettafel-L</summary>
    public LightEntity EettafelL => new(_haContext, "light.eettafel_l");
    ///<summary>Eettafel-R</summary>
    public LightEntity EettafelR => new(_haContext, "light.eettafel_r");
    ///<summary>Lamp-Kantoor</summary>
    public LightEntity LampKantoor => new(_haContext, "light.lamp_kantoor");
    ///<summary>Moodlight 1</summary>
    public LightEntity Moodlight1 => new(_haContext, "light.moodlight_1");
    ///<summary>Moodlight 2</summary>
    public LightEntity Moodlight2 => new(_haContext, "light.moodlight_2");
    ///<summary>Moodlight 3</summary>
    public LightEntity Moodlight3 => new(_haContext, "light.moodlight_3");
    ///<summary>Moodlight 4</summary>
    public LightEntity Moodlight4 => new(_haContext, "light.moodlight_4");
    ///<summary>Moodlights</summary>
    public LightEntity Moodlights => new(_haContext, "light.moodlights");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all media_player entities currently registered (at runtime) in Home Assistant as MediaPlayerEntity</summary>
    public IEnumerable<MediaPlayerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("media_player.")).Select(e => new MediaPlayerEntity(e));
    ///<summary>Buiten-TV</summary>
    public MediaPlayerEntity BuitenTv => new(_haContext, "media_player.buiten_tv");
    public MediaPlayerEntity Chromecast => new(_haContext, "media_player.chromecast");
    ///<summary>Chromecast Huiskamer </summary>
    public MediaPlayerEntity ChromecastHuiskamer => new(_haContext, "media_player.chromecast_huiskamer");
    ///<summary>Echo Pop Mark</summary>
    public MediaPlayerEntity EchoPopMark => new(_haContext, "media_player.echo_pop_mark");
    ///<summary>Everywhere</summary>
    public MediaPlayerEntity Everywhere => new(_haContext, "media_player.everywhere");
    ///<summary>Chromecast Huiskamer </summary>
    public MediaPlayerEntity Huiskamer => new(_haContext, "media_player.huiskamer");
    ///<summary>LG OLED TV</summary>
    public MediaPlayerEntity LgOledTv => new(_haContext, "media_player.lg_oled_tv");
    ///<summary>[LG] webOS TV OLED65C16LA</summary>
    public MediaPlayerEntity LgWebosTvOled65c16la => new(_haContext, "media_player.lg_webos_tv_oled65c16la");
    ///<summary>Mark&apos;s 2nd WiiM Ultra</summary>
    public MediaPlayerEntity MarkS2ndWiimUltra => new(_haContext, "media_player.mark_s_2nd_wiim_ultra");
    ///<summary>Mark&apos;s Bose QuietComfort 35 II</summary>
    public MediaPlayerEntity MarkSBoseQuietcomfort35Ii => new(_haContext, "media_player.mark_s_bose_quietcomfort_35_ii");
    ///<summary>Mark&apos;s Echo Dot</summary>
    public MediaPlayerEntity MarkSEchoDot => new(_haContext, "media_player.mark_s_echo_dot");
    ///<summary>Mark&apos;s Echo Show</summary>
    public MediaPlayerEntity MarkSEchoShow => new(_haContext, "media_player.mark_s_echo_show");
    ///<summary>Mark&apos;s WiiM Ultra</summary>
    public MediaPlayerEntity MarkSWiimUltra => new(_haContext, "media_player.mark_s_wiim_ultra");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice => new(_haContext, "media_player.this_device");
    ///<summary>Home Cinema</summary>
    public MediaPlayerEntity WiimUltra7a1e => new(_haContext, "media_player.wiim_ultra_7a1e");
    ///<summary>WiiM Ultra-7A1E</summary>
    public MediaPlayerEntity WiimUltra7a1e2 => new(_haContext, "media_player.wiim_ultra_7a1e_2");
    public MediaPlayerEntity WiimUltra9b0c => new(_haContext, "media_player.wiim_ultra_9b0c");
    ///<summary>WiiM Ultra-9B0C</summary>
    public MediaPlayerEntity WiimUltra9b0c2 => new(_haContext, "media_player.wiim_ultra_9b0c_2");
    public MediaPlayerEntity WiimUltra9b0c3 => new(_haContext, "media_player.wiim_ultra_9b0c_3");
    ///<summary>Home Cinema</summary>
    public MediaPlayerEntity WiimUltraCinema => new(_haContext, "media_player.wiim_ultra_cinema");
}

public partial class AlarmControlPanelEntities
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all alarm_control_panel entities currently registered (at runtime) in Home Assistant as AlarmControlPanelEntity</summary>
    public IEnumerable<AlarmControlPanelEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("alarm_control_panel.")).Select(e => new AlarmControlPanelEntity(e));
    public AlarmControlPanelEntity EmmeloordAlarm => new(_haContext, "alarm_control_panel.emmeloord_alarm");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all automation entities currently registered (at runtime) in Home Assistant as AutomationEntity</summary>
    public IEnumerable<AutomationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("automation.")).Select(e => new AutomationEntity(e));
    ///<summary>Airco aan met warm weer</summary>
    public AutomationEntity AircoAanBijLagePrijzen => new(_haContext, "automation.airco_aan_bij_lage_prijzen");
    ///<summary>Airco aan met lage prijzen</summary>
    public AutomationEntity AircoAanMetLagePrijzen => new(_haContext, "automation.airco_aan_met_lage_prijzen");
    ///<summary>Airco aan met prijzen onder nul</summary>
    public AutomationEntity AircoAanMetPrijzenOnderNul => new(_haContext, "automation.airco_aan_met_prijzen_onder_nul");
    ///<summary>Airco aan met warm weer &apos;s avonds</summary>
    public AutomationEntity AircoAanMetWarmWeerSAvonds => new(_haContext, "automation.airco_aan_met_warm_weer_s_avonds");
    ///<summary>Airco aan snachts in die pleuris hitte</summary>
    public AutomationEntity AircoAanSnachtsInDiePleurisHitte => new(_haContext, "automation.airco_aan_snachts_in_die_pleuris_hitte");
    ///<summary>Airco ventileren in de ochtend</summary>
    public AutomationEntity AircoUit => new(_haContext, "automation.airco_uit");
    ///<summary>Airco op ventileren als temperatuur laag is</summary>
    public AutomationEntity AircoUitAlsTemperatuurLaagIs => new(_haContext, "automation.airco_uit_als_temperatuur_laag_is");
    ///<summary>Airco uit met hoge prijzen</summary>
    public AutomationEntity AircoUitMetHogePrijzen => new(_haContext, "automation.airco_uit_met_hoge_prijzen");
    ///<summary>Apparatuur uit bij alarm aan</summary>
    public AutomationEntity ApparatuurUitBijAlarmAan => new(_haContext, "automation.apparatuur_uit_bij_alarm_aan");
    ///<summary>Alarm uit als we thuis zijn</summary>
    public AutomationEntity Automation3 => new(_haContext, "automation.automation_3");
    ///<summary>Verlichting aan in de avond</summary>
    public AutomationEntity LampenAan => new(_haContext, "automation.lampen_aan");
    ///<summary>Verlichting aan in de morgen</summary>
    public AutomationEntity LampenAanInDeMorgen => new(_haContext, "automation.lampen_aan_in_de_morgen");
    ///<summary>Lampen uit na zonsopkomst </summary>
    public AutomationEntity LampenUitNaZonsopkomst => new(_haContext, "automation.lampen_uit_na_zonsopkomst");
    ///<summary>Turn off Alexa screen when media is on</summary>
    public AutomationEntity NieuweAutomatisering => new(_haContext, "automation.nieuwe_automatisering");
    ///<summary>Reboot</summary>
    public AutomationEntity Reboot2 => new(_haContext, "automation.reboot_2");
    ///<summary>Restart Ad-Guard</summary>
    public AutomationEntity RestartAdguard => new(_haContext, "automation.restart_adguard");
    ///<summary>Restart Nginx</summary>
    public AutomationEntity RestartNginx => new(_haContext, "automation.restart_nginx");
    ///<summary>Show Photos</summary>
    public AutomationEntity ShowPhotos => new(_haContext, "automation.show_photos");
    ///<summary>Spots aan</summary>
    public AutomationEntity SpotsAan => new(_haContext, "automation.spots_aan");
    ///<summary>Turn off Alexa when music is playing </summary>
    public AutomationEntity TurnOffAlexaWhenMusicIsPlaying => new(_haContext, "automation.turn_off_alexa_when_music_is_playing");
    ///<summary>Verlichting (sfeer) aan bij tv kijken</summary>
    public AutomationEntity TurnOnLightsWhenTvIsOn => new(_haContext, "automation.turn_on_lights_when_tv_is_on");
    ///<summary>TV Sound Movie Mode</summary>
    public AutomationEntity TvSoundMoveMode => new(_haContext, "automation.tv_sound_move_mode");
    ///<summary>TV Sound default</summary>
    public AutomationEntity TvSpeakerAsDefault => new(_haContext, "automation.tv_speaker_as_default");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all binary_sensor entities currently registered (at runtime) in Home Assistant as BinarySensorEntity</summary>
    public IEnumerable<BinarySensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("binary_sensor.")).Select(e => new BinarySensorEntity(e));
    public BinarySensorEntity AchterdeurContactSensor => new(_haContext, "binary_sensor.achterdeur_contact_sensor");
    ///<summary>Tamper</summary>
    public BinarySensorEntity AchterdeurContactSensorTamper => new(_haContext, "binary_sensor.achterdeur_contact_sensor_tamper");
    ///<summary>Audio Cloud connection</summary>
    public BinarySensorEntity AudioCloudConnection => new(_haContext, "binary_sensor.audio_cloud_connection");
    ///<summary>Overheated</summary>
    public BinarySensorEntity AudioOverheated => new(_haContext, "binary_sensor.audio_overheated");
    ///<summary>Audio Overbelast</summary>
    public BinarySensorEntity AudioOverloaded => new(_haContext, "binary_sensor.audio_overloaded");
    ///<summary>Computer Cloud connection</summary>
    public BinarySensorEntity ComputerCloudConnection => new(_haContext, "binary_sensor.computer_cloud_connection");
    ///<summary>Overheated</summary>
    public BinarySensorEntity ComputerOverheated => new(_haContext, "binary_sensor.computer_overheated");
    ///<summary>Computer Overbelast</summary>
    public BinarySensorEntity ComputerOverloaded => new(_haContext, "binary_sensor.computer_overloaded");
    ///<summary>Ding</summary>
    public BinarySensorEntity DeurbelDing2 => new(_haContext, "binary_sensor.deurbel_ding_2");
    ///<summary>Motion</summary>
    public BinarySensorEntity DeurbelMotion => new(_haContext, "binary_sensor.deurbel_motion");
    ///<summary>Droger en Vriezer Cloud connection</summary>
    public BinarySensorEntity DrogerEnVriezerCloudConnection => new(_haContext, "binary_sensor.droger_en_vriezer_cloud_connection");
    ///<summary>Droger en Vriezer Overbelast</summary>
    public BinarySensorEntity DrogerEnVriezerOverbelast => new(_haContext, "binary_sensor.droger_en_vriezer_overbelast");
    ///<summary>Overheated</summary>
    public BinarySensorEntity DrogerOverheated => new(_haContext, "binary_sensor.droger_overheated");
    ///<summary>Eettafel-L Cloud connection</summary>
    public BinarySensorEntity EettafelLCloudConnection => new(_haContext, "binary_sensor.eettafel_l_cloud_connection");
    ///<summary>Eettafel-L Overheated</summary>
    public BinarySensorEntity EettafelLOverheated => new(_haContext, "binary_sensor.eettafel_l_overheated");
    ///<summary>Eettafel-R Cloud connection</summary>
    public BinarySensorEntity EettafelRCloudConnection => new(_haContext, "binary_sensor.eettafel_r_cloud_connection");
    ///<summary>Eettafel-R Overheated</summary>
    public BinarySensorEntity EettafelROverheated => new(_haContext, "binary_sensor.eettafel_r_overheated");
    ///<summary>Tamper</summary>
    public BinarySensorEntity EmmeloordAlarmTamper => new(_haContext, "binary_sensor.emmeloord_alarm_tamper");
    ///<summary>Tamper</summary>
    public BinarySensorEntity EmmeloordBaseStationTamper => new(_haContext, "binary_sensor.emmeloord_base_station_tamper");
    ///<summary>Tamper</summary>
    public BinarySensorEntity EmmeloordRangeExtenderTamper => new(_haContext, "binary_sensor.emmeloord_range_extender_tamper");
    ///<summary>EMS Cloud connection</summary>
    public BinarySensorEntity EmsCloudConnection => new(_haContext, "binary_sensor.ems_cloud_connection");
    ///<summary>EMS Overbelast</summary>
    public BinarySensorEntity EmsOverbelast => new(_haContext, "binary_sensor.ems_overbelast");
    ///<summary>energy_prices_tomorrow</summary>
    public BinarySensorEntity EnergyPricesTomorrow => new(_haContext, "binary_sensor.energy_prices_tomorrow");
    ///<summary>Garage Cloud connection</summary>
    public BinarySensorEntity GarageCloudConnection => new(_haContext, "binary_sensor.garage_cloud_connection");
    ///<summary>Overheated</summary>
    public BinarySensorEntity GarageOverheated => new(_haContext, "binary_sensor.garage_overheated");
    ///<summary>Garage Overbelast</summary>
    public BinarySensorEntity GarageOverloaded => new(_haContext, "binary_sensor.garage_overloaded");
    public BinarySensorEntity KeukenMotionSensor => new(_haContext, "binary_sensor.keuken_motion_sensor");
    ///<summary>Tamper</summary>
    public BinarySensorEntity KeukenMotionSensorTamper => new(_haContext, "binary_sensor.keuken_motion_sensor_tamper");
    ///<summary>Lamp-Kantoor Cloud connection</summary>
    public BinarySensorEntity LampKantoorCloudConnection => new(_haContext, "binary_sensor.lamp_kantoor_cloud_connection");
    ///<summary>Lamp-Kantoor Overheated</summary>
    public BinarySensorEntity LampKantoorOverheated => new(_haContext, "binary_sensor.lamp_kantoor_overheated");
    ///<summary>Our home Circuit 0 Cooling Allowed</summary>
    public BinarySensorEntity OurHomeCircuit0CoolingAllowed => new(_haContext, "binary_sensor.our_home_circuit_0_cooling_allowed");
    ///<summary>Our home EEBUS Capable</summary>
    public BinarySensorEntity OurHomeEebusCapable => new(_haContext, "binary_sensor.our_home_eebus_capable");
    ///<summary>Our home EEBUS Enabled</summary>
    public BinarySensorEntity OurHomeEebusEnabled => new(_haContext, "binary_sensor.our_home_eebus_enabled");
    ///<summary>Our home Firmware Update Enabled</summary>
    public BinarySensorEntity OurHomeFirmwareUpdateEnabled => new(_haContext, "binary_sensor.our_home_firmware_update_enabled");
    ///<summary>Our home Firmware Update Required</summary>
    public BinarySensorEntity OurHomeFirmwareUpdateRequired => new(_haContext, "binary_sensor.our_home_firmware_update_required");
    ///<summary>Our home Online Status</summary>
    public BinarySensorEntity OurHomeOnlineStatus => new(_haContext, "binary_sensor.our_home_online_status");
    ///<summary>Our home Trouble Codes</summary>
    public BinarySensorEntity OurHomeTroubleCodes => new(_haContext, "binary_sensor.our_home_trouble_codes");
    ///<summary>Our home Zone Thuis (Circuit 0) Manual Cooling Active</summary>
    public BinarySensorEntity OurHomeZoneThuisCircuit0ManualCoolingActive => new(_haContext, "binary_sensor.our_home_zone_thuis_circuit_0_manual_cooling_active");
    ///<summary>Q7 Max Dweil bevestigd</summary>
    public BinarySensorEntity Q7MaxDweilBevestigd => new(_haContext, "binary_sensor.q7_max_dweil_bevestigd");
    ///<summary>Q7 Max Opladen</summary>
    public BinarySensorEntity Q7MaxOpladen => new(_haContext, "binary_sensor.q7_max_opladen");
    ///<summary>Q7 Max Schoonmaken</summary>
    public BinarySensorEntity Q7MaxSchoonmaken => new(_haContext, "binary_sensor.q7_max_schoonmaken");
    ///<summary>Q7 Max Waterbak geplaatst</summary>
    public BinarySensorEntity Q7MaxWaterbakGeplaatst => new(_haContext, "binary_sensor.q7_max_waterbak_geplaatst");
    ///<summary>Spotjes Verlichting Cloud connection</summary>
    public BinarySensorEntity SpotjesVerlichtingCloudConnection => new(_haContext, "binary_sensor.spotjes_verlichting_cloud_connection");
    ///<summary>Overheated</summary>
    public BinarySensorEntity SpotjesVerlichtingOverheated => new(_haContext, "binary_sensor.spotjes_verlichting_overheated");
    ///<summary>Spotjes Verlichting Overbelast</summary>
    public BinarySensorEntity SpotjesVerlichtingOverloaded => new(_haContext, "binary_sensor.spotjes_verlichting_overloaded");
    ///<summary>Motion</summary>
    public BinarySensorEntity ToetsenpaneelIngangMotion => new(_haContext, "binary_sensor.toetsenpaneel_ingang_motion");
    ///<summary>Tamper</summary>
    public BinarySensorEntity ToetsenpaneelIngangTamper => new(_haContext, "binary_sensor.toetsenpaneel_ingang_tamper");
    ///<summary>Motion</summary>
    public BinarySensorEntity TuinCameraMotion => new(_haContext, "binary_sensor.tuin_camera_motion");
    ///<summary>Tuinhuis verlichting  Cloud connection</summary>
    public BinarySensorEntity TuinhuisVerlichtingCloudConnection => new(_haContext, "binary_sensor.tuinhuis_verlichting_cloud_connection");
    ///<summary>Overheated</summary>
    public BinarySensorEntity TuinhuisVerlichtingOverheated => new(_haContext, "binary_sensor.tuinhuis_verlichting_overheated");
    ///<summary>Tuinhuis verlichting  Overbelast</summary>
    public BinarySensorEntity TuinhuisVerlichtingOverloaded => new(_haContext, "binary_sensor.tuinhuis_verlichting_overloaded");
    ///<summary>TV en Media Cloud connection</summary>
    public BinarySensorEntity TvEnMediaCloudConnection => new(_haContext, "binary_sensor.tv_en_media_cloud_connection");
    ///<summary>Overheated</summary>
    public BinarySensorEntity TvEnMediaOverheated => new(_haContext, "binary_sensor.tv_en_media_overheated");
    ///<summary>TV en Media Overbelast</summary>
    public BinarySensorEntity TvEnMediaOverloaded => new(_haContext, "binary_sensor.tv_en_media_overloaded");
    ///<summary>Vaatwasser  Cloud connection</summary>
    public BinarySensorEntity VaatwasserCloudConnection => new(_haContext, "binary_sensor.vaatwasser_cloud_connection");
    ///<summary>Overheated</summary>
    public BinarySensorEntity VaatwasserOverheated => new(_haContext, "binary_sensor.vaatwasser_overheated");
    ///<summary>Vaatwasser  Overbelast</summary>
    public BinarySensorEntity VaatwasserOverloaded => new(_haContext, "binary_sensor.vaatwasser_overloaded");
    public BinarySensorEntity Voordeur => new(_haContext, "binary_sensor.voordeur");
    public BinarySensorEntity VoordeurContactSensor => new(_haContext, "binary_sensor.voordeur_contact_sensor");
    ///<summary>Tamper</summary>
    public BinarySensorEntity VoordeurContactSensorTamper => new(_haContext, "binary_sensor.voordeur_contact_sensor_tamper");
    public BinarySensorEntity VoordeurMotionSensor2 => new(_haContext, "binary_sensor.voordeur_motion_sensor_2");
    ///<summary>Tamper</summary>
    public BinarySensorEntity VoordeurMotionSensorTamper2 => new(_haContext, "binary_sensor.voordeur_motion_sensor_tamper_2");
    ///<summary>Tamper</summary>
    public BinarySensorEntity VoordeurTamper => new(_haContext, "binary_sensor.voordeur_tamper");
    ///<summary>Wasmachine  Cloud connection</summary>
    public BinarySensorEntity WasmachineCloudConnection => new(_haContext, "binary_sensor.wasmachine_cloud_connection");
    ///<summary>Overheated</summary>
    public BinarySensorEntity WasmachineOverheated => new(_haContext, "binary_sensor.wasmachine_overheated");
    ///<summary>Wasmachine  Overbelast</summary>
    public BinarySensorEntity WasmachineOverloaded => new(_haContext, "binary_sensor.wasmachine_overloaded");
    ///<summary>Motion</summary>
    public BinarySensorEntity WoonkamerCameraMotion => new(_haContext, "binary_sensor.woonkamer_camera_motion");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all button entities currently registered (at runtime) in Home Assistant as ButtonEntity</summary>
    public IEnumerable<ButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("button.")).Select(e => new ButtonEntity(e));
    ///<summary>Badkamer Meubel Identificeren</summary>
    public ButtonEntity BadkamerMeubelIdentificeren => new(_haContext, "button.badkamer_meubel_identificeren");
    ///<summary>Take Snapshot</summary>
    public ButtonEntity DeurbelTakeSnapshot => new(_haContext, "button.deurbel_take_snapshot");
    ///<summary>Home Cinema Herstarten</summary>
    public ButtonEntity HomeCinemaHerstarten => new(_haContext, "button.home_cinema_herstarten");
    ///<summary>Home Cinema Sync time</summary>
    public ButtonEntity HomeCinemaSyncTime => new(_haContext, "button.home_cinema_sync_time");
    ///<summary>IKEA of Sweden Remote Control N2 Identificeren</summary>
    public ButtonEntity IkeaOfSwedenRemoteControlN2Identificeren => new(_haContext, "button.ikea_of_sweden_remote_control_n2_identificeren");
    ///<summary>Take Snapshot</summary>
    public ButtonEntity TuinCameraTakeSnapshot => new(_haContext, "button.tuin_camera_take_snapshot");
    ///<summary>Take Snapshot</summary>
    public ButtonEntity WoonkamerCameraTakeSnapshot => new(_haContext, "button.woonkamer_camera_take_snapshot");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all calendar entities currently registered (at runtime) in Home Assistant as CalendarEntity</summary>
    public IEnumerable<CalendarEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("calendar.")).Select(e => new CalendarEntity(e));
    ///<summary>Circulating Water in Our home Domestic Hot Water 0</summary>
    public CalendarEntity CirculatingWaterInOurHomeDomesticHotWater0 => new(_haContext, "calendar.circulating_water_in_our_home_domestic_hot_water_0");
    ///<summary>Our home Domestic Hot Water 0</summary>
    public CalendarEntity OurHomeDomesticHotWater0 => new(_haContext, "calendar.our_home_domestic_hot_water_0");
    ///<summary>Our home Zone Thuis (Circuit 0)</summary>
    public CalendarEntity OurHomeZoneThuisCircuit0 => new(_haContext, "calendar.our_home_zone_thuis_circuit_0");
    ///<summary>Our home Zone Thuis (Circuit 0)</summary>
    public CalendarEntity OurHomeZoneThuisCircuit02 => new(_haContext, "calendar.our_home_zone_thuis_circuit_0_2");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all camera entities currently registered (at runtime) in Home Assistant as CameraEntity</summary>
    public IEnumerable<CameraEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("camera.")).Select(e => new CameraEntity(e));
    ///<summary>Buienradar</summary>
    public CameraEntity Buienradar => new(_haContext, "camera.buienradar");
    ///<summary>Snapshot</summary>
    public CameraEntity DeurbelSnapshot => new(_haContext, "camera.deurbel_snapshot");
    ///<summary>Tuin Laatste opname</summary>
    public CameraEntity Tuin => new(_haContext, "camera.tuin");
    ///<summary>Tuin</summary>
    public CameraEntity TuinCameraSnapshot => new(_haContext, "camera.tuin_camera_snapshot");
    ///<summary>Tuin Live weergave</summary>
    public CameraEntity TuinLiveWeergave => new(_haContext, "camera.tuin_live_weergave");
    ///<summary>Voordeur Laatste opname</summary>
    public CameraEntity Voordeur => new(_haContext, "camera.voordeur");
    ///<summary>Voordeur Live weergave</summary>
    public CameraEntity VoordeurLiveWeergave => new(_haContext, "camera.voordeur_live_weergave");
    ///<summary>Woonkamer Laatste opname</summary>
    public CameraEntity Woonkamer => new(_haContext, "camera.woonkamer");
    ///<summary>Snapshot</summary>
    public CameraEntity WoonkamerCameraSnapshot => new(_haContext, "camera.woonkamer_camera_snapshot");
    ///<summary>Woonkamer Live weergave</summary>
    public CameraEntity WoonkamerLiveWeergave => new(_haContext, "camera.woonkamer_live_weergave");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all climate entities currently registered (at runtime) in Home Assistant as ClimateEntity</summary>
    public IEnumerable<ClimateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("climate.")).Select(e => new ClimateEntity(e));
    public ClimateEntity GreeClimate => new(_haContext, "climate.gree_climate");
    ///<summary>Our home Zone Thuis (Circuit 0) Climate</summary>
    public ClimateEntity OurHomeZoneThuisCircuit0Climate => new(_haContext, "climate.our_home_zone_thuis_circuit_0_climate");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all conversation entities currently registered (at runtime) in Home Assistant as ConversationEntity</summary>
    public IEnumerable<ConversationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("conversation.")).Select(e => new ConversationEntity(e));
    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class DatetimeEntities
{
    private readonly IHaContext _haContext;
    public DatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all datetime entities currently registered (at runtime) in Home Assistant as DatetimeEntity</summary>
    public IEnumerable<DatetimeEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("datetime.")).Select(e => new DatetimeEntity(e));
    ///<summary>Our home Away Mode End Date</summary>
    public DatetimeEntity OurHomeAwayModeEndDate => new(_haContext, "datetime.our_home_away_mode_end_date");
    ///<summary>Our home Away Mode Start Date</summary>
    public DatetimeEntity OurHomeAwayModeStartDate => new(_haContext, "datetime.our_home_away_mode_start_date");
    ///<summary>Our home Domestic Hot Water 0 Legionella Protection Temperature Reached</summary>
    public DatetimeEntity OurHomeDomesticHotWater0LegionellaProtectionTemperatureReached => new(_haContext, "datetime.our_home_domestic_hot_water_0_legionella_protection_temperature_reached");
    ///<summary>Our home Manual Cooling End Date</summary>
    public DatetimeEntity OurHomeManualCoolingEndDate => new(_haContext, "datetime.our_home_manual_cooling_end_date");
    ///<summary>Our home Manual Cooling Start Date</summary>
    public DatetimeEntity OurHomeManualCoolingStartDate => new(_haContext, "datetime.our_home_manual_cooling_start_date");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all device_tracker entities currently registered (at runtime) in Home Assistant as DeviceTrackerEntity</summary>
    public IEnumerable<DeviceTrackerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("device_tracker.")).Select(e => new DeviceTrackerEntity(e));
    ///<summary>iPhone Mark</summary>
    public DeviceTrackerEntity IphoneMark2 => new(_haContext, "device_tracker.iphone_mark_2");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_boolean entities currently registered (at runtime) in Home Assistant as InputBooleanEntity</summary>
    public IEnumerable<InputBooleanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_boolean.")).Select(e => new InputBooleanEntity(e));
    ///<summary>Bath</summary>
    public InputBooleanEntity Bath => new(_haContext, "input_boolean.bath");
    ///<summary>netdaemon_net_daemon_apps_apps_energy_appliances</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsEnergyAppliances => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_energy_appliances");
    ///<summary>netdaemon_net_daemon_apps_apps_energy_battery</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsEnergyBattery => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_energy_battery");
    ///<summary>netdaemon_net_daemon_apps_apps_energy_water_heater</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsEnergyWaterHeater => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_energy_water_heater");
    ///<summary>netdaemon_net_daemon_apps_apps_vacation_alarm</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsVacationAlarm => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_vacation_alarm");
}

public partial class NotifyEntities
{
    private readonly IHaContext _haContext;
    public NotifyEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all notify entities currently registered (at runtime) in Home Assistant as NotifyEntity</summary>
    public IEnumerable<NotifyEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("notify.")).Select(e => new NotifyEntity(e));
    ///<summary>tibber</summary>
    public NotifyEntity Tibber => new(_haContext, "notify.tibber");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all number entities currently registered (at runtime) in Home Assistant as NumberEntity</summary>
    public IEnumerable<NumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("number.")).Select(e => new NumberEntity(e));
    ///<summary>Audio Stroombeveiliging</summary>
    public NumberEntity AudioPowerProtection => new(_haContext, "number.audio_power_protection");
    ///<summary>Audio Turn off in</summary>
    public NumberEntity AudioTurnOffIn => new(_haContext, "number.audio_turn_off_in");
    ///<summary>Badkamer Meubel Aan/uit transitietijd</summary>
    public NumberEntity BadkamerMeubelAanUitTransitietijd => new(_haContext, "number.badkamer_meubel_aan_uit_transitietijd");
    ///<summary>Badkamer Meubel Huidig niveau bij opstarten</summary>
    public NumberEntity BadkamerMeubelHuidigNiveauBijOpstarten => new(_haContext, "number.badkamer_meubel_huidig_niveau_bij_opstarten");
    ///<summary>Badkamer Meubel Inschakelniveau</summary>
    public NumberEntity BadkamerMeubelInschakelniveau => new(_haContext, "number.badkamer_meubel_inschakelniveau");
    ///<summary>Chime Keuken Volume</summary>
    public NumberEntity BenedenVolume => new(_haContext, "number.beneden_volume");
    ///<summary>Computer Stroombeveiliging</summary>
    public NumberEntity ComputerPowerProtection => new(_haContext, "number.computer_power_protection");
    ///<summary>Computer Turn off in</summary>
    public NumberEntity ComputerTurnOffIn => new(_haContext, "number.computer_turn_off_in");
    ///<summary>Ding Duration</summary>
    public NumberEntity DeurbelDingDuration => new(_haContext, "number.deurbel_ding_duration");
    ///<summary>Motion Duration</summary>
    public NumberEntity DeurbelMotionDuration => new(_haContext, "number.deurbel_motion_duration");
    ///<summary>Snapshot Interval</summary>
    public NumberEntity DeurbelSnapshotInterval => new(_haContext, "number.deurbel_snapshot_interval");
    ///<summary>Droger en Vriezer Stroombeveiliging</summary>
    public NumberEntity DrogerEnVriezerStroombeveiliging => new(_haContext, "number.droger_en_vriezer_stroombeveiliging");
    ///<summary>Droger en Vriezer Turn off in</summary>
    public NumberEntity DrogerEnVriezerTurnOffIn => new(_haContext, "number.droger_en_vriezer_turn_off_in");
    ///<summary>Volume</summary>
    public NumberEntity EmmeloordBaseStationVolume => new(_haContext, "number.emmeloord_base_station_volume");
    ///<summary>EMS Stroombeveiliging</summary>
    public NumberEntity EmsStroombeveiliging => new(_haContext, "number.ems_stroombeveiliging");
    ///<summary>EMS Turn off in</summary>
    public NumberEntity EmsTurnOffIn => new(_haContext, "number.ems_turn_off_in");
    ///<summary>Garage Stroombeveiliging</summary>
    public NumberEntity GaragePowerProtection => new(_haContext, "number.garage_power_protection");
    ///<summary>Garage Turn off in</summary>
    public NumberEntity GarageTurnOffIn => new(_haContext, "number.garage_turn_off_in");
    ///<summary>Snooze Minutes</summary>
    public NumberEntity KeukenChimeSnoozeMinutes => new(_haContext, "number.keuken_chime_snooze_minutes");
    ///<summary>Volume</summary>
    public NumberEntity KeukenChimeVolume => new(_haContext, "number.keuken_chime_volume");
    ///<summary>Our home Circuit 0 Heat Demand Limited by Outside Temperature</summary>
    public NumberEntity OurHomeCircuit0HeatDemandLimitedByOutsideTemperature => new(_haContext, "number.our_home_circuit_0_heat_demand_limited_by_outside_temperature");
    ///<summary>Our home Circuit 0 Heating Curve</summary>
    public NumberEntity OurHomeCircuit0HeatingCurve => new(_haContext, "number.our_home_circuit_0_heating_curve");
    ///<summary>Our home Circuit 0 Min Flow Temperature Setpoint</summary>
    public NumberEntity OurHomeCircuit0MinFlowTemperatureSetpoint => new(_haContext, "number.our_home_circuit_0_min_flow_temperature_setpoint");
    ///<summary>Our home Holiday Duration Remaining</summary>
    public NumberEntity OurHomeHolidayDurationRemaining => new(_haContext, "number.our_home_holiday_duration_remaining");
    ///<summary>Our home Manual Cooling Duration</summary>
    public NumberEntity OurHomeManualCoolingDuration => new(_haContext, "number.our_home_manual_cooling_duration");
    ///<summary>Our home Zone Thuis (Circuit 0) Quick Veto Duration</summary>
    public NumberEntity OurHomeZoneThuisCircuit0QuickVetoDuration => new(_haContext, "number.our_home_zone_thuis_circuit_0_quick_veto_duration");
    ///<summary>Power Usage</summary>
    public NumberEntity PowerUsage => new(_haContext, "number.power_usage");
    ///<summary>Q7 Max Volume</summary>
    public NumberEntity Q7MaxVolume => new(_haContext, "number.q7_max_volume");
    ///<summary>Spotjes Verlichting Stroombeveiliging</summary>
    public NumberEntity SpotjesVerlichtingPowerProtection => new(_haContext, "number.spotjes_verlichting_power_protection");
    ///<summary>Spotjes Verlichting Turn off in</summary>
    public NumberEntity SpotjesVerlichtingTurnOffIn => new(_haContext, "number.spotjes_verlichting_turn_off_in");
    ///<summary>Volume</summary>
    public NumberEntity ToetsenpaneelIngangVolume => new(_haContext, "number.toetsenpaneel_ingang_volume");
    ///<summary>Motion Duration</summary>
    public NumberEntity TuinCameraMotionDuration => new(_haContext, "number.tuin_camera_motion_duration");
    ///<summary>Snapshot Interval</summary>
    public NumberEntity TuinCameraSnapshotInterval => new(_haContext, "number.tuin_camera_snapshot_interval");
    ///<summary>Tuin Volume</summary>
    public NumberEntity TuinVolume => new(_haContext, "number.tuin_volume");
    ///<summary>Tuinhuis verlichting  Stroombeveiliging</summary>
    public NumberEntity TuinhuisVerlichtingPowerProtection => new(_haContext, "number.tuinhuis_verlichting_power_protection");
    ///<summary>Tuinhuis verlichting  Turn off in</summary>
    public NumberEntity TuinhuisVerlichtingTurnOffIn => new(_haContext, "number.tuinhuis_verlichting_turn_off_in");
    ///<summary>TV en Media Stroombeveiliging</summary>
    public NumberEntity TvEnMediaPowerProtection => new(_haContext, "number.tv_en_media_power_protection");
    ///<summary>TV en Media Turn off in</summary>
    public NumberEntity TvEnMediaTurnOffIn => new(_haContext, "number.tv_en_media_turn_off_in");
    ///<summary>Vaatwasser  Stroombeveiliging</summary>
    public NumberEntity VaatwasserPowerProtection => new(_haContext, "number.vaatwasser_power_protection");
    ///<summary>Vaatwasser  Turn off in</summary>
    public NumberEntity VaatwasserTurnOffIn => new(_haContext, "number.vaatwasser_turn_off_in");
    ///<summary>Voordeur Volume</summary>
    public NumberEntity VoordeurVolume => new(_haContext, "number.voordeur_volume");
    ///<summary>Wasmachine  Stroombeveiliging</summary>
    public NumberEntity WasmachinePowerProtection => new(_haContext, "number.wasmachine_power_protection");
    ///<summary>Wasmachine  Turn off in</summary>
    public NumberEntity WasmachineTurnOffIn => new(_haContext, "number.wasmachine_turn_off_in");
    ///<summary>Motion Duration</summary>
    public NumberEntity WoonkamerCameraMotionDuration => new(_haContext, "number.woonkamer_camera_motion_duration");
    ///<summary>Snapshot Interval</summary>
    public NumberEntity WoonkamerCameraSnapshotInterval => new(_haContext, "number.woonkamer_camera_snapshot_interval");
    ///<summary>Woonkamer Volume</summary>
    public NumberEntity WoonkamerVolume => new(_haContext, "number.woonkamer_volume");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all person entities currently registered (at runtime) in Home Assistant as PersonEntity</summary>
    public IEnumerable<PersonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("person.")).Select(e => new PersonEntity(e));
    ///<summary>Marjolein Vooijs</summary>
    public PersonEntity MarjoleinVooijs => new(_haContext, "person.marjolein_vooijs");
    ///<summary>Mark Bovee</summary>
    public PersonEntity MarkBovee => new(_haContext, "person.mark_bovee");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all remote entities currently registered (at runtime) in Home Assistant as RemoteEntity</summary>
    public IEnumerable<RemoteEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("remote.")).Select(e => new RemoteEntity(e));
    ///<summary>Buiten-TV</summary>
    public RemoteEntity BuitenTv => new(_haContext, "remote.buiten_tv");
    ///<summary>Chromecast Huiskamer </summary>
    public RemoteEntity ChromecastHuiskamer => new(_haContext, "remote.chromecast_huiskamer");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all scene entities currently registered (at runtime) in Home Assistant as SceneEntity</summary>
    public IEnumerable<SceneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("scene.")).Select(e => new SceneEntity(e));
    ///<summary>Apparatuur</summary>
    public SceneEntity Apparatuur => new(_haContext, "scene.apparatuur");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all select entities currently registered (at runtime) in Home Assistant as SelectEntity</summary>
    public IEnumerable<SelectEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("select.")).Select(e => new SelectEntity(e));
    ///<summary>Bypass Mode</summary>
    public SelectEntity AchterdeurContactSensorBypassMode => new(_haContext, "select.achterdeur_contact_sensor_bypass_mode");
    ///<summary>Chirp Tone</summary>
    public SelectEntity AchterdeurContactSensorChirpTone => new(_haContext, "select.achterdeur_contact_sensor_chirp_tone");
    ///<summary>Badkamer Meubel Opstartgedrag</summary>
    public SelectEntity BadkamerMeubelOpstartgedrag => new(_haContext, "select.badkamer_meubel_opstartgedrag");
    ///<summary>Event Select</summary>
    public SelectEntity DeurbelEventSelect => new(_haContext, "select.deurbel_event_select");
    ///<summary>Snapshot Mode</summary>
    public SelectEntity DeurbelSnapshotMode => new(_haContext, "select.deurbel_snapshot_mode");
    ///<summary>Eettafel-L Light preset</summary>
    public SelectEntity EettafelLLightPreset => new(_haContext, "select.eettafel_l_light_preset");
    ///<summary>Eettafel-R Light preset</summary>
    public SelectEntity EettafelRLightPreset => new(_haContext, "select.eettafel_r_light_preset");
    ///<summary>Bypass Mode</summary>
    public SelectEntity KeukenMotionSensorBypassMode => new(_haContext, "select.keuken_motion_sensor_bypass_mode");
    ///<summary>Chirp Tone</summary>
    public SelectEntity KeukenMotionSensorChirpTone => new(_haContext, "select.keuken_motion_sensor_chirp_tone");
    ///<summary>Lamp-Kantoor Light preset</summary>
    public SelectEntity LampKantoorLightPreset => new(_haContext, "select.lamp_kantoor_light_preset");
    ///<summary>Q7 Max Dock Lege modus</summary>
    public SelectEntity Q7MaxDockLegeModus => new(_haContext, "select.q7_max_dock_lege_modus");
    ///<summary>Q7 Max Geselecteerde kaart</summary>
    public SelectEntity Q7MaxGeselecteerdeKaart => new(_haContext, "select.q7_max_geselecteerde_kaart");
    ///<summary>Q7 Max Intensiteit van dweilen</summary>
    public SelectEntity Q7MaxIntensiteitVanDweilen => new(_haContext, "select.q7_max_intensiteit_van_dweilen");
    ///<summary>Event Select</summary>
    public SelectEntity TuinCameraEventSelect => new(_haContext, "select.tuin_camera_event_select");
    ///<summary>Snapshot Mode</summary>
    public SelectEntity TuinCameraSnapshotMode => new(_haContext, "select.tuin_camera_snapshot_mode");
    ///<summary>Bypass Mode</summary>
    public SelectEntity VoordeurBypassMode => new(_haContext, "select.voordeur_bypass_mode");
    ///<summary>Chirp Tone</summary>
    public SelectEntity VoordeurChirpTone => new(_haContext, "select.voordeur_chirp_tone");
    ///<summary>Bypass Mode</summary>
    public SelectEntity VoordeurContactSensorBypassMode => new(_haContext, "select.voordeur_contact_sensor_bypass_mode");
    ///<summary>Chirp Tone</summary>
    public SelectEntity VoordeurContactSensorChirpTone => new(_haContext, "select.voordeur_contact_sensor_chirp_tone");
    ///<summary>Bypass Mode</summary>
    public SelectEntity VoordeurMotionSensorBypassMode2 => new(_haContext, "select.voordeur_motion_sensor_bypass_mode_2");
    ///<summary>Chirp Tone</summary>
    public SelectEntity VoordeurMotionSensorChirpTone2 => new(_haContext, "select.voordeur_motion_sensor_chirp_tone_2");
    ///<summary>Event Select</summary>
    public SelectEntity WoonkamerCameraEventSelect => new(_haContext, "select.woonkamer_camera_event_select");
    ///<summary>Snapshot Mode</summary>
    public SelectEntity WoonkamerCameraSnapshotMode => new(_haContext, "select.woonkamer_camera_snapshot_mode");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.")).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all non-numeric sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAllNonNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && !(e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all numeric sensor entities currently registered (at runtime) in Home Assistant as NumericSensorEntity</summary>
    public IEnumerable<NumericSensorEntity> EnumerateAllNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && (e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new NumericSensorEntity(e));
    ///<summary>Info</summary>
    public SensorEntity AchterdeurContactSensorInfo => new(_haContext, "sensor.achterdeur_contact_sensor_info");
    ///<summary>Audio Auto-off at</summary>
    public SensorEntity AudioAutoOffAt => new(_haContext, "sensor.audio_auto_off_at");
    ///<summary>Audio Signaalniveau</summary>
    public SensorEntity AudioSignaalniveau => new(_haContext, "sensor.audio_signaalniveau");
    ///<summary>Backup Backup Manager state</summary>
    public SensorEntity BackupBackupManagerState => new(_haContext, "sensor.backup_backup_manager_state");
    ///<summary>Backup Last attempted automatic backup</summary>
    public SensorEntity BackupLastAttemptedAutomaticBackup => new(_haContext, "sensor.backup_last_attempted_automatic_backup");
    ///<summary>Backup Last successful automatic backup</summary>
    public SensorEntity BackupLastSuccessfulAutomaticBackup => new(_haContext, "sensor.backup_last_successful_automatic_backup");
    ///<summary>Backup Next scheduled automatic backup</summary>
    public SensorEntity BackupNextScheduledAutomaticBackup => new(_haContext, "sensor.backup_next_scheduled_automatic_backup");
    ///<summary>Battery B2N0200J2403E01735 Bat Soh</summary>
    public SensorEntity BatteryB2n0200j2403e01735BatSoh => new(_haContext, "sensor.battery_b2n0200j2403e01735_bat_soh");
    ///<summary>Battery B2U4250J2511E06231 Bat Soh</summary>
    public SensorEntity BatteryB2u4250j2511e06231BatSoh => new(_haContext, "sensor.battery_b2u4250j2511e06231_bat_soh");
    ///<summary>Battery B2U4250J2511E06243 Bat Soh</summary>
    public SensorEntity BatteryB2u4250j2511e06243BatSoh => new(_haContext, "sensor.battery_b2u4250j2511e06243_bat_soh");
    ///<summary>Battery B2U4250J2511E06244 Bat Soh</summary>
    public SensorEntity BatteryB2u4250j2511e06244BatSoh => new(_haContext, "sensor.battery_b2u4250j2511e06244_bat_soh");
    ///<summary>Battery B2U4250J2511E06245 Bat Soh</summary>
    public SensorEntity BatteryB2u4250j2511e06245BatSoh => new(_haContext, "sensor.battery_b2u4250j2511e06245_bat_soh");
    ///<summary>Battery B2U4250J2511E06247 Bat Soh</summary>
    public SensorEntity BatteryB2u4250j2511e06247BatSoh => new(_haContext, "sensor.battery_b2u4250j2511e06247_bat_soh");
    ///<summary>Computer Auto-off at</summary>
    public SensorEntity ComputerAutoOffAt => new(_haContext, "sensor.computer_auto_off_at");
    ///<summary>Computer Signaalniveau</summary>
    public SensorEntity ComputerSignaalniveau => new(_haContext, "sensor.computer_signaalniveau");
    ///<summary>Info</summary>
    public SensorEntity DeurbelInfo3 => new(_haContext, "sensor.deurbel_info_3");
    ///<summary>Droger en Vriezer Auto-off at</summary>
    public SensorEntity DrogerEnVriezerAutoOffAt => new(_haContext, "sensor.droger_en_vriezer_auto_off_at");
    ///<summary>Droger en Vriezer Signaalniveau</summary>
    public SensorEntity DrogerEnVriezerSignaalniveau => new(_haContext, "sensor.droger_en_vriezer_signaalniveau");
    ///<summary>Echo Pop Mark next Alarm</summary>
    public SensorEntity EchoPopMarkNextAlarm => new(_haContext, "sensor.echo_pop_mark_next_alarm");
    ///<summary>Echo Pop Mark next Reminder</summary>
    public SensorEntity EchoPopMarkNextReminder => new(_haContext, "sensor.echo_pop_mark_next_reminder");
    ///<summary>Echo Pop Mark next Timer</summary>
    public SensorEntity EchoPopMarkNextTimer => new(_haContext, "sensor.echo_pop_mark_next_timer");
    ///<summary>Eettafel-L Signaalniveau</summary>
    public SensorEntity EettafelLSignaalniveau => new(_haContext, "sensor.eettafel_l_signaalniveau");
    ///<summary>Eettafel-R Signaalniveau</summary>
    public SensorEntity EettafelRSignaalniveau => new(_haContext, "sensor.eettafel_r_signaalniveau");
    ///<summary>Electricity Meter Actief tarief</summary>
    public SensorEntity ElectricityMeterActiveTariff => new(_haContext, "sensor.electricity_meter_active_tariff");
    ///<summary>Info</summary>
    public SensorEntity EmmeloordAlarmInfo => new(_haContext, "sensor.emmeloord_alarm_info");
    ///<summary>Info</summary>
    public SensorEntity EmmeloordBaseStationInfo => new(_haContext, "sensor.emmeloord_base_station_info");
    ///<summary>Info</summary>
    public SensorEntity EmmeloordRangeExtenderInfo => new(_haContext, "sensor.emmeloord_range_extender_info");
    ///<summary>EMS Auto-off at</summary>
    public SensorEntity EmsAutoOffAt => new(_haContext, "sensor.ems_auto_off_at");
    ///<summary>EMS Signaalniveau</summary>
    public SensorEntity EmsSignaalniveau => new(_haContext, "sensor.ems_signaalniveau");
    ///<summary>Garage Auto-off at</summary>
    public SensorEntity GarageAutoOffAt => new(_haContext, "sensor.garage_auto_off_at");
    ///<summary>Garage Signaalniveau</summary>
    public SensorEntity GarageSignaalniveau => new(_haContext, "sensor.garage_signaalniveau");
    ///<summary>Gedetailleerde staat</summary>
    public SensorEntity GedetailleerdeStaat => new(_haContext, "sensor.gedetailleerde_staat");
    ///<summary>Gedetailleerde staat 1d</summary>
    public SensorEntity GedetailleerdeStaat1d => new(_haContext, "sensor.gedetailleerde_staat_1d");
    ///<summary>Inverter HST2083J2446E06861 Today Alarm Num</summary>
    public SensorEntity InverterHst2083j2446e06861TodayAlarmNum => new(_haContext, "sensor.inverter_hst2083j2446e06861_today_alarm_num");
    ///<summary>iPhone Mark App Version</summary>
    public SensorEntity IphoneMarkAppVersion => new(_haContext, "sensor.iphone_mark_app_version");
    ///<summary>iPhone Mark Battery State</summary>
    public SensorEntity IphoneMarkBatteryState2 => new(_haContext, "sensor.iphone_mark_battery_state_2");
    ///<summary>iPhone Mark BSSID</summary>
    public SensorEntity IphoneMarkBssid2 => new(_haContext, "sensor.iphone_mark_bssid_2");
    ///<summary>iPhone Mark Connection Type</summary>
    public SensorEntity IphoneMarkConnectionType2 => new(_haContext, "sensor.iphone_mark_connection_type_2");
    ///<summary>iPhone Mark Geocoded Location</summary>
    public SensorEntity IphoneMarkGeocodedLocation2 => new(_haContext, "sensor.iphone_mark_geocoded_location_2");
    ///<summary>iPhone Mark Last Update Trigger</summary>
    public SensorEntity IphoneMarkLastUpdateTrigger2 => new(_haContext, "sensor.iphone_mark_last_update_trigger_2");
    ///<summary>iPhone Mark Location permission</summary>
    public SensorEntity IphoneMarkLocationPermission => new(_haContext, "sensor.iphone_mark_location_permission");
    ///<summary>iPhone Mark SIM 1</summary>
    public SensorEntity IphoneMarkSim12 => new(_haContext, "sensor.iphone_mark_sim_1_2");
    ///<summary>iPhone Mark SIM 2</summary>
    public SensorEntity IphoneMarkSim22 => new(_haContext, "sensor.iphone_mark_sim_2_2");
    ///<summary>iPhone Mark SSID</summary>
    public SensorEntity IphoneMarkSsid2 => new(_haContext, "sensor.iphone_mark_ssid_2");
    ///<summary>John Daltonhage 7 Tijdstip van maximaal uurverbruik</summary>
    public SensorEntity JohnDaltonhage7TijdstipVanMaximaalUurverbruik => new(_haContext, "sensor.john_daltonhage_7_tijdstip_van_maximaal_uurverbruik");
    ///<summary>Info</summary>
    public SensorEntity KeukenChimeInfo2 => new(_haContext, "sensor.keuken_chime_info_2");
    ///<summary>Info</summary>
    public SensorEntity KeukenMotionSensorInfo => new(_haContext, "sensor.keuken_motion_sensor_info");
    ///<summary>Lamp-Kantoor Signaalniveau</summary>
    public SensorEntity LampKantoorSignaalniveau => new(_haContext, "sensor.lamp_kantoor_signaalniveau");
    ///<summary>LG OLED TV next Alarm</summary>
    public SensorEntity LgOledTvNextAlarm => new(_haContext, "sensor.lg_oled_tv_next_alarm");
    ///<summary>LG OLED TV next Reminder</summary>
    public SensorEntity LgOledTvNextReminder => new(_haContext, "sensor.lg_oled_tv_next_reminder");
    ///<summary>LG OLED TV next Timer</summary>
    public SensorEntity LgOledTvNextTimer => new(_haContext, "sensor.lg_oled_tv_next_timer");
    ///<summary>Mark&apos;s 2nd WiiM Ultra next Alarm</summary>
    public SensorEntity MarkS2ndWiimUltraNextAlarm => new(_haContext, "sensor.mark_s_2nd_wiim_ultra_next_alarm");
    ///<summary>Mark&apos;s 2nd WiiM Ultra next Reminder</summary>
    public SensorEntity MarkS2ndWiimUltraNextReminder => new(_haContext, "sensor.mark_s_2nd_wiim_ultra_next_reminder");
    ///<summary>Mark&apos;s 2nd WiiM Ultra next Timer</summary>
    public SensorEntity MarkS2ndWiimUltraNextTimer => new(_haContext, "sensor.mark_s_2nd_wiim_ultra_next_timer");
    ///<summary>Mark&apos;s Bose QuietComfort 35 II next Alarm</summary>
    public SensorEntity MarkSBoseQuietcomfort35IiNextAlarm => new(_haContext, "sensor.mark_s_bose_quietcomfort_35_ii_next_alarm");
    ///<summary>Mark&apos;s Bose QuietComfort 35 II next Timer</summary>
    public SensorEntity MarkSBoseQuietcomfort35IiNextTimer => new(_haContext, "sensor.mark_s_bose_quietcomfort_35_ii_next_timer");
    ///<summary>Mark&apos;s Echo Dot next Alarm</summary>
    public SensorEntity MarkSEchoDotNextAlarm => new(_haContext, "sensor.mark_s_echo_dot_next_alarm");
    ///<summary>Mark&apos;s Echo Dot next Reminder</summary>
    public SensorEntity MarkSEchoDotNextReminder => new(_haContext, "sensor.mark_s_echo_dot_next_reminder");
    ///<summary>Mark&apos;s Echo Dot next Timer</summary>
    public SensorEntity MarkSEchoDotNextTimer => new(_haContext, "sensor.mark_s_echo_dot_next_timer");
    ///<summary>Mark&apos;s Echo Show next Alarm</summary>
    public SensorEntity MarkSEchoShowNextAlarm => new(_haContext, "sensor.mark_s_echo_show_next_alarm");
    ///<summary>Mark&apos;s Echo Show next Reminder</summary>
    public SensorEntity MarkSEchoShowNextReminder => new(_haContext, "sensor.mark_s_echo_show_next_reminder");
    ///<summary>Mark&apos;s Echo Show next Timer</summary>
    public SensorEntity MarkSEchoShowNextTimer => new(_haContext, "sensor.mark_s_echo_show_next_timer");
    ///<summary>Mark&apos;s WiiM Ultra next Alarm</summary>
    public SensorEntity MarkSWiimUltraNextAlarm => new(_haContext, "sensor.mark_s_wiim_ultra_next_alarm");
    ///<summary>Mark&apos;s WiiM Ultra next Reminder</summary>
    public SensorEntity MarkSWiimUltraNextReminder => new(_haContext, "sensor.mark_s_wiim_ultra_next_reminder");
    ///<summary>Mark&apos;s WiiM Ultra next Timer</summary>
    public SensorEntity MarkSWiimUltraNextTimer => new(_haContext, "sensor.mark_s_wiim_ultra_next_timer");
    ///<summary>neerslag_buienalarm_regen_data</summary>
    public SensorEntity NeerslagBuienalarmRegenData => new(_haContext, "sensor.neerslag_buienalarm_regen_data");
    ///<summary>neerslag_buienradar_regen_data</summary>
    public SensorEntity NeerslagBuienradarRegenData => new(_haContext, "sensor.neerslag_buienradar_regen_data");
    ///<summary>Our home Circuit 0 Heating Curve</summary>
    public SensorEntity OurHomeCircuit0HeatingCurve => new(_haContext, "sensor.our_home_circuit_0_heating_curve");
    ///<summary>Our home Circuit 0 State</summary>
    public SensorEntity OurHomeCircuit0State => new(_haContext, "sensor.our_home_circuit_0_state");
    ///<summary>Our home Device 0 aroTHERM Heating Energy Efficiency</summary>
    public SensorEntity OurHomeDevice0ArothermHeatingEnergyEfficiency => new(_haContext, "sensor.our_home_device_0_arotherm_heating_energy_efficiency");
    ///<summary>Our home Device 1 Hydraulic Station Heating Energy Efficiency</summary>
    public SensorEntity OurHomeDevice1HydraulicStationHeatingEnergyEfficiency => new(_haContext, "sensor.our_home_device_1_hydraulic_station_heating_energy_efficiency");
    ///<summary>Our home Domestic Hot Water 0 Current Special Function</summary>
    public SensorEntity OurHomeDomesticHotWater0CurrentSpecialFunction => new(_haContext, "sensor.our_home_domestic_hot_water_0_current_special_function");
    ///<summary>Our home Domestic Hot Water 0 Operation Mode</summary>
    public SensorEntity OurHomeDomesticHotWater0OperationMode => new(_haContext, "sensor.our_home_domestic_hot_water_0_operation_mode");
    ///<summary>Our home Firmware Version</summary>
    public SensorEntity OurHomeFirmwareVersion => new(_haContext, "sensor.our_home_firmware_version");
    ///<summary>Our home Heating Energy Efficiency</summary>
    public SensorEntity OurHomeHeatingEnergyEfficiency => new(_haContext, "sensor.our_home_heating_energy_efficiency");
    ///<summary>Our home Zone Thuis (Circuit 0) Current Special Function</summary>
    public SensorEntity OurHomeZoneThuisCircuit0CurrentSpecialFunction => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_current_special_function");
    ///<summary>Our home Zone Thuis (Circuit 0) Heating Operating Mode</summary>
    public SensorEntity OurHomeZoneThuisCircuit0HeatingOperatingMode => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_heating_operating_mode");
    ///<summary>Our home Zone Thuis (Circuit 0) Heating State</summary>
    public SensorEntity OurHomeZoneThuisCircuit0HeatingState => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_heating_state");
    ///<summary>Plant Markbovee last Upload Time</summary>
    public SensorEntity PlantMarkboveeLastUploadTime => new(_haContext, "sensor.plant_markbovee_last_upload_time");
    ///<summary>Plant Markbovee Status</summary>
    public SensorEntity PlantMarkboveeStatus => new(_haContext, "sensor.plant_markbovee_status");
    ///<summary>Solar production forecast Tijdstip hoogste vermogenspiek - vandaag</summary>
    public SensorEntity PowerHighestPeakTimeToday => new(_haContext, "sensor.power_highest_peak_time_today");
    ///<summary>Solar production forecast Tijdstip hoogste vermogenspiek - morgen</summary>
    public SensorEntity PowerHighestPeakTimeTomorrow => new(_haContext, "sensor.power_highest_peak_time_tomorrow");
    ///<summary>Q7 Max Dock Dock fout</summary>
    public SensorEntity Q7MaxDockDockFout => new(_haContext, "sensor.q7_max_dock_dock_fout");
    ///<summary>Q7 Max Einde laatste schoonmaak</summary>
    public SensorEntity Q7MaxEindeLaatsteSchoonmaak => new(_haContext, "sensor.q7_max_einde_laatste_schoonmaak");
    ///<summary>Q7 Max Huidige kamer</summary>
    public SensorEntity Q7MaxHuidigeKamer => new(_haContext, "sensor.q7_max_huidige_kamer");
    ///<summary>Q7 Max Start laatste schoonmaak</summary>
    public SensorEntity Q7MaxStartLaatsteSchoonmaak => new(_haContext, "sensor.q7_max_start_laatste_schoonmaak");
    ///<summary>Q7 Max Status</summary>
    public SensorEntity Q7MaxStatus => new(_haContext, "sensor.q7_max_status");
    ///<summary>Q7 Max Stofzuigerfout</summary>
    public SensorEntity Q7MaxStofzuigerfout => new(_haContext, "sensor.q7_max_stofzuigerfout");
    ///<summary>Q7 Max Totaal aantal schoonmaakbeurten</summary>
    public SensorEntity Q7MaxTotaalAantalSchoonmaakbeurten => new(_haContext, "sensor.q7_max_totaal_aantal_schoonmaakbeurten");
    ///<summary>Spotjes Verlichting Auto-off at</summary>
    public SensorEntity SpotjesVerlichtingAutoOffAt => new(_haContext, "sensor.spotjes_verlichting_auto_off_at");
    ///<summary>Spotjes Verlichting Signaalniveau</summary>
    public SensorEntity SpotjesVerlichtingSignaalniveau => new(_haContext, "sensor.spotjes_verlichting_signaalniveau");
    ///<summary>Sun Volgende dageraad</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Volgende schemering</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Volgende middernacht</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Volgende middag</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Volgende opkomst</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Volgende ondergang</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>This Device next Alarm</summary>
    public SensorEntity ThisDeviceNextAlarm => new(_haContext, "sensor.this_device_next_alarm");
    ///<summary>This Device next Reminder</summary>
    public SensorEntity ThisDeviceNextReminder => new(_haContext, "sensor.this_device_next_reminder");
    ///<summary>This Device next Timer</summary>
    public SensorEntity ThisDeviceNextTimer => new(_haContext, "sensor.this_device_next_timer");
    ///<summary>Info</summary>
    public SensorEntity ToetsenpaneelIngangInfo => new(_haContext, "sensor.toetsenpaneel_ingang_info");
    ///<summary>Info</summary>
    public SensorEntity TuinCameraInfo => new(_haContext, "sensor.tuin_camera_info");
    ///<summary>Tuin Laatste activiteit</summary>
    public SensorEntity TuinLastActivity => new(_haContext, "sensor.tuin_last_activity");
    ///<summary>Tuinhuis verlichting  Auto-off at</summary>
    public SensorEntity TuinhuisVerlichtingAutoOffAt => new(_haContext, "sensor.tuinhuis_verlichting_auto_off_at");
    ///<summary>Tuinhuis verlichting  Signaalniveau</summary>
    public SensorEntity TuinhuisVerlichtingSignaalniveau => new(_haContext, "sensor.tuinhuis_verlichting_signaalniveau");
    ///<summary>TV en Media Auto-off at</summary>
    public SensorEntity TvEnMediaAutoOffAt => new(_haContext, "sensor.tv_en_media_auto_off_at");
    ///<summary>TV en Media Signaalniveau</summary>
    public SensorEntity TvEnMediaSignaalniveau => new(_haContext, "sensor.tv_en_media_signaalniveau");
    ///<summary>Vaatwasser  Auto-off at</summary>
    public SensorEntity VaatwasserAutoOffAt => new(_haContext, "sensor.vaatwasser_auto_off_at");
    ///<summary>Vaatwasser  Signaalniveau</summary>
    public SensorEntity VaatwasserSignaalniveau => new(_haContext, "sensor.vaatwasser_signaalniveau");
    ///<summary>Vaillant API Request Count</summary>
    public SensorEntity VaillantApiRequestCount => new(_haContext, "sensor.vaillant_api_request_count");
    ///<summary>Volledige staat 1d</summary>
    public SensorEntity VolledigeStaat1d => new(_haContext, "sensor.volledige_staat_1d");
    ///<summary>Info</summary>
    public SensorEntity VoordeurContactSensorInfo => new(_haContext, "sensor.voordeur_contact_sensor_info");
    ///<summary>Info</summary>
    public SensorEntity VoordeurInfo => new(_haContext, "sensor.voordeur_info");
    ///<summary>Voordeur Laatste activiteit</summary>
    public SensorEntity VoordeurLastActivity => new(_haContext, "sensor.voordeur_last_activity");
    ///<summary>Info</summary>
    public SensorEntity VoordeurMotionSensorInfo2 => new(_haContext, "sensor.voordeur_motion_sensor_info_2");
    ///<summary>Wasmachine  Auto-off at</summary>
    public SensorEntity WasmachineAutoOffAt => new(_haContext, "sensor.wasmachine_auto_off_at");
    ///<summary>Wasmachine  Signaalniveau</summary>
    public SensorEntity WasmachineSignaalniveau => new(_haContext, "sensor.wasmachine_signaalniveau");
    ///<summary>Windrichting</summary>
    public SensorEntity Windrichting => new(_haContext, "sensor.windrichting");
    ///<summary>Info</summary>
    public SensorEntity WoonkamerCameraInfo => new(_haContext, "sensor.woonkamer_camera_info");
    ///<summary>Woonkamer Laatste activiteit</summary>
    public SensorEntity WoonkamerLastActivity => new(_haContext, "sensor.woonkamer_last_activity");
    ///<summary>Battery</summary>
    public NumericSensorEntity AchterdeurContactSensorBattery => new(_haContext, "sensor.achterdeur_contact_sensor_battery");
    ///<summary>AdGuard Home Gemiddelde verwerkingssnelheid</summary>
    public NumericSensorEntity AdguardHomeAverageProcessingSpeed => new(_haContext, "sensor.adguard_home_average_processing_speed");
    ///<summary>AdGuard Home DNS query&apos;s</summary>
    public NumericSensorEntity AdguardHomeDnsQueries => new(_haContext, "sensor.adguard_home_dns_queries");
    ///<summary>AdGuard Home Aantal DNS query&apos;s geblokkeerd</summary>
    public NumericSensorEntity AdguardHomeDnsQueriesBlocked => new(_haContext, "sensor.adguard_home_dns_queries_blocked");
    ///<summary>AdGuard Home DNS query&apos;s geblokkeerd ratio</summary>
    public NumericSensorEntity AdguardHomeDnsQueriesBlockedRatio => new(_haContext, "sensor.adguard_home_dns_queries_blocked_ratio");
    ///<summary>AdGuard Home Ouderlijk toezicht geblokkeerd</summary>
    public NumericSensorEntity AdguardHomeParentalControlBlocked => new(_haContext, "sensor.adguard_home_parental_control_blocked");
    ///<summary>AdGuard Home Veilig zoeken geblokkeerd</summary>
    public NumericSensorEntity AdguardHomeSafeBrowsingBlocked => new(_haContext, "sensor.adguard_home_safe_browsing_blocked");
    ///<summary>AdGuard Home Veilig zoeken afgedwongen</summary>
    public NumericSensorEntity AdguardHomeSafeSearchesEnforced => new(_haContext, "sensor.adguard_home_safe_searches_enforced");
    ///<summary>Audio Huidig gebruik</summary>
    public NumericSensorEntity AudioHuidigGebruik => new(_haContext, "sensor.audio_huidig_gebruik");
    ///<summary>Audio Spanning</summary>
    public NumericSensorEntity AudioSpanning => new(_haContext, "sensor.audio_spanning");
    ///<summary>Audio Stroom</summary>
    public NumericSensorEntity AudioStroom => new(_haContext, "sensor.audio_stroom");
    ///<summary>Audio This month&apos;s consumption</summary>
    public NumericSensorEntity AudioThisMonthSConsumption => new(_haContext, "sensor.audio_this_month_s_consumption");
    ///<summary>Audio Today&apos;s consumption</summary>
    public NumericSensorEntity AudioTodaySConsumption => new(_haContext, "sensor.audio_today_s_consumption");
    ///<summary>Battery B2N0200J2403E01735 Bat Soc</summary>
    public NumericSensorEntity BatteryB2n0200j2403e01735BatSoc => new(_haContext, "sensor.battery_b2n0200j2403e01735_bat_soc");
    ///<summary>Battery B2N0200J2403E01735 Bat Temperature</summary>
    public NumericSensorEntity BatteryB2n0200j2403e01735BatTemperature => new(_haContext, "sensor.battery_b2n0200j2403e01735_bat_temperature");
    ///<summary>Battery B2U4250J2511E06231 Bat Soc</summary>
    public NumericSensorEntity BatteryB2u4250j2511e06231BatSoc => new(_haContext, "sensor.battery_b2u4250j2511e06231_bat_soc");
    ///<summary>Battery B2U4250J2511E06231 Bat Temperature</summary>
    public NumericSensorEntity BatteryB2u4250j2511e06231BatTemperature => new(_haContext, "sensor.battery_b2u4250j2511e06231_bat_temperature");
    ///<summary>Battery B2U4250J2511E06243 Bat Soc</summary>
    public NumericSensorEntity BatteryB2u4250j2511e06243BatSoc => new(_haContext, "sensor.battery_b2u4250j2511e06243_bat_soc");
    ///<summary>Battery B2U4250J2511E06243 Bat Temperature</summary>
    public NumericSensorEntity BatteryB2u4250j2511e06243BatTemperature => new(_haContext, "sensor.battery_b2u4250j2511e06243_bat_temperature");
    ///<summary>Battery B2U4250J2511E06244 Bat Soc</summary>
    public NumericSensorEntity BatteryB2u4250j2511e06244BatSoc => new(_haContext, "sensor.battery_b2u4250j2511e06244_bat_soc");
    ///<summary>Battery B2U4250J2511E06244 Bat Temperature</summary>
    public NumericSensorEntity BatteryB2u4250j2511e06244BatTemperature => new(_haContext, "sensor.battery_b2u4250j2511e06244_bat_temperature");
    ///<summary>Battery B2U4250J2511E06245 Bat Soc</summary>
    public NumericSensorEntity BatteryB2u4250j2511e06245BatSoc => new(_haContext, "sensor.battery_b2u4250j2511e06245_bat_soc");
    ///<summary>Battery B2U4250J2511E06245 Bat Temperature</summary>
    public NumericSensorEntity BatteryB2u4250j2511e06245BatTemperature => new(_haContext, "sensor.battery_b2u4250j2511e06245_bat_temperature");
    ///<summary>Battery B2U4250J2511E06247 Bat Soc</summary>
    public NumericSensorEntity BatteryB2u4250j2511e06247BatSoc => new(_haContext, "sensor.battery_b2u4250j2511e06247_bat_soc");
    ///<summary>Battery B2U4250J2511E06247 Bat Temperature</summary>
    public NumericSensorEntity BatteryB2u4250j2511e06247BatTemperature => new(_haContext, "sensor.battery_b2u4250j2511e06247_bat_temperature");
    ///<summary>Battery Grid Power</summary>
    public NumericSensorEntity BatteryGridPower => new(_haContext, "sensor.battery_grid_power");
    ///<summary>Computer Huidig gebruik</summary>
    public NumericSensorEntity ComputerHuidigGebruik => new(_haContext, "sensor.computer_huidig_gebruik");
    ///<summary>Computer Spanning</summary>
    public NumericSensorEntity ComputerSpanning => new(_haContext, "sensor.computer_spanning");
    ///<summary>Computer Stroom</summary>
    public NumericSensorEntity ComputerStroom => new(_haContext, "sensor.computer_stroom");
    ///<summary>Computer This month&apos;s consumption</summary>
    public NumericSensorEntity ComputerThisMonthSConsumption => new(_haContext, "sensor.computer_this_month_s_consumption");
    ///<summary>Computer Today&apos;s consumption</summary>
    public NumericSensorEntity ComputerTodaySConsumption => new(_haContext, "sensor.computer_today_s_consumption");
    ///<summary>Wireless</summary>
    public NumericSensorEntity DeurbelWireless => new(_haContext, "sensor.deurbel_wireless");
    ///<summary>Droger en Vriezer Huidig gebruik</summary>
    public NumericSensorEntity DrogerEnVriezerHuidigGebruik => new(_haContext, "sensor.droger_en_vriezer_huidig_gebruik");
    ///<summary>Droger en Vriezer Spanning</summary>
    public NumericSensorEntity DrogerEnVriezerSpanning => new(_haContext, "sensor.droger_en_vriezer_spanning");
    ///<summary>Droger en Vriezer Stroom</summary>
    public NumericSensorEntity DrogerEnVriezerStroom => new(_haContext, "sensor.droger_en_vriezer_stroom");
    ///<summary>Droger en Vriezer This month&apos;s consumption</summary>
    public NumericSensorEntity DrogerEnVriezerThisMonthSConsumption => new(_haContext, "sensor.droger_en_vriezer_this_month_s_consumption");
    ///<summary>Droger en Vriezer Today&apos;s consumption</summary>
    public NumericSensorEntity DrogerEnVriezerTodaySConsumption => new(_haContext, "sensor.droger_en_vriezer_today_s_consumption");
    ///<summary>Electricity Meter Energieverbruik (tarief 1)</summary>
    public NumericSensorEntity ElectricityMeterEnergyConsumptionTarif1 => new(_haContext, "sensor.electricity_meter_energy_consumption_tarif_1");
    ///<summary>Electricity Meter Energieverbruik (tarief 2)</summary>
    public NumericSensorEntity ElectricityMeterEnergyConsumptionTarif2 => new(_haContext, "sensor.electricity_meter_energy_consumption_tarif_2");
    ///<summary>Electricity Meter Energieproductie (tarief 1)</summary>
    public NumericSensorEntity ElectricityMeterEnergyProductionTarif1 => new(_haContext, "sensor.electricity_meter_energy_production_tarif_1");
    ///<summary>Electricity Meter Energieproductie (tarief 2)</summary>
    public NumericSensorEntity ElectricityMeterEnergyProductionTarif2 => new(_haContext, "sensor.electricity_meter_energy_production_tarif_2");
    ///<summary>Electricity Meter Energieverbruik</summary>
    public NumericSensorEntity ElectricityMeterPowerConsumption => new(_haContext, "sensor.electricity_meter_power_consumption");
    ///<summary>Electricity Meter Energieproductie</summary>
    public NumericSensorEntity ElectricityMeterPowerProduction => new(_haContext, "sensor.electricity_meter_power_production");
    ///<summary>Electricity Meter Spanning fase L1</summary>
    public NumericSensorEntity ElectricityMeterVoltagePhaseL1 => new(_haContext, "sensor.electricity_meter_voltage_phase_l1");
    ///<summary>Electricity Meter Spanning fase L2</summary>
    public NumericSensorEntity ElectricityMeterVoltagePhaseL2 => new(_haContext, "sensor.electricity_meter_voltage_phase_l2");
    ///<summary>Electricity Meter Spanning fase L3</summary>
    public NumericSensorEntity ElectricityMeterVoltagePhaseL3 => new(_haContext, "sensor.electricity_meter_voltage_phase_l3");
    ///<summary>Wireless</summary>
    public NumericSensorEntity EmmeloordBaseStationWireless => new(_haContext, "sensor.emmeloord_base_station_wireless");
    ///<summary>Battery</summary>
    public NumericSensorEntity EmmeloordRangeExtenderBattery => new(_haContext, "sensor.emmeloord_range_extender_battery");
    ///<summary>EMS Huidig gebruik</summary>
    public NumericSensorEntity EmsHuidigGebruik => new(_haContext, "sensor.ems_huidig_gebruik");
    ///<summary>EMS Spanning</summary>
    public NumericSensorEntity EmsSpanning => new(_haContext, "sensor.ems_spanning");
    ///<summary>EMS Stroom</summary>
    public NumericSensorEntity EmsStroom => new(_haContext, "sensor.ems_stroom");
    ///<summary>EMS This month&apos;s consumption</summary>
    public NumericSensorEntity EmsThisMonthSConsumption => new(_haContext, "sensor.ems_this_month_s_consumption");
    ///<summary>EMS Today&apos;s consumption</summary>
    public NumericSensorEntity EmsTodaySConsumption => new(_haContext, "sensor.ems_today_s_consumption");
    ///<summary>Solar production forecast Geschatte energieproductie - dit uur</summary>
    public NumericSensorEntity EnergyCurrentHour => new(_haContext, "sensor.energy_current_hour");
    ///<summary>Solar production forecast Geschatte energieproductie - volgend uur</summary>
    public NumericSensorEntity EnergyNextHour => new(_haContext, "sensor.energy_next_hour");
    ///<summary>Solar production forecast Geschatte energieproductie - vandaag</summary>
    public NumericSensorEntity EnergyProductionToday => new(_haContext, "sensor.energy_production_today");
    ///<summary>Solar production forecast Geschatte energieproductie - resterend vandaag</summary>
    public NumericSensorEntity EnergyProductionTodayRemaining => new(_haContext, "sensor.energy_production_today_remaining");
    ///<summary>Solar production forecast Geschatte energieproductie - morgen</summary>
    public NumericSensorEntity EnergyProductionTomorrow => new(_haContext, "sensor.energy_production_tomorrow");
    ///<summary>epex</summary>
    public NumericSensorEntity Epex => new(_haContext, "sensor.epex");
    ///<summary>epex_inc</summary>
    public NumericSensorEntity EpexInc => new(_haContext, "sensor.epex_inc");
    ///<summary>Garage Huidig gebruik</summary>
    public NumericSensorEntity GarageHuidigGebruik => new(_haContext, "sensor.garage_huidig_gebruik");
    ///<summary>Garage Spanning</summary>
    public NumericSensorEntity GarageSpanning => new(_haContext, "sensor.garage_spanning");
    ///<summary>Garage Stroom</summary>
    public NumericSensorEntity GarageStroom => new(_haContext, "sensor.garage_stroom");
    ///<summary>Garage This month&apos;s consumption</summary>
    public NumericSensorEntity GarageThisMonthSConsumption => new(_haContext, "sensor.garage_this_month_s_consumption");
    ///<summary>Garage Today&apos;s consumption</summary>
    public NumericSensorEntity GarageTodaySConsumption => new(_haContext, "sensor.garage_today_s_consumption");
    ///<summary>Gree Climate Temperature</summary>
    public NumericSensorEntity GreeClimateTemperature => new(_haContext, "sensor.gree_climate_temperature");
    ///<summary>IKEA of Sweden Remote Control N2 Batterij</summary>
    public NumericSensorEntity IkeaOfSwedenRemoteControlN2Batterij => new(_haContext, "sensor.ikea_of_sweden_remote_control_n2_batterij");
    ///<summary>Inverter HST2083J2446E06861 Battery State Of Charge</summary>
    public NumericSensorEntity InverterHst2083j2446e06861BatteryStateOfCharge => new(_haContext, "sensor.inverter_hst2083j2446e06861_battery_state_of_charge");
    ///<summary>Inverter HST2083J2446E06861 Energy Month</summary>
    public NumericSensorEntity InverterHst2083j2446e06861EnergyMonth => new(_haContext, "sensor.inverter_hst2083j2446e06861_energy_month");
    ///<summary>Inverter HST2083J2446E06861 Energy Today</summary>
    public NumericSensorEntity InverterHst2083j2446e06861EnergyToday => new(_haContext, "sensor.inverter_hst2083j2446e06861_energy_today");
    ///<summary>Inverter HST2083J2446E06861 Energy Total</summary>
    public NumericSensorEntity InverterHst2083j2446e06861EnergyTotal => new(_haContext, "sensor.inverter_hst2083j2446e06861_energy_total");
    ///<summary>Inverter HST2083J2446E06861 GC1r</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Gc1r => new(_haContext, "sensor.inverter_hst2083j2446e06861_gc1r");
    ///<summary>Inverter HST2083J2446E06861 GC2s</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Gc2s => new(_haContext, "sensor.inverter_hst2083j2446e06861_gc2s");
    ///<summary>Inverter HST2083J2446E06861 GC3t</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Gc3t => new(_haContext, "sensor.inverter_hst2083j2446e06861_gc3t");
    ///<summary>Inverter HST2083J2446E06861 grid power</summary>
    public NumericSensorEntity InverterHst2083j2446e06861GridPower => new(_haContext, "sensor.inverter_hst2083j2446e06861_grid_power");
    ///<summary>Inverter HST2083J2446E06861 GV1r</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Gv1r => new(_haContext, "sensor.inverter_hst2083j2446e06861_gv1r");
    ///<summary>Inverter HST2083J2446E06861 GV2s</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Gv2s => new(_haContext, "sensor.inverter_hst2083j2446e06861_gv2s");
    ///<summary>Inverter HST2083J2446E06861 GV3t</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Gv3t => new(_haContext, "sensor.inverter_hst2083j2446e06861_gv3t");
    ///<summary>Inverter HST2083J2446E06861 PC1</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Pc1 => new(_haContext, "sensor.inverter_hst2083j2446e06861_pc1");
    ///<summary>Inverter HST2083J2446E06861 PC2</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Pc2 => new(_haContext, "sensor.inverter_hst2083j2446e06861_pc2");
    ///<summary>Inverter HST2083J2446E06861 Peak Power</summary>
    public NumericSensorEntity InverterHst2083j2446e06861PeakPower => new(_haContext, "sensor.inverter_hst2083j2446e06861_peak_power");
    ///<summary>Inverter HST2083J2446E06861 Power</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Power => new(_haContext, "sensor.inverter_hst2083j2446e06861_power");
    ///<summary>Inverter HST2083J2446E06861 PV1</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Pv1 => new(_haContext, "sensor.inverter_hst2083j2446e06861_pv1");
    ///<summary>Inverter HST2083J2446E06861 PV2</summary>
    public NumericSensorEntity InverterHst2083j2446e06861Pv2 => new(_haContext, "sensor.inverter_hst2083j2446e06861_pv2");
    ///<summary>Inverter HST2083J2446E06861 string 1 power</summary>
    public NumericSensorEntity InverterHst2083j2446e06861String1Power => new(_haContext, "sensor.inverter_hst2083j2446e06861_string_1_power");
    ///<summary>Inverter HST2083J2446E06861 string 2 power</summary>
    public NumericSensorEntity InverterHst2083j2446e06861String2Power => new(_haContext, "sensor.inverter_hst2083j2446e06861_string_2_power");
    ///<summary>iPhone Mark Battery Level</summary>
    public NumericSensorEntity IphoneMarkBatteryLevel2 => new(_haContext, "sensor.iphone_mark_battery_level_2");
    ///<summary>iPhone Mark Storage</summary>
    public NumericSensorEntity IphoneMarkStorage2 => new(_haContext, "sensor.iphone_mark_storage_2");
    ///<summary>John Daltonhage 7 Elektriciteitsprijs</summary>
    public NumericSensorEntity JohnDaltonhage7Elektriciteitsprijs => new(_haContext, "sensor.john_daltonhage_7_elektriciteitsprijs");
    ///<summary>John Daltonhage 7 Maandelijks nettoverbruik</summary>
    public NumericSensorEntity JohnDaltonhage7MaandelijksNettoverbruik => new(_haContext, "sensor.john_daltonhage_7_maandelijks_nettoverbruik");
    ///<summary>John Daltonhage 7 Maandelijks piekuurverbruik</summary>
    public NumericSensorEntity JohnDaltonhage7MaandelijksPiekuurverbruik => new(_haContext, "sensor.john_daltonhage_7_maandelijks_piekuurverbruik");
    ///<summary>John Daltonhage 7 Maandelijkse kosten</summary>
    public NumericSensorEntity JohnDaltonhage7MaandelijkseKosten => new(_haContext, "sensor.john_daltonhage_7_maandelijkse_kosten");
    ///<summary>Wireless</summary>
    public NumericSensorEntity KeukenChimeWireless => new(_haContext, "sensor.keuken_chime_wireless");
    ///<summary>Battery</summary>
    public NumericSensorEntity KeukenMotionSensorBattery => new(_haContext, "sensor.keuken_motion_sensor_battery");
    ///<summary>Maximale regen 1d</summary>
    public NumericSensorEntity MaximaleRegen1d => new(_haContext, "sensor.maximale_regen_1d");
    ///<summary>Neerslagverwachting gemiddeld</summary>
    public NumericSensorEntity NeerslagverwachtingGemiddeld => new(_haContext, "sensor.neerslagverwachting_gemiddeld");
    ///<summary>Our home Circuit 0 Current Flow Temperature</summary>
    public NumericSensorEntity OurHomeCircuit0CurrentFlowTemperature => new(_haContext, "sensor.our_home_circuit_0_current_flow_temperature");
    ///<summary>Our home Device 0 aroTHERM Consumed Electrical Energy Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice0ArothermConsumedElectricalEnergyDomesticHotWater => new(_haContext, "sensor.our_home_device_0_arotherm_consumed_electrical_energy_domestic_hot_water");
    ///<summary>Our home Device 0 aroTHERM Consumed Electrical Energy Cooling</summary>
    public NumericSensorEntity OurHomeDevice0ArothermConsumedElectricalEnergyDomesticHotWater2 => new(_haContext, "sensor.our_home_device_0_arotherm_consumed_electrical_energy_domestic_hot_water_2");
    ///<summary>Our home Device 0 aroTHERM Consumed Electrical Energy Heating</summary>
    public NumericSensorEntity OurHomeDevice0ArothermConsumedElectricalEnergyHeating => new(_haContext, "sensor.our_home_device_0_arotherm_consumed_electrical_energy_heating");
    ///<summary>Our home Device 0 aroTHERM Consumed Electrical Energy Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice0ArothermConsumedElectricalEnergyHeating2 => new(_haContext, "sensor.our_home_device_0_arotherm_consumed_electrical_energy_heating_2");
    ///<summary>Our home Device 0 aroTHERM Earned Environment Energy Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice0ArothermEarnedEnvironmentEnergyDomesticHotWater => new(_haContext, "sensor.our_home_device_0_arotherm_earned_environment_energy_domestic_hot_water");
    ///<summary>Our home Device 0 aroTHERM Consumed Electrical Energy Heating</summary>
    public NumericSensorEntity OurHomeDevice0ArothermEarnedEnvironmentEnergyDomesticHotWater2 => new(_haContext, "sensor.our_home_device_0_arotherm_earned_environment_energy_domestic_hot_water_2");
    ///<summary>Our home Device 0 aroTHERM Earned Environment Energy Heating</summary>
    public NumericSensorEntity OurHomeDevice0ArothermEarnedEnvironmentEnergyHeating => new(_haContext, "sensor.our_home_device_0_arotherm_earned_environment_energy_heating");
    ///<summary>Our home Device 0 aroTHERM Earned Environment Energy Cooling</summary>
    public NumericSensorEntity OurHomeDevice0ArothermEarnedEnvironmentEnergyHeating2 => new(_haContext, "sensor.our_home_device_0_arotherm_earned_environment_energy_heating_2");
    ///<summary>Our home Device 0 aroTHERM Heat Generated Cooling</summary>
    public NumericSensorEntity OurHomeDevice0ArothermHeatGeneratedCooling => new(_haContext, "sensor.our_home_device_0_arotherm_heat_generated_cooling");
    ///<summary>Our home Device 0 aroTHERM Heat Generated Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice0ArothermHeatGeneratedDomesticHotWater => new(_haContext, "sensor.our_home_device_0_arotherm_heat_generated_domestic_hot_water");
    ///<summary>Our home Device 0 aroTHERM Earned Environment Energy Heating</summary>
    public NumericSensorEntity OurHomeDevice0ArothermHeatGeneratedDomesticHotWater2 => new(_haContext, "sensor.our_home_device_0_arotherm_heat_generated_domestic_hot_water_2");
    ///<summary>Our home Device 0 aroTHERM Heat Generated Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice0ArothermHeatGeneratedDomesticHotWater3 => new(_haContext, "sensor.our_home_device_0_arotherm_heat_generated_domestic_hot_water_3");
    ///<summary>Our home Device 0 aroTHERM Heat Generated Heating</summary>
    public NumericSensorEntity OurHomeDevice0ArothermHeatGeneratedHeating => new(_haContext, "sensor.our_home_device_0_arotherm_heat_generated_heating");
    ///<summary>Our home Device 0 aroTHERM Earned Environment Energy Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice0ArothermHeatGeneratedHeating2 => new(_haContext, "sensor.our_home_device_0_arotherm_heat_generated_heating_2");
    ///<summary>Our home Device 0 aroTHERM Heat Generated Heating</summary>
    public NumericSensorEntity OurHomeDevice0ArothermHeatGeneratedHeating3 => new(_haContext, "sensor.our_home_device_0_arotherm_heat_generated_heating_3");
    ///<summary>Our home Device 1 Hydraulic Station Consumed Electrical Energy Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice1HydraulicStationConsumedElectricalEnergyDomesticHotWater => new(_haContext, "sensor.our_home_device_1_hydraulic_station_consumed_electrical_energy_domestic_hot_water");
    ///<summary>Our home Device 1 Hydraulic Station Consumed Electrical Energy Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice1HydraulicStationConsumedElectricalEnergyDomesticHotWater2 => new(_haContext, "sensor.our_home_device_1_hydraulic_station_consumed_electrical_energy_domestic_hot_water_2");
    ///<summary>Our home Device 1 Hydraulic Station Consumed Electrical Energy Heating</summary>
    public NumericSensorEntity OurHomeDevice1HydraulicStationConsumedElectricalEnergyHeating => new(_haContext, "sensor.our_home_device_1_hydraulic_station_consumed_electrical_energy_heating");
    ///<summary>Our home Device 1 Hydraulic Station Consumed Electrical Energy Heating</summary>
    public NumericSensorEntity OurHomeDevice1HydraulicStationConsumedElectricalEnergyHeating2 => new(_haContext, "sensor.our_home_device_1_hydraulic_station_consumed_electrical_energy_heating_2");
    ///<summary>Our home Device 1 Hydraulic Station Heat Generated Domestic Hot Water</summary>
    public NumericSensorEntity OurHomeDevice1HydraulicStationHeatGeneratedDomesticHotWater => new(_haContext, "sensor.our_home_device_1_hydraulic_station_heat_generated_domestic_hot_water");
    ///<summary>Our home Device 1 Hydraulic Station Heat Generated Heating</summary>
    public NumericSensorEntity OurHomeDevice1HydraulicStationHeatGeneratedHeating => new(_haContext, "sensor.our_home_device_1_hydraulic_station_heat_generated_heating");
    ///<summary>Our home Domestic Hot Water 0 Setpoint</summary>
    public NumericSensorEntity OurHomeDomesticHotWater0Setpoint => new(_haContext, "sensor.our_home_domestic_hot_water_0_setpoint");
    ///<summary>Our home Domestic Hot Water 0 Tank Temperature</summary>
    public NumericSensorEntity OurHomeDomesticHotWater0TankTemperature => new(_haContext, "sensor.our_home_domestic_hot_water_0_tank_temperature");
    ///<summary>Our home Outdoor Temperature</summary>
    public NumericSensorEntity OurHomeOutdoorTemperature => new(_haContext, "sensor.our_home_outdoor_temperature");
    ///<summary>Our home System Water Pressure</summary>
    public NumericSensorEntity OurHomeSystemWaterPressure => new(_haContext, "sensor.our_home_system_water_pressure");
    ///<summary>Our home Zone Thuis (Circuit 0) Current Temperature</summary>
    public NumericSensorEntity OurHomeZoneThuisCircuit0CurrentTemperature => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_current_temperature");
    ///<summary>Our home Zone Thuis (Circuit 0) Desired Cooling Temperature</summary>
    public NumericSensorEntity OurHomeZoneThuisCircuit0DesiredCoolingTemperature => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_desired_cooling_temperature");
    ///<summary>Our home Zone Thuis (Circuit 0) Desired Heating Temperature</summary>
    public NumericSensorEntity OurHomeZoneThuisCircuit0DesiredHeatingTemperature => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_desired_heating_temperature");
    ///<summary>Our home Zone Thuis (Circuit 0) Desired Temperature</summary>
    public NumericSensorEntity OurHomeZoneThuisCircuit0DesiredTemperature => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_desired_temperature");
    ///<summary>Our home Zone Thuis (Circuit 0) Humidity</summary>
    public NumericSensorEntity OurHomeZoneThuisCircuit0Humidity => new(_haContext, "sensor.our_home_zone_thuis_circuit_0_humidity");
    ///<summary>Plant Markbovee Energy Month</summary>
    public NumericSensorEntity PlantMarkboveeEnergyMonth => new(_haContext, "sensor.plant_markbovee_energy_month");
    ///<summary>Plant Markbovee Energy Today </summary>
    public NumericSensorEntity PlantMarkboveeEnergyToday => new(_haContext, "sensor.plant_markbovee_energy_today");
    ///<summary>Plant Markbovee Energy Total </summary>
    public NumericSensorEntity PlantMarkboveeEnergyTotal => new(_haContext, "sensor.plant_markbovee_energy_total");
    ///<summary>Plant Markbovee Energy Year</summary>
    public NumericSensorEntity PlantMarkboveeEnergyYear => new(_haContext, "sensor.plant_markbovee_energy_year");
    ///<summary>Plant Markbovee Month Bat Chg Energy</summary>
    public NumericSensorEntity PlantMarkboveeMonthBatChgEnergy => new(_haContext, "sensor.plant_markbovee_month_bat_chg_energy");
    ///<summary>Plant Markbovee Month Bat Dischg Energy</summary>
    public NumericSensorEntity PlantMarkboveeMonthBatDischgEnergy => new(_haContext, "sensor.plant_markbovee_month_bat_dischg_energy");
    ///<summary>Plant Markbovee Month Buy Energy</summary>
    public NumericSensorEntity PlantMarkboveeMonthBuyEnergy => new(_haContext, "sensor.plant_markbovee_month_buy_energy");
    ///<summary>Plant Markbovee Month Load Energy</summary>
    public NumericSensorEntity PlantMarkboveeMonthLoadEnergy => new(_haContext, "sensor.plant_markbovee_month_load_energy");
    ///<summary>Plant Markbovee Month Sell Energy</summary>
    public NumericSensorEntity PlantMarkboveeMonthSellEnergy => new(_haContext, "sensor.plant_markbovee_month_sell_energy");
    ///<summary>Plant Markbovee Peak Power</summary>
    public NumericSensorEntity PlantMarkboveePeakPower => new(_haContext, "sensor.plant_markbovee_peak_power");
    ///<summary>Plant Markbovee State Of Charge</summary>
    public NumericSensorEntity PlantMarkboveeStateOfCharge => new(_haContext, "sensor.plant_markbovee_state_of_charge");
    ///<summary>Plant Markbovee Today Buy Energy</summary>
    public NumericSensorEntity PlantMarkboveeTodayBuyEnergy => new(_haContext, "sensor.plant_markbovee_today_buy_energy");
    ///<summary>Plant Markbovee Today Charge Energy</summary>
    public NumericSensorEntity PlantMarkboveeTodayChargeEnergy => new(_haContext, "sensor.plant_markbovee_today_charge_energy");
    ///<summary>Plant Markbovee Today Dis Charge Energy</summary>
    public NumericSensorEntity PlantMarkboveeTodayDisChargeEnergy => new(_haContext, "sensor.plant_markbovee_today_dis_charge_energy");
    ///<summary>Plant Markbovee today Equivalent Hours</summary>
    public NumericSensorEntity PlantMarkboveeTodayEquivalentHours => new(_haContext, "sensor.plant_markbovee_today_equivalent_hours");
    ///<summary>Plant Markbovee Today Load Energy</summary>
    public NumericSensorEntity PlantMarkboveeTodayLoadEnergy => new(_haContext, "sensor.plant_markbovee_today_load_energy");
    ///<summary>Plant Markbovee Today Sell Energy</summary>
    public NumericSensorEntity PlantMarkboveeTodaySellEnergy => new(_haContext, "sensor.plant_markbovee_today_sell_energy");
    ///<summary>Plant Markbovee Total Buy Energy</summary>
    public NumericSensorEntity PlantMarkboveeTotalBuyEnergy => new(_haContext, "sensor.plant_markbovee_total_buy_energy");
    ///<summary>Plant Markbovee Total Charge Energy</summary>
    public NumericSensorEntity PlantMarkboveeTotalChargeEnergy => new(_haContext, "sensor.plant_markbovee_total_charge_energy");
    ///<summary>Plant Markbovee Total Dis Charge Energy</summary>
    public NumericSensorEntity PlantMarkboveeTotalDisChargeEnergy => new(_haContext, "sensor.plant_markbovee_total_dis_charge_energy");
    ///<summary>Plant Markbovee Total Load Energy</summary>
    public NumericSensorEntity PlantMarkboveeTotalLoadEnergy => new(_haContext, "sensor.plant_markbovee_total_load_energy");
    ///<summary>Plant Markbovee Total Sell Energy</summary>
    public NumericSensorEntity PlantMarkboveeTotalSellEnergy => new(_haContext, "sensor.plant_markbovee_total_sell_energy");
    ///<summary>Plant Markbovee Year Bat Chg Energy</summary>
    public NumericSensorEntity PlantMarkboveeYearBatChgEnergy => new(_haContext, "sensor.plant_markbovee_year_bat_chg_energy");
    ///<summary>Plant Markbovee Year Bat Dischg Energy</summary>
    public NumericSensorEntity PlantMarkboveeYearBatDischgEnergy => new(_haContext, "sensor.plant_markbovee_year_bat_dischg_energy");
    ///<summary>Plant Markbovee Year Buy Energy</summary>
    public NumericSensorEntity PlantMarkboveeYearBuyEnergy => new(_haContext, "sensor.plant_markbovee_year_buy_energy");
    ///<summary>Plant Markbovee Year Load Energy</summary>
    public NumericSensorEntity PlantMarkboveeYearLoadEnergy => new(_haContext, "sensor.plant_markbovee_year_load_energy");
    ///<summary>Plant Markbovee Year Sell Energy</summary>
    public NumericSensorEntity PlantMarkboveeYearSellEnergy => new(_haContext, "sensor.plant_markbovee_year_sell_energy");
    ///<summary>Solar production forecast Geschatte energieproductie - nu</summary>
    public NumericSensorEntity PowerProductionNow => new(_haContext, "sensor.power_production_now");
    ///<summary>Q7 Max Batterij</summary>
    public NumericSensorEntity Q7MaxBatterij => new(_haContext, "sensor.q7_max_batterij");
    ///<summary>Q7 Max Resterende tijd filter</summary>
    public NumericSensorEntity Q7MaxResterendeTijdFilter => new(_haContext, "sensor.q7_max_resterende_tijd_filter");
    ///<summary>Q7 Max Resterende tijd hoofdborstel</summary>
    public NumericSensorEntity Q7MaxResterendeTijdHoofdborstel => new(_haContext, "sensor.q7_max_resterende_tijd_hoofdborstel");
    ///<summary>Q7 Max Resterende tijd sensor</summary>
    public NumericSensorEntity Q7MaxResterendeTijdSensor => new(_haContext, "sensor.q7_max_resterende_tijd_sensor");
    ///<summary>Q7 Max Resterende tijd zijborstel</summary>
    public NumericSensorEntity Q7MaxResterendeTijdZijborstel => new(_haContext, "sensor.q7_max_resterende_tijd_zijborstel");
    ///<summary>Q7 Max Schoonmaakgebied</summary>
    public NumericSensorEntity Q7MaxSchoonmaakgebied => new(_haContext, "sensor.q7_max_schoonmaakgebied");
    ///<summary>Q7 Max Schoonmaaktijd</summary>
    public NumericSensorEntity Q7MaxSchoonmaaktijd => new(_haContext, "sensor.q7_max_schoonmaaktijd");
    ///<summary>Q7 Max Totaal schoonmaakgebied</summary>
    public NumericSensorEntity Q7MaxTotaalSchoonmaakgebied => new(_haContext, "sensor.q7_max_totaal_schoonmaakgebied");
    ///<summary>Q7 Max Totale schoonmaaktijd</summary>
    public NumericSensorEntity Q7MaxTotaleSchoonmaaktijd => new(_haContext, "sensor.q7_max_totale_schoonmaaktijd");
    ///<summary>Regenkans 1d</summary>
    public NumericSensorEntity Regenkans1d => new(_haContext, "sensor.regenkans_1d");
    ///<summary>Spotjes Verlichting Huidig gebruik</summary>
    public NumericSensorEntity SpotjesVerlichtingHuidigGebruik => new(_haContext, "sensor.spotjes_verlichting_huidig_gebruik");
    ///<summary>Spotjes Verlichting Spanning</summary>
    public NumericSensorEntity SpotjesVerlichtingSpanning => new(_haContext, "sensor.spotjes_verlichting_spanning");
    ///<summary>Spotjes Verlichting Stroom</summary>
    public NumericSensorEntity SpotjesVerlichtingStroom => new(_haContext, "sensor.spotjes_verlichting_stroom");
    ///<summary>Spotjes Verlichting This month&apos;s consumption</summary>
    public NumericSensorEntity SpotjesVerlichtingThisMonthSConsumption => new(_haContext, "sensor.spotjes_verlichting_this_month_s_consumption");
    ///<summary>Spotjes Verlichting Today&apos;s consumption</summary>
    public NumericSensorEntity SpotjesVerlichtingTodaySConsumption => new(_haContext, "sensor.spotjes_verlichting_today_s_consumption");
    ///<summary>Current Temperature</summary>
    public NumericSensorEntity Temperature => new(_haContext, "sensor.temperature");
    ///<summary>Temperatuur</summary>
    public NumericSensorEntity Temperatuur => new(_haContext, "sensor.temperatuur");
    ///<summary>Battery</summary>
    public NumericSensorEntity ToetsenpaneelIngangBattery => new(_haContext, "sensor.toetsenpaneel_ingang_battery");
    ///<summary>Tuin Batterij</summary>
    public NumericSensorEntity TuinBatterij => new(_haContext, "sensor.tuin_batterij");
    ///<summary>Wireless</summary>
    public NumericSensorEntity TuinCameraWireless => new(_haContext, "sensor.tuin_camera_wireless");
    ///<summary>Tuinhuis verlichting  Huidig gebruik</summary>
    public NumericSensorEntity TuinhuisVerlichtingHuidigGebruik => new(_haContext, "sensor.tuinhuis_verlichting_huidig_gebruik");
    ///<summary>Tuinhuis verlichting  Spanning</summary>
    public NumericSensorEntity TuinhuisVerlichtingSpanning => new(_haContext, "sensor.tuinhuis_verlichting_spanning");
    ///<summary>Tuinhuis verlichting  Stroom</summary>
    public NumericSensorEntity TuinhuisVerlichtingStroom => new(_haContext, "sensor.tuinhuis_verlichting_stroom");
    ///<summary>Tuinhuis verlichting  This month&apos;s consumption</summary>
    public NumericSensorEntity TuinhuisVerlichtingThisMonthSConsumption => new(_haContext, "sensor.tuinhuis_verlichting_this_month_s_consumption");
    ///<summary>Tuinhuis verlichting  Today&apos;s consumption</summary>
    public NumericSensorEntity TuinhuisVerlichtingTodaySConsumption => new(_haContext, "sensor.tuinhuis_verlichting_today_s_consumption");
    ///<summary>TV en Media Huidig gebruik</summary>
    public NumericSensorEntity TvEnMediaHuidigGebruik => new(_haContext, "sensor.tv_en_media_huidig_gebruik");
    ///<summary>TV en Media Spanning</summary>
    public NumericSensorEntity TvEnMediaSpanning => new(_haContext, "sensor.tv_en_media_spanning");
    ///<summary>TV en Media Stroom</summary>
    public NumericSensorEntity TvEnMediaStroom => new(_haContext, "sensor.tv_en_media_stroom");
    ///<summary>TV en Media This month&apos;s consumption</summary>
    public NumericSensorEntity TvEnMediaThisMonthSConsumption => new(_haContext, "sensor.tv_en_media_this_month_s_consumption");
    ///<summary>TV en Media Today&apos;s consumption</summary>
    public NumericSensorEntity TvEnMediaTodaySConsumption => new(_haContext, "sensor.tv_en_media_today_s_consumption");
    ///<summary>Vaatwasser  Huidig gebruik</summary>
    public NumericSensorEntity VaatwasserHuidigGebruik => new(_haContext, "sensor.vaatwasser_huidig_gebruik");
    ///<summary>Vaatwasser  Spanning</summary>
    public NumericSensorEntity VaatwasserSpanning => new(_haContext, "sensor.vaatwasser_spanning");
    ///<summary>Vaatwasser  Stroom</summary>
    public NumericSensorEntity VaatwasserStroom => new(_haContext, "sensor.vaatwasser_stroom");
    ///<summary>Vaatwasser  This month&apos;s consumption</summary>
    public NumericSensorEntity VaatwasserThisMonthSConsumption => new(_haContext, "sensor.vaatwasser_this_month_s_consumption");
    ///<summary>Vaatwasser  Today&apos;s consumption</summary>
    public NumericSensorEntity VaatwasserTodaySConsumption => new(_haContext, "sensor.vaatwasser_today_s_consumption");
    ///<summary>Voordeur Batterij</summary>
    public NumericSensorEntity VoordeurBatterij => new(_haContext, "sensor.voordeur_batterij");
    ///<summary>Battery</summary>
    public NumericSensorEntity VoordeurBattery => new(_haContext, "sensor.voordeur_battery");
    ///<summary>Battery</summary>
    public NumericSensorEntity VoordeurContactSensorBattery => new(_haContext, "sensor.voordeur_contact_sensor_battery");
    ///<summary>Battery</summary>
    public NumericSensorEntity VoordeurMotionSensorBattery2 => new(_haContext, "sensor.voordeur_motion_sensor_battery_2");
    ///<summary>Wasmachine  Huidig gebruik</summary>
    public NumericSensorEntity WasmachineHuidigGebruik => new(_haContext, "sensor.wasmachine_huidig_gebruik");
    ///<summary>Wasmachine  Spanning</summary>
    public NumericSensorEntity WasmachineSpanning => new(_haContext, "sensor.wasmachine_spanning");
    ///<summary>Wasmachine  Stroom</summary>
    public NumericSensorEntity WasmachineStroom => new(_haContext, "sensor.wasmachine_stroom");
    ///<summary>Wasmachine  This month&apos;s consumption</summary>
    public NumericSensorEntity WasmachineThisMonthSConsumption => new(_haContext, "sensor.wasmachine_this_month_s_consumption");
    ///<summary>Wasmachine  Today&apos;s consumption</summary>
    public NumericSensorEntity WasmachineTodaySConsumption => new(_haContext, "sensor.wasmachine_today_s_consumption");
    ///<summary>Woonkamer Batterij</summary>
    public NumericSensorEntity WoonkamerBatterij => new(_haContext, "sensor.woonkamer_batterij");
    ///<summary>Wireless</summary>
    public NumericSensorEntity WoonkamerCameraWireless => new(_haContext, "sensor.woonkamer_camera_wireless");
    ///<summary>Zonkans 1d</summary>
    public NumericSensorEntity Zonkans1d => new(_haContext, "sensor.zonkans_1d");
}

public partial class SirenEntities
{
    private readonly IHaContext _haContext;
    public SirenEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all siren entities currently registered (at runtime) in Home Assistant as SirenEntity</summary>
    public IEnumerable<SirenEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("siren.")).Select(e => new SirenEntity(e));
    ///<summary>Chime Keuken Sirene</summary>
    public SirenEntity BenedenSirene => new(_haContext, "siren.beneden_sirene");
    ///<summary>Tuin Sirene</summary>
    public SirenEntity TuinSirene => new(_haContext, "siren.tuin_sirene");
    ///<summary>Woonkamer Sirene</summary>
    public SirenEntity WoonkamerSirene => new(_haContext, "siren.woonkamer_sirene");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sun entities currently registered (at runtime) in Home Assistant as SunEntity</summary>
    public IEnumerable<SunEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sun.")).Select(e => new SunEntity(e));
    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all switch entities currently registered (at runtime) in Home Assistant as SwitchEntity</summary>
    public IEnumerable<SwitchEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("switch.")).Select(e => new SwitchEntity(e));
    ///<summary>AdGuard Home Filteren</summary>
    public SwitchEntity AdguardHomeFiltering => new(_haContext, "switch.adguard_home_filtering");
    ///<summary>AdGuard Home Ouderlijk toezicht</summary>
    public SwitchEntity AdguardHomeParentalControl => new(_haContext, "switch.adguard_home_parental_control");
    ///<summary>AdGuard Home Bescherming</summary>
    public SwitchEntity AdguardHomeProtection => new(_haContext, "switch.adguard_home_protection");
    ///<summary>AdGuard Home Query logboek</summary>
    public SwitchEntity AdguardHomeQueryLog => new(_haContext, "switch.adguard_home_query_log");
    ///<summary>AdGuard Home Veilig browsen</summary>
    public SwitchEntity AdguardHomeSafeBrowsing => new(_haContext, "switch.adguard_home_safe_browsing");
    ///<summary>AdGuard Home Veilig zoeken</summary>
    public SwitchEntity AdguardHomeSafeSearch => new(_haContext, "switch.adguard_home_safe_search");
    ///<summary>Audio</summary>
    public SwitchEntity Audio => new(_haContext, "switch.audio");
    ///<summary>Audio Auto-off enabled</summary>
    public SwitchEntity AudioAutoOffEnabled => new(_haContext, "switch.audio_auto_off_enabled");
    ///<summary>Audio Auto-update enabled</summary>
    public SwitchEntity AudioAutoUpdateEnabled => new(_haContext, "switch.audio_auto_update_enabled");
    ///<summary>Audio LED</summary>
    public SwitchEntity AudioLed => new(_haContext, "switch.audio_led");
    ///<summary>Computer</summary>
    public SwitchEntity Computer => new(_haContext, "switch.computer");
    ///<summary>Computer Auto-off enabled</summary>
    public SwitchEntity ComputerAutoOffEnabled => new(_haContext, "switch.computer_auto_off_enabled");
    ///<summary>Computer Auto-update enabled</summary>
    public SwitchEntity ComputerAutoUpdateEnabled => new(_haContext, "switch.computer_auto_update_enabled");
    ///<summary>Computer LED</summary>
    public SwitchEntity ComputerLed => new(_haContext, "switch.computer_led");
    ///<summary>Event Stream</summary>
    public SwitchEntity DeurbelEventStream => new(_haContext, "switch.deurbel_event_stream");
    ///<summary>Live Stream</summary>
    public SwitchEntity DeurbelLiveStream => new(_haContext, "switch.deurbel_live_stream");
    ///<summary>Motion Detection</summary>
    public SwitchEntity DeurbelMotionDetection => new(_haContext, "switch.deurbel_motion_detection");
    ///<summary>Droger en Vriezer</summary>
    public SwitchEntity DrogerEnVriezer => new(_haContext, "switch.droger_en_vriezer");
    ///<summary>Droger en Vriezer Auto-off enabled</summary>
    public SwitchEntity DrogerEnVriezerAutoOffEnabled => new(_haContext, "switch.droger_en_vriezer_auto_off_enabled");
    ///<summary>Droger en Vriezer Auto-update enabled</summary>
    public SwitchEntity DrogerEnVriezerAutoUpdateEnabled => new(_haContext, "switch.droger_en_vriezer_auto_update_enabled");
    ///<summary>Droger en Vriezer LED</summary>
    public SwitchEntity DrogerEnVriezerLed => new(_haContext, "switch.droger_en_vriezer_led");
    ///<summary>Echo Pop Mark do not disturb switch</summary>
    public SwitchEntity EchoPopMarkDoNotDisturbSwitch => new(_haContext, "switch.echo_pop_mark_do_not_disturb_switch");
    ///<summary>Echo Pop Mark repeat switch</summary>
    public SwitchEntity EchoPopMarkRepeatSwitch => new(_haContext, "switch.echo_pop_mark_repeat_switch");
    ///<summary>Echo Pop Mark shuffle switch</summary>
    public SwitchEntity EchoPopMarkShuffleSwitch => new(_haContext, "switch.echo_pop_mark_shuffle_switch");
    ///<summary>Siren</summary>
    public SwitchEntity EmmeloordAlarmSiren => new(_haContext, "switch.emmeloord_alarm_siren");
    ///<summary>EMS</summary>
    public SwitchEntity Ems => new(_haContext, "switch.ems");
    ///<summary>EMS Auto-off enabled</summary>
    public SwitchEntity EmsAutoOffEnabled => new(_haContext, "switch.ems_auto_off_enabled");
    ///<summary>EMS Auto-update enabled</summary>
    public SwitchEntity EmsAutoUpdateEnabled => new(_haContext, "switch.ems_auto_update_enabled");
    ///<summary>EMS LED</summary>
    public SwitchEntity EmsLed => new(_haContext, "switch.ems_led");
    ///<summary>Everywhere do not disturb switch</summary>
    public SwitchEntity EverywhereDoNotDisturbSwitch => new(_haContext, "switch.everywhere_do_not_disturb_switch");
    ///<summary>Everywhere repeat switch</summary>
    public SwitchEntity EverywhereRepeatSwitch => new(_haContext, "switch.everywhere_repeat_switch");
    ///<summary>Everywhere shuffle switch</summary>
    public SwitchEntity EverywhereShuffleSwitch => new(_haContext, "switch.everywhere_shuffle_switch");
    ///<summary>Garage</summary>
    public SwitchEntity Garage => new(_haContext, "switch.garage");
    ///<summary>Garage Auto-off enabled</summary>
    public SwitchEntity GarageAutoOffEnabled => new(_haContext, "switch.garage_auto_off_enabled");
    ///<summary>Garage Auto-update enabled</summary>
    public SwitchEntity GarageAutoUpdateEnabled => new(_haContext, "switch.garage_auto_update_enabled");
    ///<summary>Garage LED</summary>
    public SwitchEntity GarageLed => new(_haContext, "switch.garage_led");
    ///<summary>Play Ding Sound</summary>
    public SwitchEntity KeukenChimePlayDingSound => new(_haContext, "switch.keuken_chime_play_ding_sound");
    ///<summary>Play Motion Sound</summary>
    public SwitchEntity KeukenChimePlayMotionSound => new(_haContext, "switch.keuken_chime_play_motion_sound");
    ///<summary>Snooze</summary>
    public SwitchEntity KeukenChimeSnooze => new(_haContext, "switch.keuken_chime_snooze");
    ///<summary>LG OLED TV do not disturb switch</summary>
    public SwitchEntity LgOledTvDoNotDisturbSwitch => new(_haContext, "switch.lg_oled_tv_do_not_disturb_switch");
    ///<summary>LG OLED TV repeat switch</summary>
    public SwitchEntity LgOledTvRepeatSwitch => new(_haContext, "switch.lg_oled_tv_repeat_switch");
    ///<summary>LG OLED TV shuffle switch</summary>
    public SwitchEntity LgOledTvShuffleSwitch => new(_haContext, "switch.lg_oled_tv_shuffle_switch");
    ///<summary>Mark&apos;s 2nd WiiM Ultra do not disturb switch</summary>
    public SwitchEntity MarkS2ndWiimUltraDoNotDisturbSwitch => new(_haContext, "switch.mark_s_2nd_wiim_ultra_do_not_disturb_switch");
    ///<summary>Mark&apos;s 2nd WiiM Ultra repeat switch</summary>
    public SwitchEntity MarkS2ndWiimUltraRepeatSwitch => new(_haContext, "switch.mark_s_2nd_wiim_ultra_repeat_switch");
    ///<summary>Mark&apos;s 2nd WiiM Ultra shuffle switch</summary>
    public SwitchEntity MarkS2ndWiimUltraShuffleSwitch => new(_haContext, "switch.mark_s_2nd_wiim_ultra_shuffle_switch");
    ///<summary>Mark&apos;s Bose QuietComfort 35 II do not disturb switch</summary>
    public SwitchEntity MarkSBoseQuietcomfort35IiDoNotDisturbSwitch => new(_haContext, "switch.mark_s_bose_quietcomfort_35_ii_do_not_disturb_switch");
    ///<summary>Mark&apos;s Bose QuietComfort 35 II repeat switch</summary>
    public SwitchEntity MarkSBoseQuietcomfort35IiRepeatSwitch => new(_haContext, "switch.mark_s_bose_quietcomfort_35_ii_repeat_switch");
    ///<summary>Mark&apos;s Bose QuietComfort 35 II shuffle switch</summary>
    public SwitchEntity MarkSBoseQuietcomfort35IiShuffleSwitch => new(_haContext, "switch.mark_s_bose_quietcomfort_35_ii_shuffle_switch");
    ///<summary>Mark&apos;s Echo Dot do not disturb switch</summary>
    public SwitchEntity MarkSEchoDotDoNotDisturbSwitch => new(_haContext, "switch.mark_s_echo_dot_do_not_disturb_switch");
    ///<summary>Mark&apos;s Echo Dot repeat switch</summary>
    public SwitchEntity MarkSEchoDotRepeatSwitch => new(_haContext, "switch.mark_s_echo_dot_repeat_switch");
    ///<summary>Mark&apos;s Echo Dot shuffle switch</summary>
    public SwitchEntity MarkSEchoDotShuffleSwitch => new(_haContext, "switch.mark_s_echo_dot_shuffle_switch");
    ///<summary>Mark&apos;s Echo Show do not disturb switch</summary>
    public SwitchEntity MarkSEchoShowDoNotDisturbSwitch => new(_haContext, "switch.mark_s_echo_show_do_not_disturb_switch");
    ///<summary>Mark&apos;s Echo Show repeat switch</summary>
    public SwitchEntity MarkSEchoShowRepeatSwitch => new(_haContext, "switch.mark_s_echo_show_repeat_switch");
    ///<summary>Mark&apos;s Echo Show shuffle switch</summary>
    public SwitchEntity MarkSEchoShowShuffleSwitch => new(_haContext, "switch.mark_s_echo_show_shuffle_switch");
    ///<summary>Mark&apos;s WiiM Ultra do not disturb switch</summary>
    public SwitchEntity MarkSWiimUltraDoNotDisturbSwitch => new(_haContext, "switch.mark_s_wiim_ultra_do_not_disturb_switch");
    ///<summary>Mark&apos;s WiiM Ultra repeat switch</summary>
    public SwitchEntity MarkSWiimUltraRepeatSwitch => new(_haContext, "switch.mark_s_wiim_ultra_repeat_switch");
    ///<summary>Mark&apos;s WiiM Ultra shuffle switch</summary>
    public SwitchEntity MarkSWiimUltraShuffleSwitch => new(_haContext, "switch.mark_s_wiim_ultra_shuffle_switch");
    ///<summary>Our home Away Mode</summary>
    public SwitchEntity OurHomeAwayMode => new(_haContext, "switch.our_home_away_mode");
    ///<summary>Our home Domestic Hot Water 0 Boost</summary>
    public SwitchEntity OurHomeDomesticHotWater0Boost => new(_haContext, "switch.our_home_domestic_hot_water_0_boost");
    ///<summary>Our home EEBUS</summary>
    public SwitchEntity OurHomeEebus => new(_haContext, "switch.our_home_eebus");
    ///<summary>Our home Manual Cooling</summary>
    public SwitchEntity OurHomeManualCooling => new(_haContext, "switch.our_home_manual_cooling");
    ///<summary>Our home Zone Thuis (Circuit 0) Ventilation Boost</summary>
    public SwitchEntity OurHomeZoneThuisCircuit0VentilationBoost => new(_haContext, "switch.our_home_zone_thuis_circuit_0_ventilation_boost");
    ///<summary>Q7 Max Dock Kinderslot</summary>
    public SwitchEntity Q7MaxDockKinderslot => new(_haContext, "switch.q7_max_dock_kinderslot");
    ///<summary>Q7 Max Niet storen</summary>
    public SwitchEntity Q7MaxNietStoren => new(_haContext, "switch.q7_max_niet_storen");
    ///<summary>Spotjes Verlichting</summary>
    public SwitchEntity SpotjesVerlichting => new(_haContext, "switch.spotjes_verlichting");
    ///<summary>Spotjes Verlichting Auto-off enabled</summary>
    public SwitchEntity SpotjesVerlichtingAutoOffEnabled => new(_haContext, "switch.spotjes_verlichting_auto_off_enabled");
    ///<summary>Spotjes Verlichting Auto-update enabled</summary>
    public SwitchEntity SpotjesVerlichtingAutoUpdateEnabled => new(_haContext, "switch.spotjes_verlichting_auto_update_enabled");
    ///<summary>Spotjes Verlichting LED</summary>
    public SwitchEntity SpotjesVerlichtingLed => new(_haContext, "switch.spotjes_verlichting_led");
    ///<summary>This Device do not disturb switch</summary>
    public SwitchEntity ThisDeviceDoNotDisturbSwitch => new(_haContext, "switch.this_device_do_not_disturb_switch");
    ///<summary>Chirps</summary>
    public SwitchEntity ToetsenpaneelIngangChirps => new(_haContext, "switch.toetsenpaneel_ingang_chirps");
    ///<summary>Event Stream</summary>
    public SwitchEntity TuinCameraEventStream => new(_haContext, "switch.tuin_camera_event_stream");
    ///<summary>Live Stream</summary>
    public SwitchEntity TuinCameraLiveStream => new(_haContext, "switch.tuin_camera_live_stream");
    ///<summary>Motion Detection</summary>
    public SwitchEntity TuinCameraMotionDetection => new(_haContext, "switch.tuin_camera_motion_detection");
    ///<summary>Motion Warning</summary>
    public SwitchEntity TuinCameraMotionWarning => new(_haContext, "switch.tuin_camera_motion_warning");
    ///<summary>Siren</summary>
    public SwitchEntity TuinCameraSiren => new(_haContext, "switch.tuin_camera_siren");
    ///<summary>Tuin Bewegingsdetectie</summary>
    public SwitchEntity TuinMotionDetection => new(_haContext, "switch.tuin_motion_detection");
    ///<summary>Tuinhuis verlichting </summary>
    public SwitchEntity TuinhuisVerlichting => new(_haContext, "switch.tuinhuis_verlichting");
    ///<summary>Tuinhuis verlichting  Auto-off enabled</summary>
    public SwitchEntity TuinhuisVerlichtingAutoOffEnabled => new(_haContext, "switch.tuinhuis_verlichting_auto_off_enabled");
    ///<summary>Tuinhuis verlichting  Auto-update enabled</summary>
    public SwitchEntity TuinhuisVerlichtingAutoUpdateEnabled => new(_haContext, "switch.tuinhuis_verlichting_auto_update_enabled");
    ///<summary>Tuinhuis verlichting  LED</summary>
    public SwitchEntity TuinhuisVerlichtingLed => new(_haContext, "switch.tuinhuis_verlichting_led");
    ///<summary>TV en Media</summary>
    public SwitchEntity TvEnMedia => new(_haContext, "switch.tv_en_media");
    ///<summary>TV en Media Auto-off enabled</summary>
    public SwitchEntity TvEnMediaAutoOffEnabled => new(_haContext, "switch.tv_en_media_auto_off_enabled");
    ///<summary>TV en Media Auto-update enabled</summary>
    public SwitchEntity TvEnMediaAutoUpdateEnabled => new(_haContext, "switch.tv_en_media_auto_update_enabled");
    ///<summary>TV en Media LED</summary>
    public SwitchEntity TvEnMediaLed => new(_haContext, "switch.tv_en_media_led");
    ///<summary>Vaatwasser </summary>
    public SwitchEntity Vaatwasser => new(_haContext, "switch.vaatwasser");
    ///<summary>Vaatwasser  Auto-off enabled</summary>
    public SwitchEntity VaatwasserAutoOffEnabled => new(_haContext, "switch.vaatwasser_auto_off_enabled");
    ///<summary>Vaatwasser  Auto-update enabled</summary>
    public SwitchEntity VaatwasserAutoUpdateEnabled => new(_haContext, "switch.vaatwasser_auto_update_enabled");
    ///<summary>Vaatwasser  LED</summary>
    public SwitchEntity VaatwasserLed => new(_haContext, "switch.vaatwasser_led");
    ///<summary>Voordeur Bewegingsdetectie</summary>
    public SwitchEntity VoordeurMotionDetection => new(_haContext, "switch.voordeur_motion_detection");
    ///<summary>Wasmachine </summary>
    public SwitchEntity Wasmachine => new(_haContext, "switch.wasmachine");
    ///<summary>Wasmachine  Auto-off enabled</summary>
    public SwitchEntity WasmachineAutoOffEnabled => new(_haContext, "switch.wasmachine_auto_off_enabled");
    ///<summary>Wasmachine  Auto-update enabled</summary>
    public SwitchEntity WasmachineAutoUpdateEnabled => new(_haContext, "switch.wasmachine_auto_update_enabled");
    ///<summary>Wasmachine  LED</summary>
    public SwitchEntity WasmachineLed => new(_haContext, "switch.wasmachine_led");
    ///<summary>Event Stream</summary>
    public SwitchEntity WoonkamerCameraEventStream => new(_haContext, "switch.woonkamer_camera_event_stream");
    ///<summary>Live Stream</summary>
    public SwitchEntity WoonkamerCameraLiveStream => new(_haContext, "switch.woonkamer_camera_live_stream");
    ///<summary>Motion Detection</summary>
    public SwitchEntity WoonkamerCameraMotionDetection => new(_haContext, "switch.woonkamer_camera_motion_detection");
    ///<summary>Motion Warning</summary>
    public SwitchEntity WoonkamerCameraMotionWarning => new(_haContext, "switch.woonkamer_camera_motion_warning");
    ///<summary>Siren</summary>
    public SwitchEntity WoonkamerCameraSiren => new(_haContext, "switch.woonkamer_camera_siren");
    ///<summary>Woonkamer Bewegingsdetectie</summary>
    public SwitchEntity WoonkamerMotionDetection => new(_haContext, "switch.woonkamer_motion_detection");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all update entities currently registered (at runtime) in Home Assistant as UpdateEntity</summary>
    public IEnumerable<UpdateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("update.")).Select(e => new UpdateEntity(e));
    ///<summary>AdGuard Home Update</summary>
    public UpdateEntity AdguardHomeUpdate => new(_haContext, "update.adguard_home_update");
    ///<summary>Alexa Media Player update</summary>
    public UpdateEntity AlexaMediaPlayerUpdate => new(_haContext, "update.alexa_media_player_update");
    ///<summary>apexcharts-card update</summary>
    public UpdateEntity ApexchartsCardUpdate => new(_haContext, "update.apexcharts_card_update");
    ///<summary>Attribute as Sensor update</summary>
    public UpdateEntity AttributeAsSensorUpdate => new(_haContext, "update.attribute_as_sensor_update");
    ///<summary>Badkamer Meubel Firmware</summary>
    public UpdateEntity BadkamerMeubelFirmware => new(_haContext, "update.badkamer_meubel_firmware");
    ///<summary>Buienalarm update</summary>
    public UpdateEntity BuienalarmUpdate => new(_haContext, "update.buienalarm_update");
    ///<summary>button-card update</summary>
    public UpdateEntity ButtonCardUpdate => new(_haContext, "update.button_card_update");
    ///<summary>CEC Scanner Update</summary>
    public UpdateEntity CecScannerUpdate => new(_haContext, "update.cec_scanner_update");
    ///<summary>Clock Weather Card update</summary>
    public UpdateEntity ClockWeatherCardUpdate => new(_haContext, "update.clock_weather_card_update");
    ///<summary>Duck DNS Update</summary>
    public UpdateEntity DuckDnsUpdate => new(_haContext, "update.duck_dns_update");
    ///<summary>File editor Update</summary>
    public UpdateEntity FileEditorUpdate => new(_haContext, "update.file_editor_update");
    ///<summary>Graphite Theme update</summary>
    public UpdateEntity GraphiteThemeUpdate => new(_haContext, "update.graphite_theme_update");
    ///<summary>Gree A/C update</summary>
    public UpdateEntity GreeACUpdate => new(_haContext, "update.gree_a_c_update");
    ///<summary>HACS update</summary>
    public UpdateEntity HacsUpdate => new(_haContext, "update.hacs_update");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Google Drive Backup Update</summary>
    public UpdateEntity HomeAssistantGoogleDriveBackupUpdate => new(_haContext, "update.home_assistant_google_drive_backup_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>IKEA of Sweden Remote Control N2 Firmware</summary>
    public UpdateEntity IkeaOfSwedenRemoteControlN2Firmware => new(_haContext, "update.ikea_of_sweden_remote_control_n2_firmware");
    ///<summary>Jellyfin NAS Update</summary>
    public UpdateEntity JellyfinNasUpdate => new(_haContext, "update.jellyfin_nas_update");
    ///<summary>layout-card update</summary>
    public UpdateEntity LayoutCardUpdate => new(_haContext, "update.layout_card_update");
    ///<summary>Matter Server Update</summary>
    public UpdateEntity MatterServerUpdate => new(_haContext, "update.matter_server_update");
    ///<summary>mini-graph-card update</summary>
    public UpdateEntity MiniGraphCardUpdate => new(_haContext, "update.mini_graph_card_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>Mushroom update</summary>
    public UpdateEntity MushroomUpdate => new(_haContext, "update.mushroom_update");
    ///<summary>MyVaillant update</summary>
    public UpdateEntity MyvaillantUpdate => new(_haContext, "update.myvaillant_update");
    ///<summary>Neerslag App update</summary>
    public UpdateEntity NeerslagAppUpdate => new(_haContext, "update.neerslag_app_update");
    ///<summary>NetDaemon update</summary>
    public UpdateEntity NetdaemonUpdate => new(_haContext, "update.netdaemon_update");
    ///<summary>NetDaemon V5 (.NET 9) Update</summary>
    public UpdateEntity NetdaemonV5Net9Update => new(_haContext, "update.netdaemon_v5_net_9_update");
    ///<summary>NGINX Home Assistant SSL proxy Update</summary>
    public UpdateEntity NginxHomeAssistantSslProxyUpdate => new(_haContext, "update.nginx_home_assistant_ssl_proxy_update");
    ///<summary>nordpool update</summary>
    public UpdateEntity NordpoolUpdate => new(_haContext, "update.nordpool_update");
    ///<summary>Power Flow Card Plus update</summary>
    public UpdateEntity PowerFlowCardPlusUpdate => new(_haContext, "update.power_flow_card_plus_update");
    ///<summary>qBittorrent Update</summary>
    public UpdateEntity QbittorrentUpdate => new(_haContext, "update.qbittorrent_update");
    ///<summary>Ring-MQTT with Video Streaming Update</summary>
    public UpdateEntity RingMqttWithVideoStreamingUpdate => new(_haContext, "update.ring_mqtt_with_video_streaming_update");
    ///<summary>SAJ Elekeeper update</summary>
    public UpdateEntity SajElekeeperUpdate => new(_haContext, "update.saj_elekeeper_update");
    ///<summary>Samba NAS Update</summary>
    public UpdateEntity SambaNasUpdate => new(_haContext, "update.samba_nas_update");
    ///<summary>Advanced SSH &amp; Web Terminal Update</summary>
    public UpdateEntity SshWebTerminalUpdate => new(_haContext, "update.ssh_web_terminal_update");
    ///<summary>Swipe Card update</summary>
    public UpdateEntity SwipeCardUpdate => new(_haContext, "update.swipe_card_update");
}

public partial class WaterHeaterEntities
{
    private readonly IHaContext _haContext;
    public WaterHeaterEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all water_heater entities currently registered (at runtime) in Home Assistant as WaterHeaterEntity</summary>
    public IEnumerable<WaterHeaterEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("water_heater.")).Select(e => new WaterHeaterEntity(e));
    ///<summary>Our home Domestic Hot Water 0</summary>
    public WaterHeaterEntity OurHomeDomesticHotWater0 => new(_haContext, "water_heater.our_home_domestic_hot_water_0");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all weather entities currently registered (at runtime) in Home Assistant as WeatherEntity</summary>
    public IEnumerable<WeatherEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("weather.")).Select(e => new WeatherEntity(e));
    ///<summary>Buienradar</summary>
    public WeatherEntity Buienradar => new(_haContext, "weather.buienradar");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all zone entities currently registered (at runtime) in Home Assistant as ZoneEntity</summary>
    public IEnumerable<ZoneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("zone.")).Select(e => new ZoneEntity(e));
    ///<summary>Thuis</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all script entities currently registered (at runtime) in Home Assistant as ScriptEntity</summary>
    public IEnumerable<ScriptEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("script.")).Select(e => new ScriptEntity(e));
    ///<summary>Say with Alexa</summary>
    public ScriptEntity SayWithAlexa => new(_haContext, "script.say_with_alexa");
    ///<summary>Toggle Lamp Eettafel</summary>
    public ScriptEntity ToggleLampEettafel => new(_haContext, "script.toggle_lamp_eettafel");
    ///<summary>Water opwarmen</summary>
    public ScriptEntity WaterOpwarmen => new(_haContext, "script.water_opwarmen");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all event entities currently registered (at runtime) in Home Assistant as EventEntity</summary>
    public IEnumerable<EventEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("event.")).Select(e => new EventEntity(e));
    ///<summary>Backup Automatic backup</summary>
    public EventEntity BackupAutomaticBackup => new(_haContext, "event.backup_automatic_backup");
    ///<summary>Tuin Beweging</summary>
    public EventEntity TuinBeweging => new(_haContext, "event.tuin_beweging");
    ///<summary>Voordeur Beweging</summary>
    public EventEntity VoordeurBeweging => new(_haContext, "event.voordeur_beweging");
    ///<summary>Voordeur Ding</summary>
    public EventEntity VoordeurDing => new(_haContext, "event.voordeur_ding");
    ///<summary>Woonkamer Beweging</summary>
    public EventEntity WoonkamerBeweging => new(_haContext, "event.woonkamer_beweging");
}

public partial class ImageEntities
{
    private readonly IHaContext _haContext;
    public ImageEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all image entities currently registered (at runtime) in Home Assistant as ImageEntity</summary>
    public IEnumerable<ImageEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("image.")).Select(e => new ImageEntity(e));
    ///<summary>Q7 Max Beneden</summary>
    public ImageEntity Q7MaxBeneden => new(_haContext, "image.q7_max_beneden");
}

public partial class TimeEntities
{
    private readonly IHaContext _haContext;
    public TimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all time entities currently registered (at runtime) in Home Assistant as TimeEntity</summary>
    public IEnumerable<TimeEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("time.")).Select(e => new TimeEntity(e));
    ///<summary>Q7 Max Niet storen begin</summary>
    public TimeEntity Q7MaxNietStorenBegin => new(_haContext, "time.q7_max_niet_storen_begin");
    ///<summary>Q7 Max Niet storen einde</summary>
    public TimeEntity Q7MaxNietStorenEinde => new(_haContext, "time.q7_max_niet_storen_einde");
}

public partial class VacuumEntities
{
    private readonly IHaContext _haContext;
    public VacuumEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all vacuum entities currently registered (at runtime) in Home Assistant as VacuumEntity</summary>
    public IEnumerable<VacuumEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("vacuum.")).Select(e => new VacuumEntity(e));
    ///<summary>Q7 Max</summary>
    public VacuumEntity Q7Max => new(_haContext, "vacuum.q7_max");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_text entities currently registered (at runtime) in Home Assistant as InputTextEntity</summary>
    public IEnumerable<InputTextEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_text.")).Select(e => new InputTextEntity(e));
    ///<summary>heating_schedule_status</summary>
    public InputTextEntity HeatingScheduleStatus => new(_haContext, "input_text.heating_schedule_status");
}

public partial class InputDatetimeEntities
{
    private readonly IHaContext _haContext;
    public InputDatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_datetime entities currently registered (at runtime) in Home Assistant as InputDatetimeEntity</summary>
    public IEnumerable<InputDatetimeEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_datetime.")).Select(e => new InputDatetimeEntity(e));
    ///<summary>LastWaterHygieneProgram</summary>
    public InputDatetimeEntity Lastwaterhygieneprogram => new(_haContext, "input_datetime.lastwaterhygieneprogram");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }

    [JsonPropertyName("available")]
    public bool? Available { get; init; }

    [JsonPropertyName("last_called")]
    public bool? LastCalled { get; init; }

    [JsonPropertyName("last_called_timestamp")]
    public double? LastCalledTimestamp { get; init; }

    [JsonPropertyName("last_called_summary")]
    public string? LastCalledSummary { get; init; }

    [JsonPropertyName("connected_bluetooth")]
    public object? ConnectedBluetooth { get; init; }

    [JsonPropertyName("bluetooth_list")]
    public IReadOnlyList<string>? BluetoothList { get; init; }

    [JsonPropertyName("group_members")]
    public IReadOnlyList<object>? GroupMembers { get; init; }

    [JsonPropertyName("previous_volume")]
    public double? PreviousVolume { get; init; }

    [JsonPropertyName("history_records")]
    public IReadOnlyList<object>? HistoryRecords { get; init; }
}

public partial record AlarmControlPanelEntity : Entity<AlarmControlPanelEntity, EntityState<AlarmControlPanelAttributes>, AlarmControlPanelAttributes>
{
    public AlarmControlPanelEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AlarmControlPanelEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AlarmControlPanelAttributes
{
    [JsonPropertyName("code_format")]
    public object? CodeFormat { get; init; }

    [JsonPropertyName("changed_by")]
    public object? ChangedBy { get; init; }

    [JsonPropertyName("code_arm_required")]
    public bool? CodeArmRequired { get; init; }

    [JsonPropertyName("alarmClearedBy")]
    public string? AlarmClearedBy { get; init; }

    [JsonPropertyName("alarmClearedTime")]
    public string? AlarmClearedTime { get; init; }

    [JsonPropertyName("entrySecondsLeft")]
    public double? EntrySecondsLeft { get; init; }

    [JsonPropertyName("exitSecondsLeft")]
    public double? ExitSecondsLeft { get; init; }

    [JsonPropertyName("lastArmedBy")]
    public string? LastArmedBy { get; init; }

    [JsonPropertyName("lastArmedTime")]
    public string? LastArmedTime { get; init; }

    [JsonPropertyName("lastDisarmedBy")]
    public string? LastDisarmedBy { get; init; }

    [JsonPropertyName("lastDisarmedTime")]
    public string? LastDisarmedTime { get; init; }

    [JsonPropertyName("targetState")]
    public string? TargetState { get; init; }

    [JsonPropertyName("DisarmedBy")]
    public string? DisarmedBy { get; init; }

    [JsonPropertyName("DisarmedTime")]
    public string? DisarmedTime { get; init; }

    [JsonPropertyName("ArmedBy")]
    public string? ArmedBy { get; init; }

    [JsonPropertyName("ArmedTime")]
    public string? ArmedTime { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("state")]
    public string? State { get; init; }

    [JsonPropertyName("expires_at")]
    public string? ExpiresAt { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("diagnostic_trouble_codes")]
    public IReadOnlyList<object>? DiagnosticTroubleCodes { get; init; }

    [JsonPropertyName("lastDing")]
    public double? LastDing { get; init; }

    [JsonPropertyName("lastDingTime")]
    public string? LastDingTime { get; init; }

    [JsonPropertyName("lastMotion")]
    public double? LastMotion { get; init; }

    [JsonPropertyName("lastMotionTime")]
    public string? LastMotionTime { get; init; }

    [JsonPropertyName("personDetected")]
    public bool? PersonDetected { get; init; }

    [JsonPropertyName("motionDetectionEnabled")]
    public bool? MotionDetectionEnabled { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("after")]
    public string? After { get; init; }

    [JsonPropertyName("before")]
    public string? Before { get; init; }

    [JsonPropertyName("next_update")]
    public string? NextUpdate { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>, ICalendarEntityCore
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("all_day")]
    public bool? AllDay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("motion_detection")]
    public bool? MotionDetection { get; init; }

    [JsonPropertyName("video_url")]
    public string? VideoUrl { get; init; }

    [JsonPropertyName("last_video_id")]
    public double? LastVideoId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("current_humidity")]
    public double? CurrentHumidity { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("time_program_heating")]
    public object? TimeProgramHeating { get; init; }

    [JsonPropertyName("quick_veto_start_date_time")]
    public string? QuickVetoStartDateTime { get; init; }

    [JsonPropertyName("quick_veto_end_date_time")]
    public string? QuickVetoEndDateTime { get; init; }

    [JsonPropertyName("holiday_start_date_time")]
    public string? HolidayStartDateTime { get; init; }

    [JsonPropertyName("holiday_end_date_time")]
    public string? HolidayEndDateTime { get; init; }

    [JsonPropertyName("is_manual_cooling_active")]
    public bool? IsManualCoolingActive { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("target_temp_step")]
    public double? TargetTempStep { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("swing_modes")]
    public IReadOnlyList<string>? SwingModes { get; init; }

    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    [JsonPropertyName("swing_horizontal_modes")]
    public IReadOnlyList<string>? SwingHorizontalModes { get; init; }

    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }

    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }

    [JsonPropertyName("swing_horizontal_mode")]
    public string? SwingHorizontalMode { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DatetimeEntity : Entity<DatetimeEntity, EntityState<DatetimeAttributes>, DatetimeAttributes>
{
    public DatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DatetimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DatetimeAttributes
{
    [JsonPropertyName("holiday_ongoing")]
    public bool? HolidayOngoing { get; init; }

    [JsonPropertyName("holiday_remaining_seconds")]
    public object? HolidayRemainingSeconds { get; init; }

    [JsonPropertyName("holiday_start_date_time")]
    public object? HolidayStartDateTime { get; init; }

    [JsonPropertyName("holiday_end_date_time")]
    public object? HolidayEndDateTime { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("manual_cooling_ongoing")]
    public bool? ManualCoolingOngoing { get; init; }

    [JsonPropertyName("manual_cooling_remaining_seconds")]
    public object? ManualCoolingRemainingSeconds { get; init; }

    [JsonPropertyName("manual_cooling_start_date_time")]
    public string? ManualCoolingStartDateTime { get; init; }

    [JsonPropertyName("manual_cooling_end_date_time")]
    public string? ManualCoolingEndDateTime { get; init; }

    [JsonPropertyName("manual_cooling_days_remaining")]
    public double? ManualCoolingDaysRemaining { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record NotifyEntity : Entity<NotifyEntity, EntityState<NotifyAttributes>, NotifyAttributes>
{
    public NotifyEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NotifyEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NotifyAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("holiday_ongoing")]
    public bool? HolidayOngoing { get; init; }

    [JsonPropertyName("holiday_remaining_seconds")]
    public object? HolidayRemainingSeconds { get; init; }

    [JsonPropertyName("holiday_start_date_time")]
    public object? HolidayStartDateTime { get; init; }

    [JsonPropertyName("holiday_end_date_time")]
    public object? HolidayEndDateTime { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("activity_list")]
    public IReadOnlyList<object>? ActivityList { get; init; }

    [JsonPropertyName("current_activity")]
    public string? CurrentActivity { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("recordingUrl")]
    public string? RecordingUrl { get; init; }

    [JsonPropertyName("eventId")]
    public string? EventId { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("timeframe")]
    public string? Timeframe { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("created_at")]
    public string? CreatedAt { get; init; }

    [JsonPropertyName("answered")]
    public bool? Answered { get; init; }

    [JsonPropertyName("recording_status")]
    public string? RecordingStatus { get; init; }

    [JsonPropertyName("category")]
    public string? Category { get; init; }

    [JsonPropertyName("migration_finished_at")]
    public string? MigrationFinishedAt { get; init; }

    [JsonPropertyName("online_state")]
    public string? OnlineState { get; init; }

    [JsonPropertyName("cooling_start_temperature")]
    public double? CoolingStartTemperature { get; init; }

    [JsonPropertyName("continuous_heating_start_setpoint")]
    public double? ContinuousHeatingStartSetpoint { get; init; }

    [JsonPropertyName("alternative_point")]
    public double? AlternativePoint { get; init; }

    [JsonPropertyName("heating_circuit_bivalence_point")]
    public double? HeatingCircuitBivalencePoint { get; init; }

    [JsonPropertyName("dhw_bivalence_point")]
    public double? DhwBivalencePoint { get; init; }

    [JsonPropertyName("automatic_cooling_on_off")]
    public bool? AutomaticCoolingOnOff { get; init; }

    [JsonPropertyName("adaptive_heating_curve")]
    public bool? AdaptiveHeatingCurve { get; init; }

    [JsonPropertyName("dhw_maximum_loading_time")]
    public double? DhwMaximumLoadingTime { get; init; }

    [JsonPropertyName("dhw_hysteresis")]
    public double? DhwHysteresis { get; init; }

    [JsonPropertyName("dhw_flow_setpoint_offset")]
    public double? DhwFlowSetpointOffset { get; init; }

    [JsonPropertyName("continuous_heating_room_setpoint")]
    public double? ContinuousHeatingRoomSetpoint { get; init; }

    [JsonPropertyName("hybrid_control_strategy")]
    public string? HybridControlStrategy { get; init; }

    [JsonPropertyName("max_flow_setpoint_hp_error")]
    public double? MaxFlowSetpointHpError { get; init; }

    [JsonPropertyName("dhw_maximum_temperature")]
    public double? DhwMaximumTemperature { get; init; }

    [JsonPropertyName("maximum_preheating_time")]
    public double? MaximumPreheatingTime { get; init; }

    [JsonPropertyName("paralell_tank_loading_allowed")]
    public bool? ParalellTankLoadingAllowed { get; init; }

    [JsonPropertyName("outdoor_temperature")]
    public double? OutdoorTemperature { get; init; }

    [JsonPropertyName("outdoor_temperature_average24h")]
    public double? OutdoorTemperatureAverage24h { get; init; }

    [JsonPropertyName("system_water_pressure")]
    public double? SystemWaterPressure { get; init; }

    [JsonPropertyName("energy_manager_state")]
    public string? EnergyManagerState { get; init; }

    [JsonPropertyName("system_off")]
    public bool? SystemOff { get; init; }

    [JsonPropertyName("controller_type")]
    public string? ControllerType { get; init; }

    [JsonPropertyName("system_scheme")]
    public double? SystemScheme { get; init; }

    [JsonPropertyName("backup_heater_type")]
    public string? BackupHeaterType { get; init; }

    [JsonPropertyName("backup_heater_allowed_for")]
    public string? BackupHeaterAllowedFor { get; init; }

    [JsonPropertyName("temporary_allow_backup_heater")]
    public string? TemporaryAllowBackupHeater { get; init; }

    [JsonPropertyName("module_configuration_v_r71")]
    public double? ModuleConfigurationVR71 { get; init; }

    [JsonPropertyName("energy_provide_power_cut_behavior")]
    public string? EnergyProvidePowerCutBehavior { get; init; }

    [JsonPropertyName("smart_photovoltaic_buffer_offset")]
    public double? SmartPhotovoltaicBufferOffset { get; init; }

    [JsonPropertyName("external_energy_management_activation")]
    public bool? ExternalEnergyManagementActivation { get; init; }

    [JsonPropertyName("minimum_outside_temperature_cooling")]
    public double? MinimumOutsideTemperatureCooling { get; init; }

    [JsonPropertyName("heating_circuit_type")]
    public string? HeatingCircuitType { get; init; }

    [JsonPropertyName("heating_circuit_flow_setpoint_excess_offset")]
    public double? HeatingCircuitFlowSetpointExcessOffset { get; init; }

    [JsonPropertyName("room_temperature_control_mode")]
    public string? RoomTemperatureControlMode { get; init; }

    [JsonPropertyName("heat_demand_limited_by_outside_temperature")]
    public double? HeatDemandLimitedByOutsideTemperature { get; init; }

    [JsonPropertyName("epsilon")]
    public double? Epsilon { get; init; }

    [JsonPropertyName("timezone")]
    public string? Timezone { get; init; }

    [JsonPropertyName("heating_circuit_flow_setpoint")]
    public double? HeatingCircuitFlowSetpoint { get; init; }

    [JsonPropertyName("cooling_flow_temperature_minimum_setpoint")]
    public double? CoolingFlowTemperatureMinimumSetpoint { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("acStatus")]
    public string? AcStatus { get; init; }

    [JsonPropertyName("batteryStatus")]
    public string? BatteryStatus { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("commStatus")]
    public string? CommStatus { get; init; }

    [JsonPropertyName("lastCommTime")]
    public string? LastCommTime { get; init; }

    [JsonPropertyName("lastUpdate")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("serialNumber")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("tamperStatus")]
    public string? TamperStatus { get; init; }

    [JsonPropertyName("volume")]
    public double? Volume { get; init; }

    [JsonPropertyName("alarmState")]
    public string? AlarmState { get; init; }

    [JsonPropertyName("batteryLevel")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("chirps")]
    public string? Chirps { get; init; }

    [JsonPropertyName("firmwareStatus")]
    public string? FirmwareStatus { get; init; }

    [JsonPropertyName("linkQuality")]
    public string? LinkQuality { get; init; }

    [JsonPropertyName("powerSave")]
    public string? PowerSave { get; init; }

    [JsonPropertyName("stream_Source")]
    public string? StreamSource { get; init; }

    [JsonPropertyName("still_Image_URL")]
    public string? StillImageURL { get; init; }

    [JsonPropertyName("wirelessNetwork")]
    public string? WirelessNetwork { get; init; }

    [JsonPropertyName("wirelessSignal")]
    public double? WirelessSignal { get; init; }

    [JsonPropertyName("last_backup")]
    public string? LastBackup { get; init; }

    [JsonPropertyName("next_backup")]
    public string? NextBackup { get; init; }

    [JsonPropertyName("last_uploaded")]
    public string? LastUploaded { get; init; }

    [JsonPropertyName("backups_in_google_drive")]
    public double? BackupsInGoogleDrive { get; init; }

    [JsonPropertyName("backups_in_home_assistant")]
    public double? BackupsInHomeAssistant { get; init; }

    [JsonPropertyName("size_in_google_drive")]
    public string? SizeInGoogleDrive { get; init; }

    [JsonPropertyName("size_in_home_assistant")]
    public string? SizeInHomeAssistant { get; init; }

    [JsonPropertyName("backups")]
    public IReadOnlyList<object>? Backups { get; init; }

    [JsonPropertyName("free_space_in_google_drive")]
    public string? FreeSpaceInGoogleDrive { get; init; }

    [JsonPropertyName("recurrence")]
    public object? Recurrence { get; init; }

    [JsonPropertyName("process_timestamp")]
    public string? ProcessTimestamp { get; init; }

    [JsonPropertyName("prior_value")]
    public object? PriorValue { get; init; }

    [JsonPropertyName("total_active")]
    public double? TotalActive { get; init; }

    [JsonPropertyName("total_all")]
    public double? TotalAll { get; init; }

    [JsonPropertyName("sorted_active")]
    public string? SortedActive { get; init; }

    [JsonPropertyName("sorted_all")]
    public string? SortedAll { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("dismissed")]
    public object? Dismissed { get; init; }

    [JsonPropertyName("reminder")]
    public object? Reminder { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("data")]
    public object? Data { get; init; }

    [JsonPropertyName("is_legionalla_protection_activated")]
    public string? IsLegionallaProtectionActivated { get; init; }

    [JsonPropertyName("eebus")]
    public object? Eebus { get; init; }

    [JsonPropertyName("timer")]
    public object? Timer { get; init; }

    [JsonPropertyName("manual_cooling_start_date")]
    public string? ManualCoolingStartDate { get; init; }

    [JsonPropertyName("manual_cooling_end_date")]
    public string? ManualCoolingEndDate { get; init; }

    [JsonPropertyName("dhw_hysteresis_minimum")]
    public double? DhwHysteresisMinimum { get; init; }

    [JsonPropertyName("dhw_hysteresis_maximum")]
    public double? DhwHysteresisMaximum { get; init; }

    [JsonPropertyName("Stationname")]
    public string? Stationname { get; init; }

    [JsonPropertyName("Measured")]
    public string? Measured { get; init; }

    [JsonPropertyName("Plant UId")]
    public string? PlantUId { get; init; }

    [JsonPropertyName("Plant Total Co2 Reduction")]
    public double? PlantTotalCo2Reduction { get; init; }

    [JsonPropertyName("Plant total standard coal saved")]
    public double? Planttotalstandardcoalsaved { get; init; }

    [JsonPropertyName("Plant Total Trees Planted")]
    public double? PlantTotalTreesPlanted { get; init; }

    [JsonPropertyName("Plant this year Co2 Reduction (t)")]
    public double? PlantthisyearCo2Reductiont { get; init; }

    [JsonPropertyName("Plant this year standard coal saved (t)")]
    public double? Plantthisyearstandardcoalsavedt { get; init; }

    [JsonPropertyName("Plant this year trees planted (m3)")]
    public double? Plantthisyeartreesplantedm3 { get; init; }

    [JsonPropertyName("Latitude of the plant")]
    public double? Latitudeoftheplant { get; init; }

    [JsonPropertyName("Longitude of the plant")]
    public double? Longitudeoftheplant { get; init; }

    [JsonPropertyName("Picture of the plant")]
    public string? Pictureoftheplant { get; init; }

    [JsonPropertyName("Plant Address")]
    public string? PlantAddress { get; init; }

    [JsonPropertyName("First online datetime")]
    public string? Firstonlinedatetime { get; init; }

    [JsonPropertyName("Owner name")]
    public string? Ownername { get; init; }

    [JsonPropertyName("Owner email")]
    public string? Owneremail { get; init; }

    [JsonPropertyName("Plant No.")]
    public string? PlantNo_ { get; init; }

    [JsonPropertyName("Plant ID")]
    public string? PlantID { get; init; }

    [JsonPropertyName("Solar Power")]
    public double? SolarPower { get; init; }

    [JsonPropertyName("Plant today alarm number")]
    public double? Planttodayalarmnumber { get; init; }

    [JsonPropertyName("Alarm list")]
    public IReadOnlyList<object>? Alarmlist { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("timeframe")]
    public string? Timeframe { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("prices_today")]
    public IReadOnlyList<object>? PricesToday { get; init; }

    [JsonPropertyName("prices_tomorrow")]
    public IReadOnlyList<object>? PricesTomorrow { get; init; }

    [JsonPropertyName("prices")]
    public IReadOnlyList<object>? Prices { get; init; }

    [JsonPropertyName("batteryLevel")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("batteryStatus")]
    public string? BatteryStatus { get; init; }

    [JsonPropertyName("wirelessNetwork")]
    public string? WirelessNetwork { get; init; }

    [JsonPropertyName("wirelessSignal")]
    public double? WirelessSignal { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("desired_room_temperature_setpoint_heating")]
    public double? DesiredRoomTemperatureSetpointHeating { get; init; }

    [JsonPropertyName("desired_room_temperature_setpoint_cooling")]
    public double? DesiredRoomTemperatureSetpointCooling { get; init; }

    [JsonPropertyName("desired_room_temperature_setpoint")]
    public double? DesiredRoomTemperatureSetpoint { get; init; }

    [JsonPropertyName("is_eco_mode")]
    public bool? IsEcoMode { get; init; }

    [JsonPropertyName("average")]
    public double? Average { get; init; }

    [JsonPropertyName("off_peak_1")]
    public double? OffPeak1 { get; init; }

    [JsonPropertyName("off_peak_2")]
    public double? OffPeak2 { get; init; }

    [JsonPropertyName("peak")]
    public double? Peak { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("mean")]
    public double? Mean { get; init; }

    [JsonPropertyName("unit")]
    public string? Unit { get; init; }

    [JsonPropertyName("currency")]
    public string? Currency { get; init; }

    [JsonPropertyName("country")]
    public string? Country { get; init; }

    [JsonPropertyName("region")]
    public string? Region { get; init; }

    [JsonPropertyName("low_price")]
    public bool? LowPrice { get; init; }

    [JsonPropertyName("price_percent_to_average")]
    public double? PricePercentToAverage { get; init; }

    [JsonPropertyName("today")]
    public IReadOnlyList<double>? Today { get; init; }

    [JsonPropertyName("tomorrow")]
    public object? Tomorrow { get; init; }

    [JsonPropertyName("tomorrow_valid")]
    public bool? TomorrowValid { get; init; }

    [JsonPropertyName("raw_today")]
    public IReadOnlyList<object>? RawToday { get; init; }

    [JsonPropertyName("raw_tomorrow")]
    public IReadOnlyList<object>? RawTomorrow { get; init; }

    [JsonPropertyName("current_price")]
    public double? CurrentPrice { get; init; }

    [JsonPropertyName("additional_costs_current_hour")]
    public double? AdditionalCostsCurrentHour { get; init; }

    [JsonPropertyName("price_in_cents")]
    public bool? PriceInCents { get; init; }

    [JsonPropertyName("Stationname")]
    public string? Stationname { get; init; }

    [JsonPropertyName("Measured")]
    public string? Measured { get; init; }

    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    [JsonPropertyName("Total income")]
    public double? Totalincome { get; init; }

    [JsonPropertyName("Today income")]
    public double? Todayincome { get; init; }

    [JsonPropertyName("Yesterday income")]
    public string? Yesterdayincome { get; init; }

    [JsonPropertyName("Month income")]
    public double? Monthincome { get; init; }

    [JsonPropertyName("Last month income")]
    public double? Lastmonthincome { get; init; }

    [JsonPropertyName("Plant Name")]
    public string? PlantName { get; init; }

    [JsonPropertyName("Plant UId")]
    public string? PlantUId { get; init; }

    [JsonPropertyName("Grid Direction")]
    public string? GridDirection { get; init; }

    [JsonPropertyName("Battery Direction")]
    public string? BatteryDirection { get; init; }

    [JsonPropertyName("Today equivalent hours")]
    public string? Todayequivalenthours { get; init; }

    [JsonPropertyName("Total equivalent hours")]
    public string? Totalequivalenthours { get; init; }

    [JsonPropertyName("Module signal strength (dBm)")]
    public double? ModulesignalstrengthdBm { get; init; }

    [JsonPropertyName("Device PC")]
    public string? DevicePC { get; init; }

    [JsonPropertyName("Device type")]
    public string? Devicetype { get; init; }

    [JsonPropertyName("Display firmware")]
    public string? Displayfirmware { get; init; }

    [JsonPropertyName("Installer name")]
    public string? Installername { get; init; }

    [JsonPropertyName("Master MCU firmware")]
    public string? MasterMCUfirmware { get; init; }

    [JsonPropertyName("Module firmware")]
    public string? Modulefirmware { get; init; }

    [JsonPropertyName("Module PC")]
    public string? ModulePC { get; init; }

    [JsonPropertyName("Module serial number")]
    public string? Moduleserialnumber { get; init; }

    [JsonPropertyName("Inverter Model")]
    public string? InverterModel { get; init; }

    [JsonPropertyName("Inverter SN")]
    public string? InverterSN { get; init; }

    [JsonPropertyName("Battery Capacity")]
    public double? BatteryCapacity { get; init; }

    [JsonPropertyName("Battery Current")]
    public double? BatteryCurrent { get; init; }

    [JsonPropertyName("Battery Power")]
    public double? BatteryPower { get; init; }

    [JsonPropertyName("Grid Power")]
    public double? GridPower { get; init; }

    [JsonPropertyName("Input/Output Power")]
    public object? InputOutputPower { get; init; }

    [JsonPropertyName("Output Direction")]
    public string? OutputDirection { get; init; }

    [JsonPropertyName("Photovoltaics Power")]
    public double? PhotovoltaicsPower { get; init; }

    [JsonPropertyName("Photovoltaics Direction")]
    public string? PhotovoltaicsDirection { get; init; }

    [JsonPropertyName("Total Load Power")]
    public double? TotalLoadPower { get; init; }

    [JsonPropertyName("Home Load Power")]
    public object? HomeLoadPower { get; init; }

    [JsonPropertyName("Backup Load Power")]
    public object? BackupLoadPower { get; init; }

    [JsonPropertyName("Solar Power")]
    public double? SolarPower { get; init; }

    [JsonPropertyName("Battery Charge Today Energy")]
    public double? BatteryChargeTodayEnergy { get; init; }

    [JsonPropertyName("Battery Discharge Today Energy")]
    public double? BatteryDischargeTodayEnergy { get; init; }

    [JsonPropertyName("Battery Charge Total Energy")]
    public double? BatteryChargeTotalEnergy { get; init; }

    [JsonPropertyName("Battery Discharge Total Energy")]
    public double? BatteryDischargeTotalEnergy { get; init; }

    [JsonPropertyName("AC1")]
    public string? AC1 { get; init; }

    [JsonPropertyName("AC2")]
    public string? AC2 { get; init; }

    [JsonPropertyName("AC3")]
    public string? AC3 { get; init; }

    [JsonPropertyName("batCode")]
    public double? BatCode { get; init; }

    [JsonPropertyName("batHeatFilmStatus")]
    public string? BatHeatFilmStatus { get; init; }

    [JsonPropertyName("batHeatFilmStatusName")]
    public string? BatHeatFilmStatusName { get; init; }

    [JsonPropertyName("batInstallType")]
    public double? BatInstallType { get; init; }

    [JsonPropertyName("batModel")]
    public string? BatModel { get; init; }

    [JsonPropertyName("batModule")]
    public string? BatModule { get; init; }

    [JsonPropertyName("batSoh")]
    public string? BatSoh { get; init; }

    [JsonPropertyName("batType")]
    public double? BatType { get; init; }

    [JsonPropertyName("batteryBoxType")]
    public double? BatteryBoxType { get; init; }

    [JsonPropertyName("batteryType")]
    public double? BatteryType { get; init; }

    [JsonPropertyName("bmsSn")]
    public string? BmsSn { get; init; }

    [JsonPropertyName("clusterId")]
    public double? ClusterId { get; init; }

    [JsonPropertyName("dcdcHardwareVersion")]
    public string? DcdcHardwareVersion { get; init; }

    [JsonPropertyName("dcdcSoftwareVersion")]
    public string? DcdcSoftwareVersion { get; init; }

    [JsonPropertyName("enableShowBatteryClusterRealDataBtn")]
    public double? EnableShowBatteryClusterRealDataBtn { get; init; }

    [JsonPropertyName("enableShowBatteryRealDataBtn")]
    public double? EnableShowBatteryRealDataBtn { get; init; }

    [JsonPropertyName("enableShowSingleVoltageBtn")]
    public double? EnableShowSingleVoltageBtn { get; init; }

    [JsonPropertyName("enableShowWarranty")]
    public double? EnableShowWarranty { get; init; }

    [JsonPropertyName("groupId")]
    public double? GroupId { get; init; }

    [JsonPropertyName("isHistory")]
    public double? IsHistory { get; init; }

    [JsonPropertyName("offlineGray")]
    public double? OfflineGray { get; init; }

    [JsonPropertyName("runningState")]
    public double? RunningState { get; init; }

    [JsonPropertyName("showByGroup")]
    public double? ShowByGroup { get; init; }

    [JsonPropertyName("showNewBatteryUi")]
    public double? ShowNewBatteryUi { get; init; }

    [JsonPropertyName("unitOfTemperature")]
    public string? UnitOfTemperature { get; init; }

    [JsonPropertyName("warrantyEndTime")]
    public string? WarrantyEndTime { get; init; }

    [JsonPropertyName("warrantyStartTime")]
    public string? WarrantyStartTime { get; init; }
}

public partial record SirenEntity : Entity<SirenEntity, EntityState<SirenAttributes>, SirenAttributes>
{
    public SirenEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SirenEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SirenAttributes
{
    [JsonPropertyName("available_tones")]
    public IReadOnlyList<string>? AvailableTones { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("holiday_ongoing")]
    public bool? HolidayOngoing { get; init; }

    [JsonPropertyName("holiday_remaining_seconds")]
    public object? HolidayRemainingSeconds { get; init; }

    [JsonPropertyName("holiday_start_date_time")]
    public object? HolidayStartDateTime { get; init; }

    [JsonPropertyName("holiday_end_date_time")]
    public object? HolidayEndDateTime { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("minutes_remaining")]
    public double? MinutesRemaining { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("manual_cooling_ongoing")]
    public bool? ManualCoolingOngoing { get; init; }

    [JsonPropertyName("manual_cooling_remaining_seconds")]
    public object? ManualCoolingRemainingSeconds { get; init; }

    [JsonPropertyName("manual_cooling_start_date_time")]
    public string? ManualCoolingStartDateTime { get; init; }

    [JsonPropertyName("manual_cooling_end_date_time")]
    public string? ManualCoolingEndDateTime { get; init; }

    [JsonPropertyName("manual_cooling_days_remaining")]
    public double? ManualCoolingDaysRemaining { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public object? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public string? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("display_precision")]
    public double? DisplayPrecision { get; init; }

    [JsonPropertyName("update_percentage")]
    public double? UpdatePercentage { get; init; }
}

public partial record WaterHeaterEntity : Entity<WaterHeaterEntity, EntityState<WaterHeaterAttributes>, WaterHeaterAttributes>
{
    public WaterHeaterEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WaterHeaterEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WaterHeaterAttributes
{
    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("operation_list")]
    public IReadOnlyList<string>? OperationList { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("target_temp_high")]
    public object? TargetTempHigh { get; init; }

    [JsonPropertyName("target_temp_low")]
    public object? TargetTempLow { get; init; }

    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }

    [JsonPropertyName("time_program_dhw")]
    public object? TimeProgramDhw { get; init; }

    [JsonPropertyName("time_program_circulation_pump")]
    public object? TimeProgramCirculationPump { get; init; }

    [JsonPropertyName("holiday_end_date_time")]
    public string? HolidayEndDateTime { get; init; }

    [JsonPropertyName("holiday_start_date_time")]
    public string? HolidayStartDateTime { get; init; }

    [JsonPropertyName("timezone")]
    public string? Timezone { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility")]
    public double? Visibility { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("apparent_temperature")]
    public double? ApparentTemperature { get; init; }

    [JsonPropertyName("wind_gust_speed")]
    public double? WindGustSpeed { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<object>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("backup_stage")]
    public object? BackupStage { get; init; }

    [JsonPropertyName("failed_reason")]
    public object? FailedReason { get; init; }
}

public partial record ImageEntity : Entity<ImageEntity, EntityState<ImageAttributes>, ImageAttributes>
{
    public ImageEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ImageEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ImageAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TimeEntity : Entity<TimeEntity, EntityState<TimeAttributes>, TimeAttributes>
{
    public TimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TimeAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record VacuumEntity : Entity<VacuumEntity, EntityState<VacuumAttributes>, VacuumAttributes>, IVacuumEntityCore
{
    public VacuumEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public VacuumEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record VacuumAttributes
{
    [JsonPropertyName("fan_speed_list")]
    public IReadOnlyList<string>? FanSpeedList { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("battery_icon")]
    public string? BatteryIcon { get; init; }

    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>, IInputTextEntityCore
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputDatetimeEntity : Entity<InputDatetimeEntity, EntityState<InputDatetimeAttributes>, InputDatetimeAttributes>, IInputDatetimeEntityCore
{
    public InputDatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputDatetimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputDatetimeAttributes
{
    [JsonPropertyName("has_date")]
    public bool? HasDate { get; init; }

    [JsonPropertyName("has_time")]
    public bool? HasTime { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("year")]
    public double? Year { get; init; }

    [JsonPropertyName("month")]
    public double? Month { get; init; }

    [JsonPropertyName("day")]
    public double? Day { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AdguardServices Adguard { get; }

    AlarmControlPanelServices AlarmControlPanel { get; }

    AlexaMediaServices AlexaMedia { get; }

    AutomationServices Automation { get; }

    BackupServices Backup { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DatetimeServices Datetime { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HomeassistantServices Homeassistant { get; }

    HumidifierServices Humidifier { get; }

    ImageServices Image { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LinkplayServices Linkplay { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    MypyllantServices Mypyllant { get; }

    NordpoolServices Nordpool { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    RoborockServices Roborock { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TibberServices Tibber { get; }

    TimeServices Time { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    VacuumServices Vacuum { get; }

    ValveServices Valve { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    WebostvServices Webostv { get; }

    ZhaServices Zha { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AdguardServices Adguard => new(_haContext);
    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AlexaMediaServices AlexaMedia => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BackupServices Backup => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DatetimeServices Datetime => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public ImageServices Image => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LinkplayServices Linkplay => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public MypyllantServices Mypyllant => new(_haContext);
    public NordpoolServices Nordpool => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public RoborockServices Roborock => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TibberServices Tibber => new(_haContext);
    public TimeServices Time => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public ValveServices Valve => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public WebostvServices Webostv => new(_haContext);
    public ZhaServices Zha => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AdguardServices
{
    private readonly IHaContext _haContext;
    public AdguardServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new filter subscription to AdGuard Home.</summary>
    public void AddUrl(AdguardAddUrlParameters data)
    {
        _haContext.CallService("adguard", "add_url", null, data);
    }

    ///<summary>Adds a new filter subscription to AdGuard Home.</summary>
    ///<param name="name">The name of the filter subscription. eg: Example</param>
    ///<param name="url">The filter URL to subscribe to, containing the filter rules. eg: https://www.example.com/filter/1.txt</param>
    public void AddUrl(string name, string url)
    {
        _haContext.CallService("adguard", "add_url", null, new AdguardAddUrlParameters { Name = name, Url = url });
    }

    ///<summary>Disables a filter subscription in AdGuard Home.</summary>
    public void DisableUrl(AdguardDisableUrlParameters data)
    {
        _haContext.CallService("adguard", "disable_url", null, data);
    }

    ///<summary>Disables a filter subscription in AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to disable. eg: https://www.example.com/filter/1.txt</param>
    public void DisableUrl(string url)
    {
        _haContext.CallService("adguard", "disable_url", null, new AdguardDisableUrlParameters { Url = url });
    }

    ///<summary>Enables a filter subscription in AdGuard Home.</summary>
    public void EnableUrl(AdguardEnableUrlParameters data)
    {
        _haContext.CallService("adguard", "enable_url", null, data);
    }

    ///<summary>Enables a filter subscription in AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to enable. eg: https://www.example.com/filter/1.txt</param>
    public void EnableUrl(string url)
    {
        _haContext.CallService("adguard", "enable_url", null, new AdguardEnableUrlParameters { Url = url });
    }

    ///<summary>Refreshes all filter subscriptions in AdGuard Home.</summary>
    public void Refresh(AdguardRefreshParameters data)
    {
        _haContext.CallService("adguard", "refresh", null, data);
    }

    ///<summary>Refreshes all filter subscriptions in AdGuard Home.</summary>
    ///<param name="force">Force update (bypasses AdGuard Home throttling), omit for a regular refresh.</param>
    public void Refresh(bool? force = null)
    {
        _haContext.CallService("adguard", "refresh", null, new AdguardRefreshParameters { Force = force });
    }

    ///<summary>Removes a filter subscription from AdGuard Home.</summary>
    public void RemoveUrl(AdguardRemoveUrlParameters data)
    {
        _haContext.CallService("adguard", "remove_url", null, data);
    }

    ///<summary>Removes a filter subscription from AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to remove. eg: https://www.example.com/filter/1.txt</param>
    public void RemoveUrl(string url)
    {
        _haContext.CallService("adguard", "remove_url", null, new AdguardRemoveUrlParameters { Url = url });
    }
}

public partial record AdguardAddUrlParameters
{
    ///<summary>The name of the filter subscription. eg: Example</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>The filter URL to subscribe to, containing the filter rules. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardDisableUrlParameters
{
    ///<summary>The filter subscription URL to disable. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardEnableUrlParameters
{
    ///<summary>The filter subscription URL to enable. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardRefreshParameters
{
    ///<summary>Force update (bypasses AdGuard Home throttling), omit for a regular refresh.</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }
}

public partial record AdguardRemoveUrlParameters
{
    ///<summary>The filter subscription URL to remove. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Triggers the alarm manually.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Triggers the alarm manually.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AlexaMediaServices
{
    private readonly IHaContext _haContext;
    public AlexaMediaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    public void ForceLogout(AlexaMediaForceLogoutParameters data)
    {
        _haContext.CallService("alexa_media", "force_logout", null, data);
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    ///<param name="email">Accounts to clear. Empty will clear all. eg: my_email@alexa.com</param>
    public void ForceLogout(object? email = null)
    {
        _haContext.CallService("alexa_media", "force_logout", null, new AlexaMediaForceLogoutParameters { Email = email });
    }

    ///<summary>Parses the history records for the specified device</summary>
    public void GetHistoryRecords(AlexaMediaGetHistoryRecordsParameters data)
    {
        _haContext.CallService("alexa_media", "get_history_records", null, data);
    }

    ///<summary>Parses the history records for the specified device</summary>
    ///<param name="entityId">Entity to get the history for</param>
    ///<param name="entries">Number of entries to get eg: 5</param>
    public void GetHistoryRecords(string entityId, object? entries = null)
    {
        _haContext.CallService("alexa_media", "get_history_records", null, new AlexaMediaGetHistoryRecordsParameters { EntityId = entityId, Entries = entries });
    }

    ///<summary>Restore previous volume level on Alexa media player device</summary>
    public void RestoreVolume(AlexaMediaRestoreVolumeParameters data)
    {
        _haContext.CallService("alexa_media", "restore_volume", null, data);
    }

    ///<summary>Restore previous volume level on Alexa media player device</summary>
    ///<param name="entityId">Entity to restore the previous volume level on</param>
    public void RestoreVolume(string entityId)
    {
        _haContext.CallService("alexa_media", "restore_volume", null, new AlexaMediaRestoreVolumeParameters { EntityId = entityId });
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    public void UpdateLastCalled(AlexaMediaUpdateLastCalledParameters data)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, data);
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    ///<param name="email">List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</param>
    public void UpdateLastCalled(object? email = null)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, new AlexaMediaUpdateLastCalledParameters { Email = email });
    }
}

public partial record AlexaMediaForceLogoutParameters
{
    ///<summary>Accounts to clear. Empty will clear all. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial record AlexaMediaGetHistoryRecordsParameters
{
    ///<summary>Entity to get the history for</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Number of entries to get eg: 5</summary>
    [JsonPropertyName("entries")]
    public object? Entries { get; init; }
}

public partial record AlexaMediaRestoreVolumeParameters
{
    ///<summary>Entity to restore the previous volume level on</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record AlexaMediaUpdateLastCalledParameters
{
    ///<summary>List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("automation", "reload", null, data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "toggle", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "turn_on", target, data);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BackupServices
{
    private readonly IHaContext _haContext;
    public BackupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a new backup with automatic backup settings.</summary>
    public void CreateAutomatic(object? data = null)
    {
        _haContext.CallService("backup", "create_automatic", null, data);
    }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Presses a button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("button", "press", target, data);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Retrieves events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetEvents(ServiceTarget target, CalendarGetEventsParameters data)
    {
        _haContext.CallService("calendar", "get_events", target, data);
    }

    ///<summary>Retrieves events on a calendar within a time range.</summary>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public void GetEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Retrieves events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetEventsAsync(ServiceTarget target, CalendarGetEventsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("calendar", "get_events", target, data);
    }

    ///<summary>Retrieves events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public Task<JsonElement?> GetEventsAsync(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        return _haContext.CallServiceWithResponseAsync("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarGetEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from Start time for the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "disable_motion_detection", target, data);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "enable_motion_detection", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_off", target, data);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_on", target, data);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    ///<param name="entityId">Media player entity to show the dashboard view on.</param>
    ///<param name="dashboardPath">The URL path of the dashboard to show, defaults to lovelace if not specified. eg: lovelace-cast</param>
    ///<param name="viewPath">The URL path of the dashboard view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string viewPath, string? dashboardPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters { EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath });
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media player entity to show the dashboard view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the dashboard to show, defaults to lovelace if not specified. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The URL path of the dashboard view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingHorizontalMode(ServiceTarget target, ClimateSetSwingHorizontalModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public void SetSwingHorizontalMode(ServiceTarget target, string swingHorizontalMode)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "toggle", target, data);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_off", target, data);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_on", target, data);
    }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingHorizontalModeParameters
{
    ///<summary>Horizontal swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_horizontal_mode")]
    public string? SwingHorizontalMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>The temperature setpoint.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>The max temperature setpoint.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>The min temperature setpoint.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.</summary>
    public void RemoteConnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_connect", null, data);
    }

    ///<summary>Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.</summary>
    public void RemoteDisconnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_disconnect", null, data);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public Task<JsonElement?> ProcessAsync(ConversationProcessParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public Task<JsonElement?> ProcessAsync(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "decrement", target, data);
    }

    ///<summary>Increments a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "increment", target, data);
    }

    ///<summary>Resets a counter to its initial value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "reset", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover", target, data);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover_tilt", target, data);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover", target, data);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover_tilt", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover", target, data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target, data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle", target, data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target, data);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DatetimeServices
{
    private readonly IHaContext _haContext;
    public DatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the date/time for a datetime entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, DatetimeSetValueParameters data)
    {
        _haContext.CallService("datetime", "set_value", target, data);
    }

    ///<summary>Sets the date/time for a datetime entity.</summary>
    ///<param name="datetime">The date/time to set. The time zone of the Home Assistant instance is assumed. eg: 2023-10-07T21:35:22</param>
    public void SetValue(ServiceTarget target, object datetime)
    {
        _haContext.CallService("datetime", "set_value", target, new DatetimeSetValueParameters { Datetime = datetime });
    }
}

public partial record DatetimeSetValueParameters
{
    ///<summary>The date/time to set. The time zone of the Home Assistant instance is assumed. eg: 2023-10-07T21:35:22</summary>
    [JsonPropertyName("datetime")]
    public object? Datetime { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="direction">Direction of the fan rotation.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles a fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "toggle", target, data);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "turn_off", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be decreased.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be increased.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turns oscillation on/off.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction of the fan rotation.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to an FFmpeg-based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to an FFmpeg-based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to an FFmpeg-based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes(object? data = null)
    {
        _haContext.CallService("frontend", "reload_themes", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("group", "reload", null, data);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on to restart. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on to start. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    ///<param name="addon">The add-on to write to. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on to stop. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from the backup.</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from the backup.</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot(object? data = null)
    {
        _haContext.CallService("hassio", "host_reboot", null, data);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown(object? data = null)
    {
        _haContext.CallService("hassio", "host_shutdown", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on to restart. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on to start. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on to write to. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on to stop. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from the backup.</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from the backup.</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "check_config", null, data);
    }

    ///<summary>Reloads all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_all", null, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, object? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the Core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_core_config", null, data);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null, data);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart(object? data = null)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates(object? data = null)
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location above sea level. eg: 120</param>
    public void SetLocation(long latitude, long longitude, long? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop(object? data = null)
    {
        _haContext.CallService("homeassistant", "stop", null, data);
    }

    ///<summary>Generic action to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "toggle", target, data);
    }

    ///<summary>Generic action to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_off", target, data);
    }

    ///<summary>Generic action to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_on", target, data);
    }

    ///<summary>Forces one or more entities to update their data.</summary>
    public void UpdateEntity(HomeassistantUpdateEntityParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity", null, data);
    }

    ///<summary>Forces one or more entities to update their data.</summary>
    ///<param name="entityId">List of entities to force update.</param>
    public void UpdateEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "update_entity", null, new HomeassistantUpdateEntityParameters { EntityId = entityId });
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public object? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public long? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public long? Longitude { get; init; }

    ///<summary>Elevation of your location above sea level. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public long? Elevation { get; init; }
}

public partial record HomeassistantUpdateEntityParameters
{
    ///<summary>List of entities to force update.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="mode">Operation mode. For example, &quot;normal&quot;, &quot;eco&quot;, or &quot;away&quot;. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "toggle", target, data);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "turn_off", target, data);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "turn_on", target, data);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, &quot;normal&quot;, &quot;eco&quot;, or &quot;away&quot;. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class ImageServices
{
    private readonly IHaContext _haContext;
    public ImageServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, ImageSnapshotParameters data)
    {
        _haContext.CallService("image", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("image", "snapshot", target, new ImageSnapshotParameters { Filename = filename });
    }
}

public partial record ImageSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_boolean", "reload", null, data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "toggle", target, data);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_off", target, data);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_on", target, data);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_button", "press", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_button", "reload", null, data);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_datetime", "reload", null, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_number", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_select", "reload", null, data);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, string options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public string? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_text", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? colorTempKelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? colorTempKelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("color_temp_kelvin")]
    public object? ColorTempKelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("color_temp_kelvin")]
    public object? ColorTempKelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial class LinkplayServices
{
    private readonly IHaContext _haContext;
    public LinkplayServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Plays a preset on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayPreset(ServiceTarget target, LinkplayPlayPresetParameters data)
    {
        _haContext.CallService("linkplay", "play_preset", target, data);
    }

    ///<summary>Plays a preset on the device.</summary>
    ///<param name="presetNumber">The number of the preset to play. eg: 1</param>
    public void PlayPreset(ServiceTarget target, long presetNumber)
    {
        _haContext.CallService("linkplay", "play_preset", target, new LinkplayPlayPresetParameters { PresetNumber = presetNumber });
    }
}

public partial record LinkplayPlayPresetParameters
{
    ///<summary>The number of the preset to play. eg: 1</summary>
    [JsonPropertyName("preset_number")]
    public long? PresetNumber { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using the &apos;Entity ID&apos; field. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using the &apos;Entity ID&apos; field. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel(object? data = null)
    {
        _haContext.CallService("logger", "set_level", null, data);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public void BrowseMedia(ServiceTarget target, MediaPlayerBrowseMediaParameters data)
    {
        _haContext.CallService("media_player", "browse_media", target, data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public void BrowseMedia(ServiceTarget target, string? mediaContentType = null, string? mediaContentId = null)
    {
        _haContext.CallService("media_player", "browse_media", target, new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> BrowseMediaAsync(ServiceTarget target, MediaPlayerBrowseMediaParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "browse_media", target, data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public Task<JsonElement?> BrowseMediaAsync(ServiceTarget target, string? mediaContentType = null, string? mediaContentId = null)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "browse_media", target, new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Removes all items from the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "clear_playlist", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_next_track", target, data);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_pause", target, data);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play", target, data);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play_pause", target, data);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_previous_track", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_stop", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public void SearchMedia(ServiceTarget target, MediaPlayerSearchMediaParameters data)
    {
        _haContext.CallService("media_player", "search_media", target, data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public void SearchMedia(ServiceTarget target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, string? mediaFilterClasses = null)
    {
        _haContext.CallService("media_player", "search_media", target, new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> SearchMediaAsync(ServiceTarget target, MediaPlayerSearchMediaParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "search_media", target, data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public Task<JsonElement?> SearchMediaAsync(ServiceTarget target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, string? mediaFilterClasses = null)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "search_media", target, new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "toggle", target, data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_off", target, data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_on", target, data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "unjoin", target, data);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_down", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_up", target, data);
    }
}

public partial record MediaPlayerBrowseMediaParameters
{
    ///<summary>The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Whether the media (one or all) should be played in a loop or not.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSearchMediaParameters
{
    ///<summary>The term to search for. eg: Beatles</summary>
    [JsonPropertyName("search_query")]
    public string? SearchQuery { get; init; }

    ///<summary>The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</summary>
    [JsonPropertyName("media_filter_classes")]
    public string? MediaFilterClasses { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether the media should be played in randomized order or not.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. Publishes an empty message if not provided. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="evaluatePayload">If &apos;Payload&apos; is a Python bytes literal, evaluate the bytes literal and publish the raw data.</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, object? payload = null, bool? evaluatePayload = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, EvaluatePayload = evaluatePayload, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("mqtt", "reload", null, data);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. Publishes an empty message if not provided. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }

    ///<summary>If &apos;Payload&apos; is a Python bytes literal, evaluate the bytes literal and publish the raw data.</summary>
    [JsonPropertyName("evaluate_payload")]
    public bool? EvaluatePayload { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class MypyllantServices
{
    private readonly IHaContext _haContext;
    public MypyllantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancel manual cooling</summary>
    ///<param name="target">The target for this service call</param>
    public void CancelCoolingForDays(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("mypyllant", "cancel_cooling_for_days", target, data);
    }

    ///<summary>Cancel holiday / away mode</summary>
    ///<param name="target">The target for this service call</param>
    public void CancelHoliday(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("mypyllant", "cancel_holiday", target, data);
    }

    ///<summary>Cancels quick veto temperature and returns to normal schedule / manual setpoint</summary>
    ///<param name="target">The target for this service call</param>
    public void CancelQuickVeto(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("mypyllant", "cancel_quick_veto", target, data);
    }

    ///<summary>Cancels Ventilation Boost early</summary>
    ///<param name="target">The target for this service call</param>
    public void CancelVentilationBoost(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("mypyllant", "cancel_ventilation_boost", target, data);
    }

    ///<summary>Exports data from the mypyllant library</summary>
    public void Export(MypyllantExportParameters data)
    {
        _haContext.CallService("mypyllant", "export", null, data);
    }

    ///<summary>Exports data from the mypyllant library</summary>
    ///<param name="data">Whether to export device data (default off) eg: False</param>
    ///<param name="resolution">The time resolution of the data export (default DAY) eg: DAY</param>
    ///<param name="start">Start date od the data export eg: &quot;2023-01-01 14:00:00&quot;</param>
    ///<param name="end">End date of the data export eg: &quot;2023-01-02 0:00:00&quot;</param>
    public void Export(bool? data = null, object? resolution = null, object? start = null, object? end = null)
    {
        _haContext.CallService("mypyllant", "export", null, new MypyllantExportParameters { Data = data, Resolution = resolution, Start = start, End = end });
    }

    ///<summary>Exports data from the mypyllant library</summary>
    public Task<JsonElement?> ExportAsync(MypyllantExportParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("mypyllant", "export", null, data);
    }

    ///<summary>Exports data from the mypyllant library</summary>
    ///<param name="data">Whether to export device data (default off) eg: False</param>
    ///<param name="resolution">The time resolution of the data export (default DAY) eg: DAY</param>
    ///<param name="start">Start date od the data export eg: &quot;2023-01-01 14:00:00&quot;</param>
    ///<param name="end">End date of the data export eg: &quot;2023-01-02 0:00:00&quot;</param>
    public Task<JsonElement?> ExportAsync(bool? data = null, object? resolution = null, object? start = null, object? end = null)
    {
        return _haContext.CallServiceWithResponseAsync("mypyllant", "export", null, new MypyllantExportParameters { Data = data, Resolution = resolution, Start = start, End = end });
    }

    ///<summary>Generates test data for the mypyllant library and returns it as YAML</summary>
    public void GenerateTestData(object? data = null)
    {
        _haContext.CallService("mypyllant", "generate_test_data", null, data);
    }

    ///<summary>Generates test data for the mypyllant library and returns it as YAML</summary>
    public Task<JsonElement?> GenerateTestDataAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("mypyllant", "generate_test_data", null, data);
    }

    ///<summary>Exports energy reports in CSV format per year</summary>
    public void Report(MypyllantReportParameters data)
    {
        _haContext.CallService("mypyllant", "report", null, data);
    }

    ///<summary>Exports energy reports in CSV format per year</summary>
    ///<param name="year">The year of the energy report eg: 2023</param>
    public void Report(long year)
    {
        _haContext.CallService("mypyllant", "report", null, new MypyllantReportParameters { Year = year });
    }

    ///<summary>Exports energy reports in CSV format per year</summary>
    public Task<JsonElement?> ReportAsync(MypyllantReportParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("mypyllant", "report", null, data);
    }

    ///<summary>Exports energy reports in CSV format per year</summary>
    ///<param name="year">The year of the energy report eg: 2023</param>
    public Task<JsonElement?> ReportAsync(long year)
    {
        return _haContext.CallServiceWithResponseAsync("mypyllant", "report", null, new MypyllantReportParameters { Year = year });
    }

    ///<summary>Enables manual cooling between start and end dates</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoolingForDays(ServiceTarget target, MypyllantSetCoolingForDaysParameters data)
    {
        _haContext.CallService("mypyllant", "set_cooling_for_days", target, data);
    }

    ///<summary>Enables manual cooling between start and end dates</summary>
    ///<param name="start">Optional start date of the cooling period, defaults to now (not supported on VRC700 controllers) eg: &quot;2023-01-10 14:00:00&quot;</param>
    ///<param name="end">Optional end date of the cooling period, defaults to one year in the future (not supported on VRC700 controllers) eg: &quot;2023-01-01 0:00:00&quot;</param>
    ///<param name="durationDays">Duration in days (required on VRC700 controllers) eg: 3</param>
    public void SetCoolingForDays(ServiceTarget target, object? start = null, object? end = null, double? durationDays = null)
    {
        _haContext.CallService("mypyllant", "set_cooling_for_days", target, new MypyllantSetCoolingForDaysParameters { Start = start, End = end, DurationDays = durationDays });
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDhwCirculationTimeProgram(ServiceTarget target, MypyllantSetDhwCirculationTimeProgramParameters data)
    {
        _haContext.CallService("mypyllant", "set_dhw_circulation_time_program", target, data);
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public void SetDhwCirculationTimeProgram(ServiceTarget target, object? timeProgram = null)
    {
        _haContext.CallService("mypyllant", "set_dhw_circulation_time_program", target, new MypyllantSetDhwCirculationTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Updates the time program for a water heater</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDhwTimeProgram(ServiceTarget target, MypyllantSetDhwTimeProgramParameters data)
    {
        _haContext.CallService("mypyllant", "set_dhw_time_program", target, data);
    }

    ///<summary>Updates the time program for a water heater</summary>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public void SetDhwTimeProgram(ServiceTarget target, object? timeProgram = null)
    {
        _haContext.CallService("mypyllant", "set_dhw_time_program", target, new MypyllantSetDhwTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHoliday(ServiceTarget target, MypyllantSetHolidayParameters data)
    {
        _haContext.CallService("mypyllant", "set_holiday", target, data);
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    ///<param name="start">Optional start date of the holiday, defaults to now eg: &quot;2023-01-10 14:00:00&quot;</param>
    ///<param name="end">Optional end date of the holiday, defaults to one year in the future eg: &quot;2023-01-01 0:00:00&quot;</param>
    ///<param name="durationHours">Optional duration of the holiday in hours, defaults to one year eg: 72</param>
    ///<param name="setpoint">Setpoint temperature, required on VRC700 eg: 10</param>
    public void SetHoliday(ServiceTarget target, object? start = null, object? end = null, long? durationHours = null, long? setpoint = null)
    {
        _haContext.CallService("mypyllant", "set_holiday", target, new MypyllantSetHolidayParameters { Start = start, End = end, DurationHours = durationHours, Setpoint = setpoint });
    }

    ///<summary>Sets temperature for manual mode</summary>
    ///<param name="target">The target for this service call</param>
    public void SetManualModeSetpoint(ServiceTarget target, MypyllantSetManualModeSetpointParameters data)
    {
        _haContext.CallService("mypyllant", "set_manual_mode_setpoint", target, data);
    }

    ///<summary>Sets temperature for manual mode</summary>
    ///<param name="temperature">Manual Mode Setpoint Temperature eg: 21</param>
    ///<param name="setpointType">Manual Mode Type eg: heating</param>
    public void SetManualModeSetpoint(ServiceTarget target, double temperature, object? setpointType = null)
    {
        _haContext.CallService("mypyllant", "set_manual_mode_setpoint", target, new MypyllantSetManualModeSetpointParameters { Temperature = temperature, SetpointType = setpointType });
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    ///<param name="target">The target for this service call</param>
    public void SetQuickVeto(ServiceTarget target, MypyllantSetQuickVetoParameters data)
    {
        _haContext.CallService("mypyllant", "set_quick_veto", target, data);
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    ///<param name="temperature">Quick Veto Temperature eg: 21</param>
    ///<param name="durationHours">Optional duration in hours for the quick veto, default is 3 hours eg: 3</param>
    public void SetQuickVeto(ServiceTarget target, double temperature, double? durationHours = null)
    {
        _haContext.CallService("mypyllant", "set_quick_veto", target, new MypyllantSetQuickVetoParameters { Temperature = temperature, DurationHours = durationHours });
    }

    public void SetTimeControlledCoolingSetpoint(object? data = null)
    {
        _haContext.CallService("mypyllant", "set_time_controlled_cooling_setpoint", null, data);
    }

    ///<summary>Updates the time program for a zone or room</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTimeProgram(ServiceTarget target, MypyllantSetTimeProgramParameters data)
    {
        _haContext.CallService("mypyllant", "set_time_program", target, data);
    }

    ///<summary>Updates the time program for a zone or room</summary>
    ///<param name="programType">Type of the time program (heating, cooling). Ambisense rooms ignore this field eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight). Ambisense rooms don&apos;t support end_time eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public void SetTimeProgram(ServiceTarget target, object? programType = null, object? timeProgram = null)
    {
        _haContext.CallService("mypyllant", "set_time_program", target, new MypyllantSetTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }

    ///<summary>Disables heating / cooling for 30min for a quick ventilation boost</summary>
    ///<param name="target">The target for this service call</param>
    public void SetVentilationBoost(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("mypyllant", "set_ventilation_boost", target, data);
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    ///<param name="target">The target for this service call</param>
    public void SetZoneOperatingMode(ServiceTarget target, MypyllantSetZoneOperatingModeParameters data)
    {
        _haContext.CallService("mypyllant", "set_zone_operating_mode", target, data);
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    ///<param name="mode">The operating mode of the zone, for example OFF or TIME_CONTROLLED eg: OFF</param>
    ///<param name="operatingType">Whether the set the mode for cooling or heating eg: heating</param>
    public void SetZoneOperatingMode(ServiceTarget target, object? mode = null, object? operatingType = null)
    {
        _haContext.CallService("mypyllant", "set_zone_operating_mode", target, new MypyllantSetZoneOperatingModeParameters { Mode = mode, OperatingType = operatingType });
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    ///<param name="target">The target for this service call</param>
    public void SetZoneTimeProgram(ServiceTarget target, MypyllantSetZoneTimeProgramParameters data)
    {
        _haContext.CallService("mypyllant", "set_zone_time_program", target, data);
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    ///<param name="programType">Type of the time program (heating, cooling) eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight) eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public void SetZoneTimeProgram(ServiceTarget target, object? programType = null, object? timeProgram = null)
    {
        _haContext.CallService("mypyllant", "set_zone_time_program", target, new MypyllantSetZoneTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }
}

public partial record MypyllantExportParameters
{
    ///<summary>Whether to export device data (default off) eg: False</summary>
    [JsonPropertyName("data")]
    public bool? Data { get; init; }

    ///<summary>The time resolution of the data export (default DAY) eg: DAY</summary>
    [JsonPropertyName("resolution")]
    public object? Resolution { get; init; }

    ///<summary>Start date od the data export eg: &quot;2023-01-01 14:00:00&quot;</summary>
    [JsonPropertyName("start")]
    public object? Start { get; init; }

    ///<summary>End date of the data export eg: &quot;2023-01-02 0:00:00&quot;</summary>
    [JsonPropertyName("end")]
    public object? End { get; init; }
}

public partial record MypyllantReportParameters
{
    ///<summary>The year of the energy report eg: 2023</summary>
    [JsonPropertyName("year")]
    public long? Year { get; init; }
}

public partial record MypyllantSetCoolingForDaysParameters
{
    ///<summary>Optional start date of the cooling period, defaults to now (not supported on VRC700 controllers) eg: &quot;2023-01-10 14:00:00&quot;</summary>
    [JsonPropertyName("start")]
    public object? Start { get; init; }

    ///<summary>Optional end date of the cooling period, defaults to one year in the future (not supported on VRC700 controllers) eg: &quot;2023-01-01 0:00:00&quot;</summary>
    [JsonPropertyName("end")]
    public object? End { get; init; }

    ///<summary>Duration in days (required on VRC700 controllers) eg: 3</summary>
    [JsonPropertyName("duration_days")]
    public double? DurationDays { get; init; }
}

public partial record MypyllantSetDhwCirculationTimeProgramParameters
{
    ///<summary>A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </summary>
    [JsonPropertyName("time_program")]
    public object? TimeProgram { get; init; }
}

public partial record MypyllantSetDhwTimeProgramParameters
{
    ///<summary>A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </summary>
    [JsonPropertyName("time_program")]
    public object? TimeProgram { get; init; }
}

public partial record MypyllantSetHolidayParameters
{
    ///<summary>Optional start date of the holiday, defaults to now eg: &quot;2023-01-10 14:00:00&quot;</summary>
    [JsonPropertyName("start")]
    public object? Start { get; init; }

    ///<summary>Optional end date of the holiday, defaults to one year in the future eg: &quot;2023-01-01 0:00:00&quot;</summary>
    [JsonPropertyName("end")]
    public object? End { get; init; }

    ///<summary>Optional duration of the holiday in hours, defaults to one year eg: 72</summary>
    [JsonPropertyName("duration_hours")]
    public long? DurationHours { get; init; }

    ///<summary>Setpoint temperature, required on VRC700 eg: 10</summary>
    [JsonPropertyName("setpoint")]
    public long? Setpoint { get; init; }
}

public partial record MypyllantSetManualModeSetpointParameters
{
    ///<summary>Manual Mode Setpoint Temperature eg: 21</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>Manual Mode Type eg: heating</summary>
    [JsonPropertyName("setpoint_type")]
    public object? SetpointType { get; init; }
}

public partial record MypyllantSetQuickVetoParameters
{
    ///<summary>Quick Veto Temperature eg: 21</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>Optional duration in hours for the quick veto, default is 3 hours eg: 3</summary>
    [JsonPropertyName("duration_hours")]
    public double? DurationHours { get; init; }
}

public partial record MypyllantSetTimeProgramParameters
{
    ///<summary>Type of the time program (heating, cooling). Ambisense rooms ignore this field eg: heating</summary>
    [JsonPropertyName("program_type")]
    public object? ProgramType { get; init; }

    ///<summary>A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight). Ambisense rooms don&apos;t support end_time eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </summary>
    [JsonPropertyName("time_program")]
    public object? TimeProgram { get; init; }
}

public partial record MypyllantSetZoneOperatingModeParameters
{
    ///<summary>The operating mode of the zone, for example OFF or TIME_CONTROLLED eg: OFF</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }

    ///<summary>Whether the set the mode for cooling or heating eg: heating</summary>
    [JsonPropertyName("operating_type")]
    public object? OperatingType { get; init; }
}

public partial record MypyllantSetZoneTimeProgramParameters
{
    ///<summary>Type of the time program (heating, cooling) eg: heating</summary>
    [JsonPropertyName("program_type")]
    public object? ProgramType { get; init; }

    ///<summary>A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight) eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </summary>
    [JsonPropertyName("time_program")]
    public object? TimeProgram { get; init; }
}

public partial class NordpoolServices
{
    private readonly IHaContext _haContext;
    public NordpoolServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Action that gets the raw aggrigated daily prices from Nordpool</summary>
    public void Daily(NordpoolDailyParameters data)
    {
        _haContext.CallService("nordpool", "daily", null, data);
    }

    ///<summary>Action that gets the raw aggrigated daily prices from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="year">For what year, default to currect year eg: 2024</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public void Daily(object? currency = null, object? year = null, object? area = null)
    {
        _haContext.CallService("nordpool", "daily", null, new NordpoolDailyParameters { Currency = currency, Year = year, Area = area });
    }

    ///<summary>Action that gets the raw aggrigated daily prices from Nordpool</summary>
    public Task<JsonElement?> DailyAsync(NordpoolDailyParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("nordpool", "daily", null, data);
    }

    ///<summary>Action that gets the raw aggrigated daily prices from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="year">For what year, default to currect year eg: 2024</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public Task<JsonElement?> DailyAsync(object? currency = null, object? year = null, object? area = null)
    {
        return _haContext.CallServiceWithResponseAsync("nordpool", "daily", null, new NordpoolDailyParameters { Currency = currency, Year = year, Area = area });
    }

    ///<summary>Action that gets the raw hourly price for spesific date from Nordpool</summary>
    public void Hourly(NordpoolHourlyParameters data)
    {
        _haContext.CallService("nordpool", "hourly", null, data);
    }

    ///<summary>Action that gets the raw hourly price for spesific date from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="date">For what year, default to currect year eg: YYYY-MM-DD</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public void Hourly(object? currency = null, object? date = null, object? area = null)
    {
        _haContext.CallService("nordpool", "hourly", null, new NordpoolHourlyParameters { Currency = currency, Date = date, Area = area });
    }

    ///<summary>Action that gets the raw hourly price for spesific date from Nordpool</summary>
    public Task<JsonElement?> HourlyAsync(NordpoolHourlyParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("nordpool", "hourly", null, data);
    }

    ///<summary>Action that gets the raw hourly price for spesific date from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="date">For what year, default to currect year eg: YYYY-MM-DD</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public Task<JsonElement?> HourlyAsync(object? currency = null, object? date = null, object? area = null)
    {
        return _haContext.CallServiceWithResponseAsync("nordpool", "hourly", null, new NordpoolHourlyParameters { Currency = currency, Date = date, Area = area });
    }

    ///<summary>Action that gets the raw aggrigated monthly prices from Nordpool</summary>
    public void Monthly(NordpoolMonthlyParameters data)
    {
        _haContext.CallService("nordpool", "monthly", null, data);
    }

    ///<summary>Action that gets the raw aggrigated monthly prices from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="year">For what year, default to currect year eg: 2024</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public void Monthly(object? currency = null, object? year = null, object? area = null)
    {
        _haContext.CallService("nordpool", "monthly", null, new NordpoolMonthlyParameters { Currency = currency, Year = year, Area = area });
    }

    ///<summary>Action that gets the raw aggrigated monthly prices from Nordpool</summary>
    public Task<JsonElement?> MonthlyAsync(NordpoolMonthlyParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("nordpool", "monthly", null, data);
    }

    ///<summary>Action that gets the raw aggrigated monthly prices from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="year">For what year, default to currect year eg: 2024</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public Task<JsonElement?> MonthlyAsync(object? currency = null, object? year = null, object? area = null)
    {
        return _haContext.CallServiceWithResponseAsync("nordpool", "monthly", null, new NordpoolMonthlyParameters { Currency = currency, Year = year, Area = area });
    }

    public void Weekly(object? data = null)
    {
        _haContext.CallService("nordpool", "weekly", null, data);
    }

    public Task<JsonElement?> WeeklyAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("nordpool", "weekly", null, data);
    }

    ///<summary>Action that gets the raw aggrigated yearly prices from Nordpool</summary>
    public void Yearly(NordpoolYearlyParameters data)
    {
        _haContext.CallService("nordpool", "yearly", null, data);
    }

    ///<summary>Action that gets the raw aggrigated yearly prices from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="year">For what year, default to currect year eg: 2024</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public void Yearly(object? currency = null, object? year = null, object? area = null)
    {
        _haContext.CallService("nordpool", "yearly", null, new NordpoolYearlyParameters { Currency = currency, Year = year, Area = area });
    }

    ///<summary>Action that gets the raw aggrigated yearly prices from Nordpool</summary>
    public Task<JsonElement?> YearlyAsync(NordpoolYearlyParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("nordpool", "yearly", null, data);
    }

    ///<summary>Action that gets the raw aggrigated yearly prices from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="year">For what year, default to currect year eg: 2024</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public Task<JsonElement?> YearlyAsync(object? currency = null, object? year = null, object? area = null)
    {
        return _haContext.CallServiceWithResponseAsync("nordpool", "yearly", null, new NordpoolYearlyParameters { Currency = currency, Year = year, Area = area });
    }
}

public partial record NordpoolDailyParameters
{
    ///<summary>What currecy should the prices be returned in eg: NOK</summary>
    [JsonPropertyName("currency")]
    public object? Currency { get; init; }

    ///<summary>For what year, default to currect year eg: 2024</summary>
    [JsonPropertyName("year")]
    public object? Year { get; init; }

    ///<summary>Return the prices for what price area eg: NO2</summary>
    [JsonPropertyName("area")]
    public object? Area { get; init; }
}

public partial record NordpoolHourlyParameters
{
    ///<summary>What currecy should the prices be returned in eg: NOK</summary>
    [JsonPropertyName("currency")]
    public object? Currency { get; init; }

    ///<summary>For what year, default to currect year eg: YYYY-MM-DD</summary>
    [JsonPropertyName("date")]
    public object? Date { get; init; }

    ///<summary>Return the prices for what price area eg: NO2</summary>
    [JsonPropertyName("area")]
    public object? Area { get; init; }
}

public partial record NordpoolMonthlyParameters
{
    ///<summary>What currecy should the prices be returned in eg: NOK</summary>
    [JsonPropertyName("currency")]
    public object? Currency { get; init; }

    ///<summary>For what year, default to currect year eg: 2024</summary>
    [JsonPropertyName("year")]
    public object? Year { get; init; }

    ///<summary>Return the prices for what price area eg: NO2</summary>
    [JsonPropertyName("area")]
    public object? Area { get; init; }
}

public partial record NordpoolYearlyParameters
{
    ///<summary>What currecy should the prices be returned in eg: NOK</summary>
    [JsonPropertyName("currency")]
    public object? Currency { get; init; }

    ///<summary>For what year, default to currect year eg: 2024</summary>
    [JsonPropertyName("year")]
    public object? Year { get; init; }

    ///<summary>Return the prices for what price area eg: NO2</summary>
    [JsonPropertyName("area")]
    public object? Area { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    public void AlexaMedia(NotifyAlexaMediaParameters data)
    {
        _haContext.CallService("notify", "alexa_media", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMedia(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media", null, new NotifyAlexaMediaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_echo_pop_mark integration.</summary>
    public void AlexaMediaEchoPopMark(NotifyAlexaMediaEchoPopMarkParameters data)
    {
        _haContext.CallService("notify", "alexa_media_echo_pop_mark", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_echo_pop_mark integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEchoPopMark(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_echo_pop_mark", null, new NotifyAlexaMediaEchoPopMarkParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere integration.</summary>
    public void AlexaMediaEverywhere(NotifyAlexaMediaEverywhereParameters data)
    {
        _haContext.CallService("notify", "alexa_media_everywhere", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEverywhere(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_everywhere", null, new NotifyAlexaMediaEverywhereParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_last_called integration.</summary>
    public void AlexaMediaLastCalled(NotifyAlexaMediaLastCalledParameters data)
    {
        _haContext.CallService("notify", "alexa_media_last_called", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_last_called integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLastCalled(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_last_called", null, new NotifyAlexaMediaLastCalledParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_lg_oled_tv integration.</summary>
    public void AlexaMediaLgOledTv(NotifyAlexaMediaLgOledTvParameters data)
    {
        _haContext.CallService("notify", "alexa_media_lg_oled_tv", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_lg_oled_tv integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLgOledTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_lg_oled_tv", null, new NotifyAlexaMediaLgOledTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_mark_s_2nd_wiim_ultra integration.</summary>
    public void AlexaMediaMarkS2ndWiimUltra(NotifyAlexaMediaMarkS2ndWiimUltraParameters data)
    {
        _haContext.CallService("notify", "alexa_media_mark_s_2nd_wiim_ultra", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_mark_s_2nd_wiim_ultra integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaMarkS2ndWiimUltra(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_mark_s_2nd_wiim_ultra", null, new NotifyAlexaMediaMarkS2ndWiimUltraParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_mark_s_bose_quietcomfort_35_ii integration.</summary>
    public void AlexaMediaMarkSBoseQuietcomfort35Ii(NotifyAlexaMediaMarkSBoseQuietcomfort35IiParameters data)
    {
        _haContext.CallService("notify", "alexa_media_mark_s_bose_quietcomfort_35_ii", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_mark_s_bose_quietcomfort_35_ii integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaMarkSBoseQuietcomfort35Ii(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_mark_s_bose_quietcomfort_35_ii", null, new NotifyAlexaMediaMarkSBoseQuietcomfort35IiParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_mark_s_echo_dot integration.</summary>
    public void AlexaMediaMarkSEchoDot(NotifyAlexaMediaMarkSEchoDotParameters data)
    {
        _haContext.CallService("notify", "alexa_media_mark_s_echo_dot", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_mark_s_echo_dot integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaMarkSEchoDot(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_mark_s_echo_dot", null, new NotifyAlexaMediaMarkSEchoDotParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_mark_s_echo_show integration.</summary>
    public void AlexaMediaMarkSEchoShow(NotifyAlexaMediaMarkSEchoShowParameters data)
    {
        _haContext.CallService("notify", "alexa_media_mark_s_echo_show", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_mark_s_echo_show integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaMarkSEchoShow(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_mark_s_echo_show", null, new NotifyAlexaMediaMarkSEchoShowParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_mark_s_wiim_ultra integration.</summary>
    public void AlexaMediaMarkSWiimUltra(NotifyAlexaMediaMarkSWiimUltraParameters data)
    {
        _haContext.CallService("notify", "alexa_media_mark_s_wiim_ultra", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_mark_s_wiim_ultra integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaMarkSWiimUltra(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_mark_s_wiim_ultra", null, new NotifyAlexaMediaMarkSWiimUltraParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    public void AlexaMediaThisDevice(NotifyAlexaMediaThisDeviceParameters data)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaThisDevice(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, new NotifyAlexaMediaThisDeviceParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the lg_webos_tv_oled65c16la service.</summary>
    public void LgWebosTvOled65c16la(NotifyLgWebosTvOled65c16laParameters data)
    {
        _haContext.CallService("notify", "lg_webos_tv_oled65c16la", null, data);
    }

    ///<summary>Sends a notification message using the lg_webos_tv_oled65c16la service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void LgWebosTvOled65c16la(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "lg_webos_tv_oled65c16la", null, new NotifyLgWebosTvOled65c16laParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_iphone_mark integration.</summary>
    public void MobileAppIphoneMark(NotifyMobileAppIphoneMarkParameters data)
    {
        _haContext.CallService("notify", "mobile_app_iphone_mark", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_iphone_mark integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppIphoneMark(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_iphone_mark", null, new NotifyMobileAppIphoneMarkParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality via this field. For more information, refer to the integration documentation. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public partial record NotifyAlexaMediaParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEchoPopMarkParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEverywhereParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLastCalledParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLgOledTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMarkS2ndWiimUltraParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMarkSBoseQuietcomfort35IiParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMarkSEchoDotParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMarkSEchoShowParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMarkSWiimUltraParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaThisDeviceParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyLgWebosTvOled65c16laParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppIphoneMarkParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality via this field. For more information, refer to the integration documentation. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    ///<param name="notificationId">ID of the notification to be deleted. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Deletes all notifications from the notifications panel.</summary>
    public void DismissAll(object? data = null)
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null, data);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be deleted. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("person", "reload", null, data);
    }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable(object? data = null)
    {
        _haContext.CallService("recorder", "disable", null, data);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable(object? data = null)
    {
        _haContext.CallService("recorder", "enable", null, data);
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    public void GetStatistics(RecorderGetStatisticsParameters data)
    {
        _haContext.CallService("recorder", "get_statistics", null, data);
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    ///<param name="startTime">The start time for the statistics query. eg: 2025-01-01 00:00:00</param>
    ///<param name="endTime">The end time for the statistics query. If omitted, returns all statistics from start time onward. eg: 2025-01-02 00:00:00</param>
    ///<param name="statisticIds">The entity IDs or statistic IDs to return statistics for. eg: [&quot;sensor.energy_consumption&quot;,&quot;sensor.temperature&quot;]</param>
    ///<param name="period">The time period to group statistics by. eg: hour</param>
    ///<param name="types">The types of statistics values to return. eg: [&quot;mean&quot;,&quot;sum&quot;]</param>
    ///<param name="units">Optional unit conversion mapping. eg: {&quot;energy&quot;:&quot;kWh&quot;,&quot;temperature&quot;:&quot;°C&quot;}</param>
    public void GetStatistics(object startTime, object statisticIds, object period, object types, object? endTime = null, object? units = null)
    {
        _haContext.CallService("recorder", "get_statistics", null, new RecorderGetStatisticsParameters { StartTime = startTime, EndTime = endTime, StatisticIds = statisticIds, Period = period, Types = types, Units = units });
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    public Task<JsonElement?> GetStatisticsAsync(RecorderGetStatisticsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("recorder", "get_statistics", null, data);
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    ///<param name="startTime">The start time for the statistics query. eg: 2025-01-01 00:00:00</param>
    ///<param name="endTime">The end time for the statistics query. If omitted, returns all statistics from start time onward. eg: 2025-01-02 00:00:00</param>
    ///<param name="statisticIds">The entity IDs or statistic IDs to return statistics for. eg: [&quot;sensor.energy_consumption&quot;,&quot;sensor.temperature&quot;]</param>
    ///<param name="period">The time period to group statistics by. eg: hour</param>
    ///<param name="types">The types of statistics values to return. eg: [&quot;mean&quot;,&quot;sum&quot;]</param>
    ///<param name="units">Optional unit conversion mapping. eg: {&quot;energy&quot;:&quot;kWh&quot;,&quot;temperature&quot;:&quot;°C&quot;}</param>
    public Task<JsonElement?> GetStatisticsAsync(object startTime, object statisticIds, object period, object types, object? endTime = null, object? units = null)
    {
        return _haContext.CallServiceWithResponseAsync("recorder", "get_statistics", null, new RecorderGetStatisticsParameters { StartTime = startTime, EndTime = endTime, StatisticIds = statisticIds, Period = period, Types = types, Units = units });
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the Recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the Recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the Recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderGetStatisticsParameters
{
    ///<summary>The start time for the statistics query. eg: 2025-01-01 00:00:00</summary>
    [JsonPropertyName("start_time")]
    public object? StartTime { get; init; }

    ///<summary>The end time for the statistics query. If omitted, returns all statistics from start time onward. eg: 2025-01-02 00:00:00</summary>
    [JsonPropertyName("end_time")]
    public object? EndTime { get; init; }

    ///<summary>The entity IDs or statistic IDs to return statistics for. eg: [&quot;sensor.energy_consumption&quot;,&quot;sensor.temperature&quot;]</summary>
    [JsonPropertyName("statistic_ids")]
    public object? StatisticIds { get; init; }

    ///<summary>The time period to group statistics by. eg: hour</summary>
    [JsonPropertyName("period")]
    public object? Period { get; init; }

    ///<summary>The types of statistics values to return. eg: [&quot;mean&quot;,&quot;sum&quot;]</summary>
    [JsonPropertyName("types")]
    public object? Types { get; init; }

    ///<summary>Optional unit conversion mapping. eg: {&quot;energy&quot;:&quot;kWh&quot;,&quot;temperature&quot;:&quot;°C&quot;}</summary>
    [JsonPropertyName("units")]
    public object? Units { get; init; }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the Recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the Recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the Recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "toggle", target, data);
    }

    ///<summary>Sends the turn off command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "turn_off", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class RoborockServices
{
    private readonly IHaContext _haContext;
    public RoborockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the map and room information of your device.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetMaps(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("roborock", "get_maps", target, data);
    }

    ///<summary>Retrieves the map and room information of your device.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetMapsAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("roborock", "get_maps", target, data);
    }

    ///<summary>Retrieves the current position of the vacuum.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetVacuumCurrentPosition(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("roborock", "get_vacuum_current_position", target, data);
    }

    ///<summary>Retrieves the current position of the vacuum.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetVacuumCurrentPositionAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("roborock", "get_vacuum_current_position", target, data);
    }

    ///<summary>Sends the vacuum to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetVacuumGotoPosition(ServiceTarget target, RoborockSetVacuumGotoPositionParameters data)
    {
        _haContext.CallService("roborock", "set_vacuum_goto_position", target, data);
    }

    ///<summary>Sends the vacuum to a specific position.</summary>
    ///<param name="x">Coordinates are relative to the dock. x=25500,y=25500 is the dock position. eg: 27500</param>
    ///<param name="y">Coordinates are relative to the dock. x=25500,y=25500 is the dock position. eg: 32000</param>
    public void SetVacuumGotoPosition(ServiceTarget target, string x, string y)
    {
        _haContext.CallService("roborock", "set_vacuum_goto_position", target, new RoborockSetVacuumGotoPositionParameters { X = x, Y = y });
    }
}

public partial record RoborockSetVacuumGotoPositionParameters
{
    ///<summary>Coordinates are relative to the dock. x=25500,y=25500 is the dock position. eg: 27500</summary>
    [JsonPropertyName("x")]
    public string? X { get; init; }

    ///<summary>Coordinates are relative to the dock. x=25500,y=25500 is the dock position. eg: 32000</summary>
    [JsonPropertyName("y")]
    public string? Y { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("scene", "delete", target, data);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("scene", "reload", null, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the configured time ranges of one or multiple schedules.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetSchedule(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("schedule", "get_schedule", target, data);
    }

    ///<summary>Retrieves the configured time ranges of one or multiple schedules.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetScheduleAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("schedule", "get_schedule", target, data);
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("schedule", "reload", null, data);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("script", "reload", null, data);
    }

    public void SayWithAlexa(object? data = null)
    {
        _haContext.CallService("script", "say_with_alexa", null, data);
    }

    public Task<JsonElement?> SayWithAlexaAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "say_with_alexa", null, data);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "toggle", target, data);
    }

    ///<summary>Zet de lampen boven de eettafel aan/uit</summary>
    public void ToggleLampEettafel(object? data = null)
    {
        _haContext.CallService("script", "toggle_lamp_eettafel", null, data);
    }

    ///<summary>Zet de lampen boven de eettafel aan/uit</summary>
    public Task<JsonElement?> ToggleLampEettafelAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "toggle_lamp_eettafel", null, data);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_off", target, data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_on", target, data);
    }

    public void WaterOpwarmen(object? data = null)
    {
        _haContext.CallService("script", "water_opwarmen", null, data);
    }

    public Task<JsonElement?> WaterOpwarmenAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "water_opwarmen", null, data);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "toggle", target, data);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "turn_off", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "toggle", target, data);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_off", target, data);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_on", target, data);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes all log entries.</summary>
    public void Clear(object? data = null)
    {
        _haContext.CallService("system_log", "clear", null, data);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("template", "reload", null, data);
    }
}

public partial class TibberServices
{
    private readonly IHaContext _haContext;
    public TibberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Fetches hourly energy prices including price level.</summary>
    public void GetPrices(TibberGetPricesParameters data)
    {
        _haContext.CallService("tibber", "get_prices", null, data);
    }

    ///<summary>Fetches hourly energy prices including price level.</summary>
    ///<param name="start">Specifies the date and time from which to retrieve prices. Defaults to today if omitted. eg: 2024-01-01 00:00:00</param>
    ///<param name="end">Specifies the date and time until which to retrieve prices. Defaults to the last hour of today if omitted. eg: 2024-01-01 23:00:00</param>
    public void GetPrices(object? start = null, object? end = null)
    {
        _haContext.CallService("tibber", "get_prices", null, new TibberGetPricesParameters { Start = start, End = end });
    }

    ///<summary>Fetches hourly energy prices including price level.</summary>
    public Task<JsonElement?> GetPricesAsync(TibberGetPricesParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("tibber", "get_prices", null, data);
    }

    ///<summary>Fetches hourly energy prices including price level.</summary>
    ///<param name="start">Specifies the date and time from which to retrieve prices. Defaults to today if omitted. eg: 2024-01-01 00:00:00</param>
    ///<param name="end">Specifies the date and time until which to retrieve prices. Defaults to the last hour of today if omitted. eg: 2024-01-01 23:00:00</param>
    public Task<JsonElement?> GetPricesAsync(object? start = null, object? end = null)
    {
        return _haContext.CallServiceWithResponseAsync("tibber", "get_prices", null, new TibberGetPricesParameters { Start = start, End = end });
    }
}

public partial record TibberGetPricesParameters
{
    ///<summary>Specifies the date and time from which to retrieve prices. Defaults to today if omitted. eg: 2024-01-01 00:00:00</summary>
    [JsonPropertyName("start")]
    public object? Start { get; init; }

    ///<summary>Specifies the date and time until which to retrieve prices. Defaults to the last hour of today if omitted. eg: 2024-01-01 23:00:00</summary>
    [JsonPropertyName("end")]
    public object? End { get; init; }
}

public partial class TimeServices
{
    private readonly IHaContext _haContext;
    public TimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TimeSetValueParameters data)
    {
        _haContext.CallService("time", "set_value", target, data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="time">The time to set. eg: 22:15</param>
    public void SetValue(ServiceTarget target, DateTime time)
    {
        _haContext.CallService("time", "set_value", target, new TimeSetValueParameters { Time = time });
    }
}

public partial record TimeSetValueParameters
{
    ///<summary>The time to set. eg: 22:15</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "cancel", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "finish", target, data);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "pause", target, data);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("timer", "reload", null, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Custom duration to restart the timer with. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache(object? data = null)
    {
        _haContext.CallService("tts", "clear_cache", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleTranslateSay(TtsGoogleTranslateSayParameters data)
    {
        _haContext.CallService("tts", "google_translate_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void GoogleTranslateSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_translate_say", null, new TtsGoogleTranslateSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleTranslateSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "clear_skipped", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "skip", target, data);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "clean_spot", target, data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "locate", target, data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "pause", target, data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "return_to_base", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "start", target, data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "stop", target, data);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class ValveServices
{
    private readonly IHaContext _haContext;
    public ValveServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a valve.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseValve(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("valve", "close_valve", target, data);
    }

    ///<summary>Opens a valve.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenValve(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("valve", "open_valve", target, data);
    }

    ///<summary>Moves a valve to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValvePosition(ServiceTarget target, ValveSetValvePositionParameters data)
    {
        _haContext.CallService("valve", "set_valve_position", target, data);
    }

    ///<summary>Moves a valve to a specific position.</summary>
    ///<param name="position">Target position.</param>
    public void SetValvePosition(ServiceTarget target, long position)
    {
        _haContext.CallService("valve", "set_valve_position", target, new ValveSetValvePositionParameters { Position = position });
    }

    ///<summary>Stops the valve movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopValve(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("valve", "stop_valve", target, data);
    }

    ///<summary>Toggles a valve open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("valve", "toggle", target, data);
    }
}

public partial record ValveSetValvePositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_off", target, data);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_on", target, data);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecasts(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        _haContext.CallService("weather", "get_forecasts", target, data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="type">The scope of the weather forecast.</param>
    public void GetForecasts(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, object @type)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }
}

public partial record WeatherGetForecastsParameters
{
    ///<summary>The scope of the weather forecast.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class WebostvServices
{
    private readonly IHaContext _haContext;
    public WebostvServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a button press command.</summary>
    public void Button(WebostvButtonParameters data)
    {
        _haContext.CallService("webostv", "button", null, data);
    }

    ///<summary>Sends a button press command.</summary>
    ///<param name="entityId">Name(s) of the webOS TV entities where to run the API method.</param>
    ///<param name="button">Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. eg: LEFT</param>
    public void Button(string entityId, string button)
    {
        _haContext.CallService("webostv", "button", null, new WebostvButtonParameters { EntityId = entityId, Button = button });
    }

    ///<summary>Sends a command.</summary>
    public void Command(WebostvCommandParameters data)
    {
        _haContext.CallService("webostv", "command", null, data);
    }

    ///<summary>Sends a command.</summary>
    ///<param name="entityId">Name(s) of the webOS TV entities where to run the API method.</param>
    ///<param name="command">Endpoint of the command. eg: system.launcher/open</param>
    ///<param name="payload">An optional payload to provide to the endpoint in the format of key value pairs. eg: target: https://www.google.com</param>
    public void Command(string entityId, string command, object? payload = null)
    {
        _haContext.CallService("webostv", "command", null, new WebostvCommandParameters { EntityId = entityId, Command = command, Payload = payload });
    }

    ///<summary>Sends a command.</summary>
    public Task<JsonElement?> CommandAsync(WebostvCommandParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("webostv", "command", null, data);
    }

    ///<summary>Sends a command.</summary>
    ///<param name="entityId">Name(s) of the webOS TV entities where to run the API method.</param>
    ///<param name="command">Endpoint of the command. eg: system.launcher/open</param>
    ///<param name="payload">An optional payload to provide to the endpoint in the format of key value pairs. eg: target: https://www.google.com</param>
    public Task<JsonElement?> CommandAsync(string entityId, string command, object? payload = null)
    {
        return _haContext.CallServiceWithResponseAsync("webostv", "command", null, new WebostvCommandParameters { EntityId = entityId, Command = command, Payload = payload });
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    public void SelectSoundOutput(WebostvSelectSoundOutputParameters data)
    {
        _haContext.CallService("webostv", "select_sound_output", null, data);
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    ///<param name="entityId">Name(s) of the webOS TV entities to change sound output on.</param>
    ///<param name="soundOutput">Name of the sound output to switch to. eg: external_speaker</param>
    public void SelectSoundOutput(string entityId, string soundOutput)
    {
        _haContext.CallService("webostv", "select_sound_output", null, new WebostvSelectSoundOutputParameters { EntityId = entityId, SoundOutput = soundOutput });
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    public Task<JsonElement?> SelectSoundOutputAsync(WebostvSelectSoundOutputParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("webostv", "select_sound_output", null, data);
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    ///<param name="entityId">Name(s) of the webOS TV entities to change sound output on.</param>
    ///<param name="soundOutput">Name of the sound output to switch to. eg: external_speaker</param>
    public Task<JsonElement?> SelectSoundOutputAsync(string entityId, string soundOutput)
    {
        return _haContext.CallServiceWithResponseAsync("webostv", "select_sound_output", null, new WebostvSelectSoundOutputParameters { EntityId = entityId, SoundOutput = soundOutput });
    }
}

public partial record WebostvButtonParameters
{
    ///<summary>Name(s) of the webOS TV entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. eg: LEFT</summary>
    [JsonPropertyName("button")]
    public string? Button { get; init; }
}

public partial record WebostvCommandParameters
{
    ///<summary>Name(s) of the webOS TV entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Endpoint of the command. eg: system.launcher/open</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>An optional payload to provide to the endpoint in the format of key value pairs. eg: target: https://www.google.com</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }
}

public partial record WebostvSelectSoundOutputParameters
{
    ///<summary>Name(s) of the webOS TV entities to change sound output on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the sound output to switch to. eg: external_speaker</summary>
    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }
}

public partial class ZhaServices
{
    private readonly IHaContext _haContext;
    public ZhaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUserCode(ServiceTarget target, ZhaClearLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public void ClearLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableLockUserCode(ServiceTarget target, ZhaDisableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public void DisableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableLockUserCode(ServiceTarget target, ZhaEnableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public void EnableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    public void IssueZigbeeClusterCommand(ZhaIssueZigbeeClusterCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, data);
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="commandType">Type of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="params">Parameters to pass to the command.</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeClusterCommand(string ieee, long endpointId, long clusterId, long command, object commandType, object? clusterType = null, object? args = null, object? @params = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, new ZhaIssueZigbeeClusterCommandParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Command = command, CommandType = commandType, Args = args, Params = @params, Manufacturer = manufacturer });
    }

    ///<summary>Issues a command on the specified cluster on the specified group.</summary>
    public void IssueZigbeeGroupCommand(ZhaIssueZigbeeGroupCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, data);
    }

    ///<summary>Issues a command on the specified cluster on the specified group.</summary>
    ///<param name="group">Hexadecimal address of the group. eg: 546</param>
    ///<param name="clusterId">ZCL cluster to send command to.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeGroupCommand(string @group, long clusterId, long command, object? clusterType = null, object? args = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, new ZhaIssueZigbeeGroupCommandParameters { Group = @group, ClusterId = clusterId, ClusterType = clusterType, Command = command, Args = args, Manufacturer = manufacturer });
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    public void Permit(ZhaPermitParameters data)
    {
        _haContext.CallService("zha", "permit", null, data);
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    ///<param name="duration">Time to permit joins.</param>
    ///<param name="ieee">IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="sourceIeee">IEEE address of the joining device (must be combined with the &apos;Install code&apos; field). eg: 00:0a:bf:00:01:10:23:35</param>
    ///<param name="installCode">Install code of the joining device (must be combined with the &apos;Source IEEE&apos; field). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</param>
    ///<param name="qrCode">Provides both the IEEE address and the install code of the joining device (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</param>
    public void Permit(long? duration = null, string? ieee = null, string? sourceIeee = null, string? installCode = null, string? qrCode = null)
    {
        _haContext.CallService("zha", "permit", null, new ZhaPermitParameters { Duration = duration, Ieee = ieee, SourceIeee = sourceIeee, InstallCode = installCode, QrCode = qrCode });
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    public void Remove(ZhaRemoveParameters data)
    {
        _haContext.CallService("zha", "remove", null, data);
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    ///<param name="ieee">IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void Remove(string ieee)
    {
        _haContext.CallService("zha", "remove", null, new ZhaRemoveParameters { Ieee = ieee });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUserCode(ServiceTarget target, ZhaSetLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public void SetLockUserCode(ServiceTarget target, string codeSlot, string userCode)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    public void SetZigbeeClusterAttribute(ZhaSetZigbeeClusterAttributeParameters data)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, data);
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="attribute">ID of the attribute to set. eg: 0</param>
    ///<param name="value">Value to write to the attribute. eg: 1</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void SetZigbeeClusterAttribute(string ieee, long endpointId, long clusterId, long attribute, string value, object? clusterType = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, new ZhaSetZigbeeClusterAttributeParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Attribute = attribute, Value = value, Manufacturer = manufacturer });
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    public void WarningDeviceSquawk(ZhaWarningDeviceSquawkParameters data)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, data);
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</param>
    ///<param name="strobe">The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</param>
    ///<param name="level">The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</param>
    public void WarningDeviceSquawk(string ieee, long? mode = null, long? strobe = null, long? level = null)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, new ZhaWarningDeviceSquawkParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level });
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    public void WarningDeviceWarn(ZhaWarningDeviceWarnParameters data)
    {
        _haContext.CallService("zha", "warning_device_warn", null, data);
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</param>
    ///<param name="strobe">The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</param>
    ///<param name="level">The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</param>
    ///<param name="duration">Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</param>
    ///<param name="dutyCycle">Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</param>
    ///<param name="intensity">Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</param>
    public void WarningDeviceWarn(string ieee, long? mode = null, long? strobe = null, long? level = null, long? duration = null, long? dutyCycle = null, long? intensity = null)
    {
        _haContext.CallService("zha", "warning_device_warn", null, new ZhaWarningDeviceWarnParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level, Duration = duration, DutyCycle = dutyCycle, Intensity = intensity });
    }
}

public partial record ZhaClearLockUserCodeParameters
{
    ///<summary>Code slot to clear code from. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaDisableLockUserCodeParameters
{
    ///<summary>Code slot to disable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaEnableLockUserCodeParameters
{
    ///<summary>Code slot to enable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaIssueZigbeeClusterCommandParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>Type of the command to execute.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Parameters to pass to the command.</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaIssueZigbeeGroupCommandParameters
{
    ///<summary>Hexadecimal address of the group. eg: 546</summary>
    [JsonPropertyName("group")]
    public string? Group { get; init; }

    ///<summary>ZCL cluster to send command to.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaPermitParameters
{
    ///<summary>Time to permit joins.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>IEEE address of the joining device (must be combined with the &apos;Install code&apos; field). eg: 00:0a:bf:00:01:10:23:35</summary>
    [JsonPropertyName("source_ieee")]
    public string? SourceIeee { get; init; }

    ///<summary>Install code of the joining device (must be combined with the &apos;Source IEEE&apos; field). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</summary>
    [JsonPropertyName("install_code")]
    public string? InstallCode { get; init; }

    ///<summary>Provides both the IEEE address and the install code of the joining device (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</summary>
    [JsonPropertyName("qr_code")]
    public string? QrCode { get; init; }
}

public partial record ZhaRemoveParameters
{
    ///<summary>IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }
}

public partial record ZhaSetLockUserCodeParameters
{
    ///<summary>Code slot to set the code in. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Code to set. eg: 1234</summary>
    [JsonPropertyName("user_code")]
    public string? UserCode { get; init; }
}

public partial record ZhaSetZigbeeClusterAttributeParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the attribute to set. eg: 0</summary>
    [JsonPropertyName("attribute")]
    public long? Attribute { get; init; }

    ///<summary>Value to write to the attribute. eg: 1</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaWarningDeviceSquawkParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }
}

public partial record ZhaWarningDeviceWarnParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }

    ///<summary>Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</summary>
    [JsonPropertyName("duty_cycle")]
    public long? DutyCycle { get; init; }

    ///<summary>Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</summary>
    [JsonPropertyName("intensity")]
    public long? Intensity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("zone", "reload", null, data);
    }
}

public static class AlarmControlPanelEntityExtensionMethods
{
    ///<summary>Arms the alarm in the away mode.</summary>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Triggers the alarm manually.</summary>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Triggers the alarm manually.</summary>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Triggers the alarm manually.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }

    ///<summary>Triggers the alarm manually.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Presses a button entity.</summary>
    public static void Press(this IButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Presses a button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Retrieves events on a calendar within a time range.</summary>
    public static Task<JsonElement?> GetEventsAsync(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_events", data);
    }

    ///<summary>Retrieves events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static Task<JsonElement?> GetEventsAsync(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        return target.CallServiceWithResponseAsync("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Retrieves events on a calendar within a time range.</summary>
    public static void GetEvents(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Retrieves events on a calendar within a time range.</summary>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Retrieves events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static void GetEvents(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Retrieves events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class DatetimeEntityExtensionMethods
{
    ///<summary>Sets the date/time for a datetime entity.</summary>
    public static void SetValue(this DatetimeEntity target, DatetimeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the date/time for a datetime entity.</summary>
    public static void SetValue(this IEnumerable<DatetimeEntity> target, DatetimeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the date/time for a datetime entity.</summary>
    ///<param name="target">The DatetimeEntity to call this service for</param>
    ///<param name="datetime">The date/time to set. The time zone of the Home Assistant instance is assumed. eg: 2023-10-07T21:35:22</param>
    public static void SetValue(this DatetimeEntity target, object datetime)
    {
        target.CallService("set_value", new DatetimeSetValueParameters { Datetime = datetime });
    }

    ///<summary>Sets the date/time for a datetime entity.</summary>
    ///<param name="target">The IEnumerable&lt;DatetimeEntity&gt; to call this service for</param>
    ///<param name="datetime">The date/time to set. The time zone of the Home Assistant instance is assumed. eg: 2023-10-07T21:35:22</param>
    public static void SetValue(this IEnumerable<DatetimeEntity> target, object datetime)
    {
        target.CallService("set_value", new DatetimeSetValueParameters { Datetime = datetime });
    }
}

public static class ImageEntityExtensionMethods
{
    ///<summary>Takes a snapshot from an image.</summary>
    public static void Snapshot(this ImageEntity target, ImageSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from an image.</summary>
    public static void Snapshot(this IEnumerable<ImageEntity> target, ImageSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The ImageEntity to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</param>
    public static void Snapshot(this ImageEntity target, string filename)
    {
        target.CallService("snapshot", new ImageSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The IEnumerable&lt;ImageEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</param>
    public static void Snapshot(this IEnumerable<ImageEntity> target, string filename)
    {
        target.CallService("snapshot", new ImageSnapshotParameters { Filename = filename });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class InputDatetimeEntityExtensionMethods
{
    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IInputDatetimeEntityCore target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IInputDatetimeEntityCore to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IInputDatetimeEntityCore target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IEnumerable&lt;IInputDatetimeEntityCore&gt; to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputTextEntityCore target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputTextEntityCore to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IInputTextEntityCore target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputTextEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void Toggle(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? colorTempKelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? colorTempKelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOff(this ILightEntityCore target, long? transition = null, object? advancedFields = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, long? transition = null, object? advancedFields = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOn(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? colorTempKelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? colorTempKelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }
}

public static class LinkplayEntityExtensionMethods
{
    ///<summary>Plays a preset on the device.</summary>
    public static void PlayPreset(this IMediaPlayerEntityCore target, LinkplayPlayPresetParameters data)
    {
        target.CallService("play_preset", data);
    }

    ///<summary>Plays a preset on the device.</summary>
    public static void PlayPreset(this IEnumerable<IMediaPlayerEntityCore> target, LinkplayPlayPresetParameters data)
    {
        target.CallService("play_preset", data);
    }

    ///<summary>Plays a preset on the device.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="presetNumber">The number of the preset to play. eg: 1</param>
    public static void PlayPreset(this IMediaPlayerEntityCore target, long presetNumber)
    {
        target.CallService("play_preset", new LinkplayPlayPresetParameters { PresetNumber = presetNumber });
    }

    ///<summary>Plays a preset on the device.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="presetNumber">The number of the preset to play. eg: 1</param>
    public static void PlayPreset(this IEnumerable<IMediaPlayerEntityCore> target, long presetNumber)
    {
        target.CallService("play_preset", new LinkplayPlayPresetParameters { PresetNumber = presetNumber });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Browses the available media.</summary>
    public static Task<JsonElement?> BrowseMediaAsync(this IMediaPlayerEntityCore target, MediaPlayerBrowseMediaParameters data)
    {
        return target.CallServiceWithResponseAsync("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static Task<JsonElement?> BrowseMediaAsync(this IMediaPlayerEntityCore target, string? mediaContentType = null, string? mediaContentId = null)
    {
        return target.CallServiceWithResponseAsync("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Browses the available media.</summary>
    public static void BrowseMedia(this IMediaPlayerEntityCore target, MediaPlayerBrowseMediaParameters data)
    {
        target.CallService("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    public static void BrowseMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerBrowseMediaParameters data)
    {
        target.CallService("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static void BrowseMedia(this IMediaPlayerEntityCore target, string? mediaContentType = null, string? mediaContentId = null)
    {
        target.CallService("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static void BrowseMedia(this IEnumerable<IMediaPlayerEntityCore> target, string? mediaContentType = null, string? mediaContentId = null)
    {
        target.CallService("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Sets the repeat mode.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Sets the repeat mode.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Searches the available media.</summary>
    public static Task<JsonElement?> SearchMediaAsync(this IMediaPlayerEntityCore target, MediaPlayerSearchMediaParameters data)
    {
        return target.CallServiceWithResponseAsync("search_media", data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public static Task<JsonElement?> SearchMediaAsync(this IMediaPlayerEntityCore target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, string? mediaFilterClasses = null)
    {
        return target.CallServiceWithResponseAsync("search_media", new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Searches the available media.</summary>
    public static void SearchMedia(this IMediaPlayerEntityCore target, MediaPlayerSearchMediaParameters data)
    {
        target.CallService("search_media", data);
    }

    ///<summary>Searches the available media.</summary>
    public static void SearchMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSearchMediaParameters data)
    {
        target.CallService("search_media", data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public static void SearchMedia(this IMediaPlayerEntityCore target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, string? mediaFilterClasses = null)
    {
        target.CallService("search_media", new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public static void SearchMedia(this IEnumerable<IMediaPlayerEntityCore> target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, string? mediaFilterClasses = null)
    {
        target.CallService("search_media", new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_up", data);
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_up", data);
    }
}

public static class MypyllantEntityExtensionMethods
{
    ///<summary>Cancel manual cooling</summary>
    public static void CancelCoolingForDays(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("cancel_cooling_for_days", data);
    }

    ///<summary>Cancel manual cooling</summary>
    public static void CancelCoolingForDays(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("cancel_cooling_for_days", data);
    }

    ///<summary>Cancel holiday / away mode</summary>
    public static void CancelHoliday(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("cancel_holiday", data);
    }

    ///<summary>Cancel holiday / away mode</summary>
    public static void CancelHoliday(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("cancel_holiday", data);
    }

    ///<summary>Cancels quick veto temperature and returns to normal schedule / manual setpoint</summary>
    public static void CancelQuickVeto(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("cancel_quick_veto", data);
    }

    ///<summary>Cancels quick veto temperature and returns to normal schedule / manual setpoint</summary>
    public static void CancelQuickVeto(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("cancel_quick_veto", data);
    }

    ///<summary>Cancels Ventilation Boost early</summary>
    public static void CancelVentilationBoost(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("cancel_ventilation_boost", data);
    }

    ///<summary>Cancels Ventilation Boost early</summary>
    public static void CancelVentilationBoost(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("cancel_ventilation_boost", data);
    }

    ///<summary>Enables manual cooling between start and end dates</summary>
    public static void SetCoolingForDays(this IClimateEntityCore target, MypyllantSetCoolingForDaysParameters data)
    {
        target.CallService("set_cooling_for_days", data);
    }

    ///<summary>Enables manual cooling between start and end dates</summary>
    public static void SetCoolingForDays(this IEnumerable<IClimateEntityCore> target, MypyllantSetCoolingForDaysParameters data)
    {
        target.CallService("set_cooling_for_days", data);
    }

    ///<summary>Enables manual cooling between start and end dates</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="start">Optional start date of the cooling period, defaults to now (not supported on VRC700 controllers) eg: &quot;2023-01-10 14:00:00&quot;</param>
    ///<param name="end">Optional end date of the cooling period, defaults to one year in the future (not supported on VRC700 controllers) eg: &quot;2023-01-01 0:00:00&quot;</param>
    ///<param name="durationDays">Duration in days (required on VRC700 controllers) eg: 3</param>
    public static void SetCoolingForDays(this IClimateEntityCore target, object? start = null, object? end = null, double? durationDays = null)
    {
        target.CallService("set_cooling_for_days", new MypyllantSetCoolingForDaysParameters { Start = start, End = end, DurationDays = durationDays });
    }

    ///<summary>Enables manual cooling between start and end dates</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="start">Optional start date of the cooling period, defaults to now (not supported on VRC700 controllers) eg: &quot;2023-01-10 14:00:00&quot;</param>
    ///<param name="end">Optional end date of the cooling period, defaults to one year in the future (not supported on VRC700 controllers) eg: &quot;2023-01-01 0:00:00&quot;</param>
    ///<param name="durationDays">Duration in days (required on VRC700 controllers) eg: 3</param>
    public static void SetCoolingForDays(this IEnumerable<IClimateEntityCore> target, object? start = null, object? end = null, double? durationDays = null)
    {
        target.CallService("set_cooling_for_days", new MypyllantSetCoolingForDaysParameters { Start = start, End = end, DurationDays = durationDays });
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    public static void SetDhwCirculationTimeProgram(this WaterHeaterEntity target, MypyllantSetDhwCirculationTimeProgramParameters data)
    {
        target.CallService("set_dhw_circulation_time_program", data);
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    public static void SetDhwCirculationTimeProgram(this IEnumerable<WaterHeaterEntity> target, MypyllantSetDhwCirculationTimeProgramParameters data)
    {
        target.CallService("set_dhw_circulation_time_program", data);
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public static void SetDhwCirculationTimeProgram(this WaterHeaterEntity target, object? timeProgram = null)
    {
        target.CallService("set_dhw_circulation_time_program", new MypyllantSetDhwCirculationTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Updates the time program for the circulation pump of a water heater</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public static void SetDhwCirculationTimeProgram(this IEnumerable<WaterHeaterEntity> target, object? timeProgram = null)
    {
        target.CallService("set_dhw_circulation_time_program", new MypyllantSetDhwCirculationTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Updates the time program for a water heater</summary>
    public static void SetDhwTimeProgram(this WaterHeaterEntity target, MypyllantSetDhwTimeProgramParameters data)
    {
        target.CallService("set_dhw_time_program", data);
    }

    ///<summary>Updates the time program for a water heater</summary>
    public static void SetDhwTimeProgram(this IEnumerable<WaterHeaterEntity> target, MypyllantSetDhwTimeProgramParameters data)
    {
        target.CallService("set_dhw_time_program", data);
    }

    ///<summary>Updates the time program for a water heater</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public static void SetDhwTimeProgram(this WaterHeaterEntity target, object? timeProgram = null)
    {
        target.CallService("set_dhw_time_program", new MypyllantSetDhwTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Updates the time program for a water heater</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="timeProgram">A dictionary of days with a list of start_time and end_time (in minutes since midnight) eg: monday: - start_time: 330   end_time: 1260 tuesday: - start_time: 330   end_time: 1260 wednesday: - start_time: 330   end_time: 1260 thursday: - start_time: 330   end_time: 1260 friday: - start_time: 330   end_time: 1260 saturday: - start_time: 450   end_time: 1260 sunday: - start_time: 450   end_time: 1260 </param>
    public static void SetDhwTimeProgram(this IEnumerable<WaterHeaterEntity> target, object? timeProgram = null)
    {
        target.CallService("set_dhw_time_program", new MypyllantSetDhwTimeProgramParameters { TimeProgram = timeProgram });
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    public static void SetHoliday(this IClimateEntityCore target, MypyllantSetHolidayParameters data)
    {
        target.CallService("set_holiday", data);
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    public static void SetHoliday(this IEnumerable<IClimateEntityCore> target, MypyllantSetHolidayParameters data)
    {
        target.CallService("set_holiday", data);
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="start">Optional start date of the holiday, defaults to now eg: &quot;2023-01-10 14:00:00&quot;</param>
    ///<param name="end">Optional end date of the holiday, defaults to one year in the future eg: &quot;2023-01-01 0:00:00&quot;</param>
    ///<param name="durationHours">Optional duration of the holiday in hours, defaults to one year eg: 72</param>
    ///<param name="setpoint">Setpoint temperature, required on VRC700 eg: 10</param>
    public static void SetHoliday(this IClimateEntityCore target, object? start = null, object? end = null, long? durationHours = null, long? setpoint = null)
    {
        target.CallService("set_holiday", new MypyllantSetHolidayParameters { Start = start, End = end, DurationHours = durationHours, Setpoint = setpoint });
    }

    ///<summary>Set holiday / away mode with start / end or duration</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="start">Optional start date of the holiday, defaults to now eg: &quot;2023-01-10 14:00:00&quot;</param>
    ///<param name="end">Optional end date of the holiday, defaults to one year in the future eg: &quot;2023-01-01 0:00:00&quot;</param>
    ///<param name="durationHours">Optional duration of the holiday in hours, defaults to one year eg: 72</param>
    ///<param name="setpoint">Setpoint temperature, required on VRC700 eg: 10</param>
    public static void SetHoliday(this IEnumerable<IClimateEntityCore> target, object? start = null, object? end = null, long? durationHours = null, long? setpoint = null)
    {
        target.CallService("set_holiday", new MypyllantSetHolidayParameters { Start = start, End = end, DurationHours = durationHours, Setpoint = setpoint });
    }

    ///<summary>Sets temperature for manual mode</summary>
    public static void SetManualModeSetpoint(this IClimateEntityCore target, MypyllantSetManualModeSetpointParameters data)
    {
        target.CallService("set_manual_mode_setpoint", data);
    }

    ///<summary>Sets temperature for manual mode</summary>
    public static void SetManualModeSetpoint(this IEnumerable<IClimateEntityCore> target, MypyllantSetManualModeSetpointParameters data)
    {
        target.CallService("set_manual_mode_setpoint", data);
    }

    ///<summary>Sets temperature for manual mode</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Manual Mode Setpoint Temperature eg: 21</param>
    ///<param name="setpointType">Manual Mode Type eg: heating</param>
    public static void SetManualModeSetpoint(this IClimateEntityCore target, double temperature, object? setpointType = null)
    {
        target.CallService("set_manual_mode_setpoint", new MypyllantSetManualModeSetpointParameters { Temperature = temperature, SetpointType = setpointType });
    }

    ///<summary>Sets temperature for manual mode</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Manual Mode Setpoint Temperature eg: 21</param>
    ///<param name="setpointType">Manual Mode Type eg: heating</param>
    public static void SetManualModeSetpoint(this IEnumerable<IClimateEntityCore> target, double temperature, object? setpointType = null)
    {
        target.CallService("set_manual_mode_setpoint", new MypyllantSetManualModeSetpointParameters { Temperature = temperature, SetpointType = setpointType });
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    public static void SetQuickVeto(this IClimateEntityCore target, MypyllantSetQuickVetoParameters data)
    {
        target.CallService("set_quick_veto", data);
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    public static void SetQuickVeto(this IEnumerable<IClimateEntityCore> target, MypyllantSetQuickVetoParameters data)
    {
        target.CallService("set_quick_veto", data);
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Quick Veto Temperature eg: 21</param>
    ///<param name="durationHours">Optional duration in hours for the quick veto, default is 3 hours eg: 3</param>
    public static void SetQuickVeto(this IClimateEntityCore target, double temperature, double? durationHours = null)
    {
        target.CallService("set_quick_veto", new MypyllantSetQuickVetoParameters { Temperature = temperature, DurationHours = durationHours });
    }

    ///<summary>Sets quick veto temperature with optional duration</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Quick Veto Temperature eg: 21</param>
    ///<param name="durationHours">Optional duration in hours for the quick veto, default is 3 hours eg: 3</param>
    public static void SetQuickVeto(this IEnumerable<IClimateEntityCore> target, double temperature, double? durationHours = null)
    {
        target.CallService("set_quick_veto", new MypyllantSetQuickVetoParameters { Temperature = temperature, DurationHours = durationHours });
    }

    ///<summary>Updates the time program for a zone or room</summary>
    public static void SetTimeProgram(this IClimateEntityCore target, MypyllantSetTimeProgramParameters data)
    {
        target.CallService("set_time_program", data);
    }

    ///<summary>Updates the time program for a zone or room</summary>
    public static void SetTimeProgram(this IEnumerable<IClimateEntityCore> target, MypyllantSetTimeProgramParameters data)
    {
        target.CallService("set_time_program", data);
    }

    ///<summary>Updates the time program for a zone or room</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="programType">Type of the time program (heating, cooling). Ambisense rooms ignore this field eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight). Ambisense rooms don&apos;t support end_time eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public static void SetTimeProgram(this IClimateEntityCore target, object? programType = null, object? timeProgram = null)
    {
        target.CallService("set_time_program", new MypyllantSetTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }

    ///<summary>Updates the time program for a zone or room</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="programType">Type of the time program (heating, cooling). Ambisense rooms ignore this field eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight). Ambisense rooms don&apos;t support end_time eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public static void SetTimeProgram(this IEnumerable<IClimateEntityCore> target, object? programType = null, object? timeProgram = null)
    {
        target.CallService("set_time_program", new MypyllantSetTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }

    ///<summary>Disables heating / cooling for 30min for a quick ventilation boost</summary>
    public static void SetVentilationBoost(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("set_ventilation_boost", data);
    }

    ///<summary>Disables heating / cooling for 30min for a quick ventilation boost</summary>
    public static void SetVentilationBoost(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("set_ventilation_boost", data);
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    public static void SetZoneOperatingMode(this IClimateEntityCore target, MypyllantSetZoneOperatingModeParameters data)
    {
        target.CallService("set_zone_operating_mode", data);
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    public static void SetZoneOperatingMode(this IEnumerable<IClimateEntityCore> target, MypyllantSetZoneOperatingModeParameters data)
    {
        target.CallService("set_zone_operating_mode", data);
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="mode">The operating mode of the zone, for example OFF or TIME_CONTROLLED eg: OFF</param>
    ///<param name="operatingType">Whether the set the mode for cooling or heating eg: heating</param>
    public static void SetZoneOperatingMode(this IClimateEntityCore target, object? mode = null, object? operatingType = null)
    {
        target.CallService("set_zone_operating_mode", new MypyllantSetZoneOperatingModeParameters { Mode = mode, OperatingType = operatingType });
    }

    ///<summary>Same as setting HVAC mode, but allows setting heating or cooling</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="mode">The operating mode of the zone, for example OFF or TIME_CONTROLLED eg: OFF</param>
    ///<param name="operatingType">Whether the set the mode for cooling or heating eg: heating</param>
    public static void SetZoneOperatingMode(this IEnumerable<IClimateEntityCore> target, object? mode = null, object? operatingType = null)
    {
        target.CallService("set_zone_operating_mode", new MypyllantSetZoneOperatingModeParameters { Mode = mode, OperatingType = operatingType });
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    public static void SetZoneTimeProgram(this IClimateEntityCore target, MypyllantSetZoneTimeProgramParameters data)
    {
        target.CallService("set_zone_time_program", data);
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    public static void SetZoneTimeProgram(this IEnumerable<IClimateEntityCore> target, MypyllantSetZoneTimeProgramParameters data)
    {
        target.CallService("set_zone_time_program", data);
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="programType">Type of the time program (heating, cooling) eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight) eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public static void SetZoneTimeProgram(this IClimateEntityCore target, object? programType = null, object? timeProgram = null)
    {
        target.CallService("set_zone_time_program", new MypyllantSetZoneTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }

    ///<summary>Deprecated, use &quot;Set Time Program&quot; instead</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="programType">Type of the time program (heating, cooling) eg: heating</param>
    ///<param name="timeProgram">A dictionary of days with a list of setpoints, start_time, and end_time (in minutes since midnight) eg: monday:     - start_time: 420       end_time: 1290       setpoint: 20 tuesday:     - start_time: 420       end_time: 1290       setpoint: 20 wednesday:     - start_time: 420       end_time: 1290       setpoint: 20 thursday:     - start_time: 420       end_time: 1290       setpoint: 20 friday:     - start_time: 420       end_time: 1290       setpoint: 20 saturday:     - start_time: 420       end_time: 1290       setpoint: 20 sunday:     - start_time: 420       end_time: 1290       setpoint: 20 </param>
    public static void SetZoneTimeProgram(this IEnumerable<IClimateEntityCore> target, object? programType = null, object? timeProgram = null)
    {
        target.CallService("set_zone_time_program", new MypyllantSetZoneTimeProgramParameters { ProgramType = programType, TimeProgram = timeProgram });
    }
}

public static class NotifyEntityExtensionMethods
{
    ///<summary>Sends a notification message.</summary>
    public static void SendMessage(this NotifyEntity target, NotifySendMessageParameters data)
    {
        target.CallService("send_message", data);
    }

    ///<summary>Sends a notification message.</summary>
    public static void SendMessage(this IEnumerable<NotifyEntity> target, NotifySendMessageParameters data)
    {
        target.CallService("send_message", data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The NotifyEntity to call this service for</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public static void SendMessage(this NotifyEntity target, string message, string? title = null)
    {
        target.CallService("send_message", new NotifySendMessageParameters { Message = message, Title = title });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The IEnumerable&lt;NotifyEntity&gt; to call this service for</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public static void SendMessage(this IEnumerable<NotifyEntity> target, string message, string? title = null)
    {
        target.CallService("send_message", new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string value)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string value)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    public static void Toggle(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Sends the toggle command.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Sends the turn off command.</summary>
    public static void TurnOff(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Sends the turn off command.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Sends the turn on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the turn on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class RoborockEntityExtensionMethods
{
    ///<summary>Retrieves the map and room information of your device.</summary>
    public static Task<JsonElement?> GetMapsAsync(this IVacuumEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("get_maps", data);
    }

    ///<summary>Retrieves the map and room information of your device.</summary>
    public static void GetMaps(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("get_maps", data);
    }

    ///<summary>Retrieves the map and room information of your device.</summary>
    public static void GetMaps(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("get_maps", data);
    }

    ///<summary>Retrieves the current position of the vacuum.</summary>
    public static Task<JsonElement?> GetVacuumCurrentPositionAsync(this IVacuumEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("get_vacuum_current_position", data);
    }

    ///<summary>Retrieves the current position of the vacuum.</summary>
    public static void GetVacuumCurrentPosition(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("get_vacuum_current_position", data);
    }

    ///<summary>Retrieves the current position of the vacuum.</summary>
    public static void GetVacuumCurrentPosition(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("get_vacuum_current_position", data);
    }

    ///<summary>Sends the vacuum to a specific position.</summary>
    public static void SetVacuumGotoPosition(this IVacuumEntityCore target, RoborockSetVacuumGotoPositionParameters data)
    {
        target.CallService("set_vacuum_goto_position", data);
    }

    ///<summary>Sends the vacuum to a specific position.</summary>
    public static void SetVacuumGotoPosition(this IEnumerable<IVacuumEntityCore> target, RoborockSetVacuumGotoPositionParameters data)
    {
        target.CallService("set_vacuum_goto_position", data);
    }

    ///<summary>Sends the vacuum to a specific position.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="x">Coordinates are relative to the dock. x=25500,y=25500 is the dock position. eg: 27500</param>
    ///<param name="y">Coordinates are relative to the dock. x=25500,y=25500 is the dock position. eg: 32000</param>
    public static void SetVacuumGotoPosition(this IVacuumEntityCore target, string x, string y)
    {
        target.CallService("set_vacuum_goto_position", new RoborockSetVacuumGotoPositionParameters { X = x, Y = y });
    }

    ///<summary>Sends the vacuum to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="x">Coordinates are relative to the dock. x=25500,y=25500 is the dock position. eg: 27500</param>
    ///<param name="y">Coordinates are relative to the dock. x=25500,y=25500 is the dock position. eg: 32000</param>
    public static void SetVacuumGotoPosition(this IEnumerable<IVacuumEntityCore> target, string x, string y)
    {
        target.CallService("set_vacuum_goto_position", new RoborockSetVacuumGotoPositionParameters { X = x, Y = y });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this ISceneEntityCore target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this IEnumerable<ISceneEntityCore> target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SirenEntityExtensionMethods
{
    ///<summary>Toggles the siren on/off.</summary>
    public static void Toggle(this SirenEntity target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the siren on/off.</summary>
    public static void Toggle(this IEnumerable<SirenEntity> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns the siren off.</summary>
    public static void TurnOff(this SirenEntity target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns the siren off.</summary>
    public static void TurnOff(this IEnumerable<SirenEntity> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns the siren on.</summary>
    public static void TurnOn(this SirenEntity target, SirenTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns the siren on.</summary>
    public static void TurnOn(this IEnumerable<SirenEntity> target, SirenTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The SirenEntity to call this service for</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public static void TurnOn(this SirenEntity target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        target.CallService("turn_on", new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The IEnumerable&lt;SirenEntity&gt; to call this service for</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public static void TurnOn(this IEnumerable<SirenEntity> target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        target.CallService("turn_on", new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class TimeEntityExtensionMethods
{
    ///<summary>Sets the time.</summary>
    public static void SetValue(this TimeEntity target, TimeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the time.</summary>
    public static void SetValue(this IEnumerable<TimeEntity> target, TimeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The TimeEntity to call this service for</param>
    ///<param name="time">The time to set. eg: 22:15</param>
    public static void SetValue(this TimeEntity target, DateTime time)
    {
        target.CallService("set_value", new TimeSetValueParameters { Time = time });
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The IEnumerable&lt;TimeEntity&gt; to call this service for</param>
    ///<param name="time">The time to set. eg: 22:15</param>
    public static void SetValue(this IEnumerable<TimeEntity> target, DateTime time)
    {
        target.CallService("set_value", new TimeSetValueParameters { Time = time });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("skip", data);
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("skip", data);
    }
}

public static class VacuumEntityExtensionMethods
{
    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("clean_spot", data);
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("clean_spot", data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("locate", data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("locate", data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("return_to_base", data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("return_to_base", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IVacuumEntityCore target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IEnumerable<IVacuumEntityCore> target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IVacuumEntityCore target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IEnumerable<IVacuumEntityCore> target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IVacuumEntityCore target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IEnumerable<IVacuumEntityCore> target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IVacuumEntityCore target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IEnumerable<IVacuumEntityCore> target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("start", data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("stop", data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("stop", data);
    }
}

public static class WaterHeaterEntityExtensionMethods
{
    ///<summary>Turns away mode on/off.</summary>
    public static void SetAwayMode(this WaterHeaterEntity target, WaterHeaterSetAwayModeParameters data)
    {
        target.CallService("set_away_mode", data);
    }

    ///<summary>Turns away mode on/off.</summary>
    public static void SetAwayMode(this IEnumerable<WaterHeaterEntity> target, WaterHeaterSetAwayModeParameters data)
    {
        target.CallService("set_away_mode", data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="awayMode">New value of away mode.</param>
    public static void SetAwayMode(this WaterHeaterEntity target, bool awayMode)
    {
        target.CallService("set_away_mode", new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="awayMode">New value of away mode.</param>
    public static void SetAwayMode(this IEnumerable<WaterHeaterEntity> target, bool awayMode)
    {
        target.CallService("set_away_mode", new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    public static void SetOperationMode(this WaterHeaterEntity target, WaterHeaterSetOperationModeParameters data)
    {
        target.CallService("set_operation_mode", data);
    }

    ///<summary>Sets the operation mode.</summary>
    public static void SetOperationMode(this IEnumerable<WaterHeaterEntity> target, WaterHeaterSetOperationModeParameters data)
    {
        target.CallService("set_operation_mode", data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetOperationMode(this WaterHeaterEntity target, string operationMode)
    {
        target.CallService("set_operation_mode", new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetOperationMode(this IEnumerable<WaterHeaterEntity> target, string operationMode)
    {
        target.CallService("set_operation_mode", new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    public static void SetTemperature(this WaterHeaterEntity target, WaterHeaterSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the target temperature.</summary>
    public static void SetTemperature(this IEnumerable<WaterHeaterEntity> target, WaterHeaterSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetTemperature(this WaterHeaterEntity target, double temperature, string? operationMode = null)
    {
        target.CallService("set_temperature", new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetTemperature(this IEnumerable<WaterHeaterEntity> target, double temperature, string? operationMode = null)
    {
        target.CallService("set_temperature", new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    public static void TurnOff(this WaterHeaterEntity target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns water heater off.</summary>
    public static void TurnOff(this IEnumerable<WaterHeaterEntity> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns water heater on.</summary>
    public static void TurnOn(this WaterHeaterEntity target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns water heater on.</summary>
    public static void TurnOn(this IEnumerable<WaterHeaterEntity> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, object @type)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static void GetForecasts(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static void GetForecasts(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }
}